<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Raptazure&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://raptazure.github.io/"/>
  <updated>2020-05-15T00:57:50.572Z</updated>
  <id>https://raptazure.github.io/</id>
  
  <author>
    <name>Raptazure</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最近在做的事和一些想法</title>
    <link href="https://raptazure.github.io/2020/05/14/5-14-recently/"/>
    <id>https://raptazure.github.io/2020/05/14/5-14-recently/</id>
    <published>2020-05-14T15:31:44.000Z</published>
    <updated>2020-05-15T00:57:50.572Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/14/5-14-recently/deno.png"><br>$\quad$今天（忽略时差）deno 1.0 正式发布，本来想写一写deno的特性，但是感觉最近的学习存在一些问题，所以就记录下来，顺便明确一下短期的目标。</p><a id="more"></a><ul><li>这个星期开始的时候，决定在当前最喜欢的社交平台 GitHub 进行时间追踪，于是部署了两个 github-acions，每天八点把 RescueTime 和 WakaTime 的时间统计更新到 gist 上，一方面是想看一下自己每天在电子设备上花费的时间都去哪了，另一方面是想保证每天都有一定的敲代码的时间，保持生产力，再者放到 GitHub 上可以对我起到一定的监督作用。配合在博客 issue 区开的每月计划，感觉可以让自己在充分利用时间这方面做的好一些吧。</li><li>然而最近似乎泡在 GitHub 上的时间有些多了，总是东逛逛西看看，对各种看起来有趣或者有用的项目感兴趣，却又不能深入探索，流于表面，除了一些新点子以外，其实并不能对编程能力起到很大的提升。嗯，大概是逛上瘾了，一上午不去溜几圈不自在的那种。我想，以后还是在特定时间逛比较好（早上起床，中午吃完饭，晚上睡觉前），当然此处仅仅指“发现新项目”这件事，还是以质换量比较妥当，多看两个还不如仔细看看一个。</li><li>还有一个问题，就是对特定问题的学习不够深入，就比如，虽然 js 让我认识了函数式编程和设计模式的概念，node 让我认识了异步和 non-blocking IO 等概念，但是我却并没有去仔细具体地学习每一个话题，几乎只停留在了解这些术语以及勉强能用的程度，就像虽然我一直在用 vue 和 node，在用 express，却没有决心去把源码啃下来（当然还有一部分是能力原因）。嗯，有些只局限于语言和框架的感觉，就好像 deno 发布了，高兴的去看一看 features，很激动，上手写几个 demo，然后新鲜感过去，大概就没有然后了，其实也想为 deno 的生态建设做些什么的说，那为什么就不去行动呢？哪怕是现在看起来比较遥远的目标，不去做就永远也实现不了，对么？</li><li>以后还是要偏底层一些吧（作为一种态度），不管学什么都要更深入一些，比如 typescript，vue，node，还有今后想深入的 react，rust，不过这就意味着还需要很多专业基础课的知识才能更好地理解，而这些又在某种程度上依赖于逻辑思维能力以及现在正在上的数学课们，那就不如从正在教的课开始（数电，离散，工数，概率论），踏踏实实地好好钻吧，沉下心来才能把事情做好呀。</li><li>升大二以前，就专注于课内知识 + vue 应用以及源码（frontend master）吧，有后端需求的话就用 express + mongodb 写写，到大二再开始 advanced nodejs（udemy）的学习，不仅要深入理解 libuv threadpool，event loop，os operations，还要学习相关的工具，包括 pm2，redis，jest，CI 等，当然在整个阶段，typescript 也要自然跟进，包括高级类型的运用，对 OOP 和常用设计模式的理解等等，并写一个简单的 web framework（udemy）。总之，不要盲目地去学习新的东西，对于大一大二，就是学好课内知识，把课外知识的注意力集中到 vue，node 和 ts 的深入以及对计算机基础理论的理解上。</li><li>把要做的事情减少，把事情做好。记得为何而出发，记得要去往何方。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/05/14/5-14-recently/deno.png&quot;&gt;&lt;br&gt;$\quad$今天（忽略时差）deno 1.0 正式发布，本来想写一写deno的特性，但是感觉最近的学习存在一些问题，所以就记录下来，顺便明确一下短期的目标。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="感悟" scheme="https://raptazure.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>记大一上</title>
    <link href="https://raptazure.github.io/2020/04/12/first-semester/"/>
    <id>https://raptazure.github.io/2020/04/12/first-semester/</id>
    <published>2020-04-12T08:07:42.000Z</published>
    <updated>2020-05-14T16:48:01.926Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/04/12/first-semester/intro.jpg" width="900px"></p><p>$\quad$因为年级要求学生互评，需要制作一份 2-3 分钟的 PPT 展示自己大一上学期的成长与收获，感悟与体会，存在的缺点不足以及未来的规划打算（这不是公开处刑嘛(#`O′)，既然写完了，就发布到博客好了，也当作自己对前一阶段的小总结吧。</p><a id="more"></a><p>$\quad$虽说让做 PPT，但是理论上任何 slideshow 都可以满足这一需求，作为 markdown 的重度爱好者（不是），去 GitHub 上逛了一圈选定了 remark，这样也便于移植啦！</p><ul><li>话不多说，还是直接贴源码方便= =</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的大一上<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      @<span class="keyword">import</span> url(https://fonts.googleapis.com/css?family=Yanone + Kaffeesatz);</span></span><br><span class="line"><span class="css">      @<span class="keyword">import</span> url(</span></span><br><span class="line">        https://fonts.googleapis.com/css?family=Droid + Serif:400,</span><br><span class="line">        700,</span><br><span class="line">        400italic</span><br><span class="line">      );</span><br><span class="line"><span class="css">      @<span class="keyword">import</span> url(</span></span><br><span class="line">        https://fonts.googleapis.com/css?family=Ubuntu + Mono:400,</span><br><span class="line">        700,</span><br><span class="line">        400italic</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      body &#123;</span><br><span class="line">        font-family: "Droid Serif";</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      h1,</span><br><span class="line">      h2,</span><br><span class="line">      h3 &#123;</span><br><span class="line">        font-family: "Yanone Kaffeesatz";</span><br><span class="line">        font-weight: normal;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.remark-code</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.remark-inline-code</span> &#123;</span></span><br><span class="line">        font-family: "Ubuntu Mono";</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.down</span> &#123;</span></span><br><span class="line">        margin-top: 50px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"source"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">class: center, middle</span><br><span class="line"></span><br><span class="line"># 记大一上...</span><br><span class="line"></span><br><span class="line">### slideshow created using [remark](https://github.com/gnab/remark)</span><br><span class="line"></span><br><span class="line">2191110314 刘浩然</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 崭新的大学生活</span><br><span class="line"></span><br><span class="line">- 作为大学生活的开端，生活还算蛮丰富吧，除了渐渐适应住校生活，变得更独立自主以外，也尝试参加了不同的活动，比如：</span><br><span class="line">    - 趣味运动会夹气球跑（准确说应该是跳= =）</span><br><span class="line">    - 月海音乐晚会宣传视频剪辑和摄像工作（宣传部划水人士= =）</span><br><span class="line">    - 校园马拉松（本来运动细胞就不发达的说= =）</span><br><span class="line">    - 大一年度项目组长（慢着，这不算活动啊喂= =）</span><br><span class="line">    - 嗯...大概还有其他一些零零散散的活动，就不列举了...</span><br><span class="line">--</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span></span><br><span class="line">- 我觉得在大学多尝试尝试几种活动其实还蛮不错的，毕竟多了一份对生活的体验吧，现在回头想想这半年参加的活动，可能比高中的总和还要多...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 专业知识学习</span><br><span class="line"></span><br><span class="line">- 这是上学期注重比较多的部分，其实也不是刻意，只是感觉喜欢就做得多一些，下面来分类聊一聊：</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">#### 方向选择</span><br><span class="line">- 在大一上学期开始的时候，自己对于以后想做的事情还不是很清晰，为了早一些找到自己喜欢做的事情以便深入，也做了很多尝试，比如unity做个小游戏，拿python画个画（雾）等等，但是总有些三分钟热度的意思，直到遇到了能让我决定坚持下来的，并能称为自己喜欢的——</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">##### JavaScript / TypeScript</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">- 与其说喜欢这门语言，倒不如说是喜欢其背后的丰富生态，作为GitHub上repo数常年领先的语言，世界各地的人们都在为这门语言的发展做着自己的贡献。</span><br><span class="line">- 不管是前端三大框架Vue（尤大赛高！），React，Angular，还是基于Node.js的服务端框架Express，Koa，Fastify，用于移动端开发的RN与Ionic，桌面开发的Electron，物联网领域的JonnyFive，人工智能领域的Tensorflow.js，都展示着社区的力量。再加上体会过用TS开发VSCode扩展的愉悦感，把自己喜欢的塔罗牌加入到编辑器中，让我更加坚定了决心。</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">- 在大一上这个时间点确定了努力的方向与要做的事情，真的蛮庆幸的吧。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#### 开源世界/技术分享</span><br><span class="line"></span><br><span class="line">- 充分发挥自己瞎鼓捣的特质，结识linux，docker，vim，git与github等对我帮助很大</span><br><span class="line">- 使用Hexo与GitHubPages搭建了自己的个人博客，目前与掘金平台持续更新中...</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">- 顺便借此机会，GitHub扩一波列呀~如果收到issue和PR其实很开心的，欢迎伙伴们来一起写代码~（占时间有些多，这块暂时就说这些啦</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"commit.png"</span> <span class="attr">width</span>=<span class="string">"800px"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 基础课学习（数学）</span><br><span class="line"></span><br><span class="line">- 这块做的自认为很不好，没有及时复习，最后考试周突击，导致某些考试课的绩点比较惨= =</span><br><span class="line">- 所以自己以后也要加强对基础课的学习，特别是数学（就目前大一来说），当然专业基础课肯定更要好好学啦！</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">- 哦对了，体育好像也算基础课，还要多多运动！</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">- 所以这还关联到一个时间管理和分配的事情，这块自己做的也不是很好，常常由着自己的性子来，有种想做的事情才去做的感觉= =，以后大概要注意一下了</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 未来要做的事情</span><br><span class="line"></span><br><span class="line">- 专业方面，首先要把实验室前端的工作做好吧，这也是一份责任，当然也是兴趣，所以要把前端学精一些，然后慢慢向后端扩展（Node.js)</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">- 基础课方面，前面也说过了，要合理分配时间，多多努力才行呀 </span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">- 然后，希望能多交几个朋友(￣▽￣)""...也希望能坚持发展自己除编程外的兴趣，比如音乐和神秘学（玄学）等等，还要看想看的番</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">- 然后就是...希望今年也能和大家一起开心的写代码！</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 就是这些啦</span><br><span class="line">## 谢谢大家！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://remarkjs.com/downloads/remark-latest.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> slideshow = remark.create();</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>其实还有很多很多其他的事情没有写上去，毕竟是公开展示嘛（嘿嘿）</li><li>总之加油加油啦！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/04/12/first-semester/intro.jpg&quot; width=&quot;900px&quot;&gt;&lt;/p&gt;
&lt;p&gt;$\quad$因为年级要求学生互评，需要制作一份 2-3 分钟的 PPT 展示自己大一上学期的成长与收获，感悟与体会，存在的缺点不足以及未来的规划打算（这不是公开处刑嘛(#`O′)，既然写完了，就发布到博客好了，也当作自己对前一阶段的小总结吧。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="感悟" scheme="https://raptazure.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>让VSCode更美</title>
    <link href="https://raptazure.github.io/2020/03/13/vsc-beautify/"/>
    <id>https://raptazure.github.io/2020/03/13/vsc-beautify/</id>
    <published>2020-03-13T06:05:15.000Z</published>
    <updated>2020-05-13T03:14:41.909Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/03/13/vsc-beautify/demo.png" width="900px"></p><p>$\quad$漂亮的编辑器可以让写代码的心情也变好呢，对于每天都见面的VSCode，当然要看起来尽可能漂亮啦，本文就介绍一下自己目前使用的方案吧~</p><a id="more"></a><h3 id="半透明背景"><a href="#半透明背景" class="headerlink" title="半透明背景"></a>半透明背景</h3><ul><li>如果你正在使用 Windows 系统，那么推荐<code>Glasslt-VSC</code>扩展，安装之后可以自由调节透明度</li><li>如果正在用 Linux 系统，可以尝试<code>Glasslt Linux</code>，要注意看扩展的 README 文件哦</li><li>如果想要加入毛玻璃效果，可以尝试一下我在 Manjaro Linux i3 桌面下的方案，使用改动版的&nbsp;<a href="https://github.com/raptazure/compton" target="_blank" rel="noopener">compton</a>&nbsp;并添加 VSCode 相关的配置文件，GUI 配置可以通过&nbsp;<a href="https://github.com/lxqt/compton-conf" target="_blank" rel="noopener">compton-conf</a>&nbsp;来实现，具体毛玻璃效果的配置方法请参考官方文档。顺便一提，理论上有了这个方法就可以毛玻璃化所有的窗口哦</li></ul><h3 id="优美的字体"><a href="#优美的字体" class="headerlink" title="优美的字体"></a>优美的字体</h3><ul><li>第一个要推荐的是&nbsp;<a href="https://github.com/tonsky/FiraCode" target="_blank" rel="noopener">Fira Code</a>&nbsp;，支持连字，配置也很容易，在 releases 页面下载安装后修改<code>settings.json</code>即可，注意设置<code>&quot;editor.fontLigatures&quot;: true</code>哦</li><li>第二个推荐的字体是&nbsp;<a href="https://github.com/kiliman/operator-mono-lig" target="_blank" rel="noopener">Operator Mono Lig</a>&nbsp;，斜体字灰常飘逸优雅，不过安装相对有点麻烦：<ul><li>首先要下载原版的<code>Operator Mono</code>字体，系统中需要有<code>Python 2.7+</code>，<code>Node.js</code>并使用<code>pip</code>安装了<code>fonttools</code></li><li>之后克隆 Git 仓库到本地，按照 README 的格式要求命名原版字体的 otf 文件，移动到<code>original</code>文件夹</li><li>运行<code>npm install</code>并执行<code>build</code>操作，输出字体会出现在<code>build</code>文件夹里</li><li>配置<code>settings.json</code>，比如：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"editor.fontFamily": "Operator Mono Lig",</span><br><span class="line">"editor.fontLigatures": true,</span><br><span class="line">"editor.fontWeight": "500",</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="和谐的主题"><a href="#和谐的主题" class="headerlink" title="和谐的主题"></a>和谐的主题</h3><ul><li>为了更好地适配<code>Operator Mono Lig</code>的斜体特性，推荐下面三个主题：<ul><li><code>Horizon Italic</code>：来自<code>Horizon Theme</code>，相应的 Light Theme 也很漂亮</li><li><code>Community Material Theme Palenight</code>：来自<code>Material Theme</code></li><li><code>Palenight Operator</code>：来自<code>Palenight Theme</code></li></ul></li><li>不考虑适配斜体字的问题，还推荐<code>One Dark Pro</code>，不过这个应该已经很出名了哈哈</li></ul><h3 id="丝滑的光标"><a href="#丝滑的光标" class="headerlink" title="丝滑的光标"></a>丝滑的光标</h3><ul><li><p>在<code>settings.json</code>中添加如下代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"editor.cursorSmoothCaretAnimation": true,</span><br><span class="line">"editor.cursorBlinking": "phase",</span><br></pre></td></tr></table></figure></li><li><p>现在是否感觉光标移动更加丝滑了呢？</p></li></ul><h3 id="神奇的扩展"><a href="#神奇的扩展" class="headerlink" title="神奇的扩展"></a>神奇的扩展</h3><ul><li>想要更具艺术性的结合？不妨来看看<code>Daily Tarot</code>扩展吧，传送门：<a href="https://marketplace.visualstudio.com/items?itemName=raptazure.daily-tarot" target="_blank" rel="noopener">点我</a></li><li>啊咧，不小心打了个广告…基本上个人的美化方案就是这些了，欢迎讨论交流哦~</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/03/13/vsc-beautify/demo.png&quot; width=&quot;900px&quot;&gt;&lt;/p&gt;
&lt;p&gt;$\quad$漂亮的编辑器可以让写代码的心情也变好呢，对于每天都见面的VSCode，当然要看起来尽可能漂亮啦，本文就介绍一下自己目前使用的方案吧~&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://raptazure.github.io/categories/Tools/"/>
    
    
      <category term="Visual Studio Code" scheme="https://raptazure.github.io/tags/Visual-Studio-Code/"/>
    
  </entry>
  
  <entry>
    <title>在Vue.js中使用TS</title>
    <link href="https://raptazure.github.io/2020/03/06/vue-ts/"/>
    <id>https://raptazure.github.io/2020/03/06/vue-ts/</id>
    <published>2020-03-06T06:22:43.000Z</published>
    <updated>2020-05-13T00:55:35.683Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/03/06/vue-ts/demo.jpeg" width="950px">  </p><p>$\quad$虽然<code>vue2.x</code>对TypeScript的支持还不是非常完善，但是从今年即将到来的3.0版本在GitHub上的仓库&nbsp;<a href="https://github.com/vuejs/vue-next" target="_blank" rel="noopener">vue-next</a>&nbsp;看，为TS提供更好的官方支持应该也会是一个重要特性，那么，在迎接3.0之前，不妨先来看看目前版本二者的搭配食用方法吧~<br><a id="more"></a></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ul><li>虽然GitHub上有各种各样相关的Starter，但是使用<code>Vue CLI</code>应该是目前相对比较好的方式，在使用<code>vue create</code>创建新项目时，对<code>preset</code>选择<code>Manually select features</code>选项，之后添加<code>TypeScript</code></li><li>如果想在vue应用中完整使用ES6中提供的类特性，那么在<code>class-style component syntax</code>处选择Y（本文主要介绍选择Y的情况）</li><li>对于<code>Babel</code>来说，一般情况选择使用，而<code>linter / formatter</code>的具体选择可根据项目需求，此处不多说明</li></ul><h3 id="进入项目"><a href="#进入项目" class="headerlink" title="进入项目"></a>进入项目</h3><ul><li><p>创建完成后，看一看<code>package.json</code>，可以发现<code>vue-class-component</code>和<code>vue-property-decorator</code>以及其他ts相关的modules都已被添加，其中：</p><ul><li><p><code>vue-class-component</code>可以让你使用class-style语法创建组件，比如以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// Define the component in class-style</span></span></span><br><span class="line">  @Component</span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Class properties will be component data</span></span></span><br><span class="line">    count = 0</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// Methods will be component methods</span></span></span><br><span class="line">    increment() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count++</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    decrement() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.count--</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>而<code>vue-property-component</code>则完全依赖于前者，提供了除<code>@Component</code>外的其他几种装饰器，比如<code>@Prop</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Vue, Component, Prop &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Component</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> YourComponent <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Prop</span>(<span class="built_in">Number</span>) readonly propA: <span class="built_in">number</span> | <span class="literal">undefined</span></span><br><span class="line">    <span class="meta">@Prop</span>(&#123; <span class="keyword">default</span>: <span class="string">'default value'</span> &#125;) readonly propB!: <span class="built_in">string</span></span><br><span class="line">    <span class="meta">@Prop</span>([<span class="built_in">String</span>, <span class="built_in">Boolean</span>]) readonly propC: <span class="built_in">string</span> | <span class="built_in">boolean</span> | <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再来一个二者结合的简单例子吧:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reverseStr()"</span>&gt;</span>Reverse<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Component, Prop, Vue, Watch &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="vbscript">  @Prop() <span class="keyword">private</span> msg!: <span class="built_in">string</span>;</span></span><br><span class="line"><span class="actionscript">  firstName = <span class="string">"rapt"</span>;</span></span><br><span class="line"><span class="actionscript">  lastName = <span class="string">"azure"</span>;</span></span><br><span class="line"></span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'mounted'</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// Computed property</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">get</span> fullName(): string &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// Method</span></span></span><br><span class="line">  reverseStr() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.firstName = <span class="keyword">this</span>.firstName.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.lastName = <span class="keyword">this</span>.lastName.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>此时，你的vue项目已经有fully-typed的可能了，当然也会有更好的自动补全以及错误提示。</p></li><li>为了更好的确定类型，可以创建例如<code>interfaces</code>这样的文件夹，充分利用ts的接口和类来使项目有更好的组织结构，可读性和维护性。</li></ul><h3 id="另一种选择"><a href="#另一种选择" class="headerlink" title="另一种选择"></a>另一种选择</h3><ul><li>其实当然也可以不使用class风格啦，这样的话，就和平时熟悉的vue更为相似了，而对类型当然也是完全支持的。</li><li>这里也提供一个简单的例子吧~<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; test &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> Vue.extend(&#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    msg: <span class="built_in">String</span>,</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      test: <span class="string">"Hello from TS"</span> <span class="keyword">as</span> string</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="vbscript">    pressMe(): <span class="built_in">string</span> &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.test + <span class="string">'br'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="其他的话"><a href="#其他的话" class="headerlink" title="其他的话"></a>其他的话</h3><ul><li>本文只是简要探讨了在Vue.js中使用TypeScript的可能性，更多的相关内容在&nbsp;<a href="https://vuejs.org/v2/guide/typescript.html" target="_blank" rel="noopener">官方文档</a>&nbsp;里可以找到哦，或者也可以多去Github的Vue区，TS区逛逛呢~</li><li>TypeScript的出现为JavaScript的生态带来了新活力，不管是前端三大框架Vue，React，Angular，还是Node系的后端框架比如Nest和Express，都在积极拥抱TS，希望以后整个生态会发展得越来越好吧~</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/03/06/vue-ts/demo.jpeg&quot; width=&quot;950px&quot;&gt;  &lt;/p&gt;
&lt;p&gt;$\quad$虽然&lt;code&gt;vue2.x&lt;/code&gt;对TypeScript的支持还不是非常完善，但是从今年即将到来的3.0版本在GitHub上的仓库&amp;nbsp;&lt;a href=&quot;https://github.com/vuejs/vue-next&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-next&lt;/a&gt;&amp;nbsp;看，为TS提供更好的官方支持应该也会是一个重要特性，那么，在迎接3.0之前，不妨先来看看目前版本二者的搭配食用方法吧~&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://raptazure.github.io/categories/JavaScript/"/>
    
    
      <category term="TypeScript" scheme="https://raptazure.github.io/tags/TypeScript/"/>
    
      <category term="Vue.js" scheme="https://raptazure.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>在JS中体验TS的快感</title>
    <link href="https://raptazure.github.io/2020/02/26/ts-check/"/>
    <id>https://raptazure.github.io/2020/02/26/ts-check/</id>
    <published>2020-02-25T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.680Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/02/26/ts-check/ts.jpg" width="900px"></p><p>$\quad$在 Vanilla JS 里是否可以实现类似TypeScript的类型检查呢？在TS2.3版本以后，微软增加了对JS文件的TS支持，从此以后，在你的<code>.js</code>里加上几行注释就可以愉快地体验啦~</p><a id="more"></a><h3 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h3><ul><li>在要进行类型检查的<code>.js</code>文件的开始加上注释：<code>// @ts-check</code>，如果你正在使用 VSCode 并且代码中有不当之处的话，就可以即时看到红线以及报错信息了。</li><li><p>比如我们输入以下代码，可以发现<code>readonly: false</code>被标出了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">"Hello, TS"</span>,</span><br><span class="line"> &#123; <span class="attr">value</span>: <span class="string">"v1.0.0"</span>, <span class="attr">readonly</span>: <span class="literal">false</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>此时通过对<code>defineProperty</code>进行<code>Ctrl+Click</code>，我们可以打开<code>lib.es5.d.ts</code>，找到下列代码，可以发现并不应该用<code>readonly</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> PropertyDescriptor &#123;</span><br><span class="line">  configurable?: <span class="built_in">boolean</span>;</span><br><span class="line">  enumerable?: <span class="built_in">boolean</span>;</span><br><span class="line">  value?: <span class="built_in">any</span>;</span><br><span class="line">  writable?: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="keyword">get</span>?(): <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">set</span>?(v: <span class="built_in">any</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>所以，我们可以这样更改代码，可以发现错误马上消失了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">"Hello, TS"</span>,</span><br><span class="line"> &#123; <span class="attr">value</span>: <span class="string">"v1.0.0"</span>, <span class="attr">writable</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>再如以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shipWeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="built_in">document</span>.getElementById(<span class="string">'weight'</span>).textContent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (shipWeight &gt; <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Oversize package'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这样，ts可以帮助我们在runtime之前找出错误，而不至于发生条件一直是false但是不会报错的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shipWeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="built_in">document</span>.getElementById(<span class="string">'weight'</span>).textContent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (shipWeight() &gt; <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Oversize package'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="定义类型"><a href="#定义类型" class="headerlink" title="定义类型"></a>定义类型</h3><ul><li>除了进行类型检查之外，我们还可以通过JSDoc注释对默认类型为any的变量进行定义，比如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123; string | string[] &#125; emailAddr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendUpdates</span>(<span class="params">emailAddr</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sendEmail</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shipWeight() &gt; <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Oversize package'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(emailAddr)) &#123;</span><br><span class="line">    emailAddr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">val, idx</span>) </span>&#123;</span><br><span class="line">      sendEmail(val.trim());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sendEmail(emailAddr.trim());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h3><ul><li>如果直接把现存的JS文件扩展名修改为<code>.ts</code>的话，就需要修改相对比较多的地方了，这里仅仅列出一些Tips，具体还需要参考&nbsp;<a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript官方文档</a>&nbsp;以及其他资源。</li><li>Tip1：如果使用了commonjs语句<code>const request = require(&#39;request&#39;);</code>进行import，可以使用replace+正则表达式<code>(?:const|let|var)\s+(\w+)\s=\srequire\((.+?)\)</code>和<code>import * as $1 from $2</code>完成到的es6相应语法的替换。当然，可能还要处理更多关于import和export的问题。</li><li>Tip2：擅长利用dts文件（如果存在），受益于已经定义好的类型。</li><li>Tip3: 加入类型不止可以帮助我们找出错误，还将有更好的自动补全提示，全面提高开发效率。同时也使代码更易于阅读与维护。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/02/26/ts-check/ts.jpg&quot; width=&quot;900px&quot;&gt;&lt;/p&gt;
&lt;p&gt;$\quad$在 Vanilla JS 里是否可以实现类似TypeScript的类型检查呢？在TS2.3版本以后，微软增加了对JS文件的TS支持，从此以后，在你的&lt;code&gt;.js&lt;/code&gt;里加上几行注释就可以愉快地体验啦~&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://raptazure.github.io/categories/JavaScript/"/>
    
    
      <category term="TypeScript" scheme="https://raptazure.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo多端同步</title>
    <link href="https://raptazure.github.io/2020/02/25/hexo-sync/"/>
    <id>https://raptazure.github.io/2020/02/25/hexo-sync/</id>
    <published>2020-02-25T14:42:26.000Z</published>
    <updated>2020-05-13T00:55:35.671Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/02/25/hexo-sync/hexo-page.png" width="900px"><br>&#160;&#160;&#160;&#160;&#160;&#160;因为最近发现WSL2可以基本满足对Linux的需求，再加上学校有各种各样的任务，不知不觉产生了迁回Windows10的倾向，然而，以前的博客都在Manjaro Linux上，如何节省宝贵的时间，直接在Windows上沿用先前的配置而不用重新配置呢？这就需要利用GitHub进行多端同步了。<br><a id="more"></a></p><h2 id="在-Linux-上的设置（初始端）"><a href="#在-Linux-上的设置（初始端）" class="headerlink" title="在 Linux 上的设置（初始端）"></a>在 Linux 上的设置（初始端）</h2><ul><li>如果你使用的主题是在 github 上克隆下来的（比如 next），需要先删除主题文件夹中的<code>.git</code>和<code>.github</code>文件，以防 git 仓库嵌套及生成 GitHub-Submodule。</li><li><p>因为<code>hexo g -d</code>命令是在 master 分支上更新静态文件，也就是说，hexo 只会将<code>hexo generate</code>得到的<code>public</code>文件夹中的内容上传至 GitHub，所以，我们需要新建一个分支用来储存 Hexo 的源文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">vim .gitignore</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"source sync"</span></span><br><span class="line">git branch sync</span><br><span class="line">git checkout sync</span><br><span class="line">git remote add origin git@github.com:yourname/yourname.github.io.git</span><br><span class="line">git push origin sync</span><br></pre></td></tr></table></figure></li><li><p>其中，<code>.gitignore</code>的一个示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></li><li><p>完成之后，GitHub 相应仓库应该已经出现了 sync 分支。</p></li></ul><h2 id="在-Windows-上的设置（同步端）"><a href="#在-Windows-上的设置（同步端）" class="headerlink" title="在 Windows 上的设置（同步端）"></a>在 Windows 上的设置（同步端）</h2><ul><li>来到要进行同步的地方，在终端输入以下指令<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b sync git@github.com:yourname/yourname.github.io.git</span><br><span class="line"><span class="built_in">cd</span> yourname.github.io</span><br><span class="line">npm install</span><br><span class="line">hexo new <span class="string">"test"</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"new post"</span></span><br><span class="line">git push origin sync</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></li></ul><h2 id="此时可再回到-Linux-继续更新（已在同步端更新后的初始端）"><a href="#此时可再回到-Linux-继续更新（已在同步端更新后的初始端）" class="headerlink" title="此时可再回到 Linux 继续更新（已在同步端更新后的初始端）"></a>此时可再回到 Linux 继续更新（已在同步端更新后的初始端）</h2><ul><li>愉快地 Sync 吧~<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git pull origin sync</span><br><span class="line">hexo new <span class="string">"another-post"</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"new post"</span></span><br><span class="line">git push origin sync</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/02/25/hexo-sync/hexo-page.png&quot; width=&quot;900px&quot;&gt;&lt;br&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;因为最近发现WSL2可以基本满足对Linux的需求，再加上学校有各种各样的任务，不知不觉产生了迁回Windows10的倾向，然而，以前的博客都在Manjaro Linux上，如何节省宝贵的时间，直接在Windows上沿用先前的配置而不用重新配置呢？这就需要利用GitHub进行多端同步了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://raptazure.github.io/categories/Tools/"/>
    
    
      <category term="git" scheme="https://raptazure.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>高精度加法模板及应用</title>
    <link href="https://raptazure.github.io/2019/12/15/HAA/"/>
    <id>https://raptazure.github.io/2019/12/15/HAA/</id>
    <published>2019-12-14T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.661Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/12/15/HAA/cc.jpg" style="margin: 0 auto"></p><ul><li>高精度加法通过对数位分别储存运算，并维护一个用于处理进位的变量，从而在不造成溢出的前提下实现大数相加。</li><li>Java 和 Python 中虽然不需要考虑大整数相加的溢出问题，但这种算法的思想很值得借鉴。</li><li>这种思想在很多问题上都可以应用，这里选取 LC 的几道题目进行分析</li></ul><a id="more"></a><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// 加引用避免再拷贝整个数组</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; add(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义储存结果的vector以及进位t，第0位没有进位-&gt;初始化为0</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 从个位开始遍历直至遍历完A和B的所有位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size() || i &lt; B.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 每一次用t表示Ai，Bi与上一个数的进位这三个数的和</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; A.size()) t += A[i];</span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.size()) t += B[i];</span><br><span class="line">        <span class="comment">// 当前这一位输出t除以10的余数</span></span><br><span class="line">        C.push_back(t % <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// t是否进位</span></span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果最高位有进位则补1</span></span><br><span class="line">    <span class="keyword">if</span>(t) C.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 使用字符串读入</span></span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b; <span class="comment">//a = "123456"</span></span><br><span class="line">    <span class="comment">// 使用vector逆序读入,变成整数需要减去偏移量0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.push_back(a[i] - <span class="string">'0'</span>);<span class="comment">//A = [6,5,4,3,2,1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = b.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.push_back(b[i] - <span class="string">'0'</span>);</span><br><span class="line">    <span class="comment">// 相当于vector&lt;int&gt;</span></span><br><span class="line">    <span class="keyword">auto</span> C = add(A, B);</span><br><span class="line">    <span class="comment">// 倒序输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = C.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">"%d"</span>, C[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 个位放在索引0的位置：出现进位的情况时需要在高位补上1,这样在数组后端补数比较容易</span></span><br></pre></td></tr></table></figure><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><h5 id="LC066-Plus-One"><a href="#LC066-Plus-One" class="headerlink" title="LC066 Plus One"></a>LC066 <a href="https://leetcode.com/problems/plus-one/" target="_blank" rel="noopener">Plus One</a></h5><ul><li>实际就是只考虑+1 特殊情况的简化版</li><li>逆序遍历<code>digits</code>数组，每次循环将<code>digits</code>的元素加到<code>t</code>上</li><li>仅当第一次遍历（个位）时使<code>t</code>额外加 1</li><li>将当前位结果<code>t%10</code>存到答案<code>res</code>里</li><li>用<code>t/10</code>表示进位并进入下一次循环</li><li>遍历后，如果最高位仍有进位则补 1</li><li>翻转数组得到答案</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; plusOne(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = digits.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            t += digits[i];</span><br><span class="line">            <span class="keyword">if</span>(i == digits.size() - <span class="number">1</span>) t += <span class="number">1</span>;</span><br><span class="line">            res.push_back(t % <span class="number">10</span>);</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t) res.push_back(<span class="number">1</span>);</span><br><span class="line">        reverse(res.begin(), res.end());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="LC002-Add-Two-Numbers"><a href="#LC002-Add-Two-Numbers" class="headerlink" title="LC002 Add Two Numbers"></a>LC002 <a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="noopener">Add Two Numbers</a></h5><ul><li>这里其实就是采用链表储存数位，和使用数组一样，要注意访问元素的顺序。</li><li>注意到题中描述<code>The digits are stored in reverse order</code>，因此对于用例<code>[2-&gt;4-&gt;3] + [5-&gt;6-&gt;4]</code>，实际就是竖式计算<code>342+465</code>,这里个位已经位于等价于索引 0 的位置。</li><li>除了大数模板的应用外，还要注意一些链表中的常用技巧，比如可以设置<code>dummy</code>虚拟头节点用于新链表的构建。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        ListNode* pre = dummy;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 || l2 || t) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l1) &#123;</span><br><span class="line">                t += l1-&gt;val;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2) &#123;</span><br><span class="line">                t += l2-&gt;val;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre-&gt;next = <span class="keyword">new</span> ListNode(t % <span class="number">10</span>);</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="LC445-Add-Two-Numbers-II"><a href="#LC445-Add-Two-Numbers-II" class="headerlink" title="LC445 Add Two Numbers II"></a>LC445 <a href="https://leetcode.com/problems/add-two-numbers-ii/" target="_blank" rel="noopener">Add Two Numbers II</a></h5><ul><li>注意题目描述<code>The most significant digit comes first</code></li><li>如果不考虑<code>Follow up</code>，这道题链表反转后就和上面那道思路差不多了</li><li>链表反转可以通过迭代或者递归两种方法实现，这里采用双指针的迭代写法</li><li>完成加法后链表相对最后结果还是逆序的，需要再次反转</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> head1 = reverse(l1);</span><br><span class="line">        <span class="keyword">auto</span> head2 = reverse(l2);</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">auto</span> p = dummy;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(head1 || head2 || t) &#123;</span><br><span class="line">            <span class="keyword">if</span>(head1) &#123;</span><br><span class="line">                t += head1-&gt;val;</span><br><span class="line">                head1 = head1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(head2) &#123;</span><br><span class="line">                t += head2-&gt;val;</span><br><span class="line">                head2 = head2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> ListNode(t % <span class="number">10</span>);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reverse(dummy-&gt;next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> cur = head;</span><br><span class="line">        ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">            <span class="keyword">auto</span> next = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="LC067-Add-Binary"><a href="#LC067-Add-Binary" class="headerlink" title="LC067 Add Binary"></a>LC067 <a href="https://leetcode.com/problems/add-binary/comments/" target="_blank" rel="noopener">Add Binary</a></h5><ul><li>二进制加法和十进制方法差不多，只是处理进位时改为<code>t % 2 和 t /= 2</code></li><li>通过<code>s[i] - &#39;0&#39;</code>将字符串中的字符依次转换为整形储存到动态数组里</li><li>类似于模板中的倒序输出，加法完成后需要反转答案数组<code>res</code></li><li>使用<code>i + &#39;0&#39;</code>将答案数组转为字符串并返回该字符串</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">addBinary</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = a.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.push_back(a[i] - <span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = b.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.push_back(b[i] - <span class="string">'0'</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size() || i &lt; B.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; A.size()) t += A[i];</span><br><span class="line">            <span class="keyword">if</span>(i &lt; B.size()) t += B[i];</span><br><span class="line">            res.push_back(t % <span class="number">2</span>);</span><br><span class="line">            t /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t) res.push_back(<span class="number">1</span>);</span><br><span class="line">        reverse(res.begin(), res.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>&amp; i:res) ans.push_back(i + <span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/12/15/HAA/cc.jpg&quot; style=&quot;margin: 0 auto&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高精度加法通过对数位分别储存运算，并维护一个用于处理进位的变量，从而在不造成溢出的前提下实现大数相加。&lt;/li&gt;
&lt;li&gt;Java 和 Python 中虽然不需要考虑大整数相加的溢出问题，但这种算法的思想很值得借鉴。&lt;/li&gt;
&lt;li&gt;这种思想在很多问题上都可以应用，这里选取 LC 的几道题目进行分析&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Algorithms" scheme="https://raptazure.github.io/categories/Algorithms/"/>
    
    
      <category term="LeetCode" scheme="https://raptazure.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>链表 - Linked List</title>
    <link href="https://raptazure.github.io/2019/11/25/LINEAR-LIST/"/>
    <id>https://raptazure.github.io/2019/11/25/LINEAR-LIST/</id>
    <published>2019-11-24T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.662Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/11/25/LINEAR-LIST/link.png" style="margin: 0 auto;"></p><ul><li>使用数组模拟可以提高效率，指针+结构体的实现方式每次创建一个新链表时都要<code>new Node();</code>，此操作很慢，容易超时，如果出于效率考虑，一般不采用这种动态链表的方式。可以通过直接初始化 n 个 Node 进行改进，但是那种方式本质就和数组模拟(静态链表)差不多。<a id="more"></a></li></ul><h3 id="单链表-amp-邻接表"><a href="#单链表-amp-邻接表" class="headerlink" title="单链表 &amp; 邻接表"></a>单链表 &amp; 邻接表</h3><ul><li><p>单链表最主要用途是写邻接表，邻接表其实是 n 个链表，最主要的应用是存储图和树，比如最短路问题，最小生成树，最大流问题都是邻接表存储。</p></li><li><p>结构：head -&gt; # -&gt; # -&gt; # -&gt; 0</p></li><li><p>需要定义：value - <code>e[N]</code>, *next -&gt; <code>ne[N]</code>, 通过下标进行关联</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="comment">// head 表示头节点下标</span></span><br><span class="line"><span class="comment">// e[i] 表示节点i的值</span></span><br><span class="line"><span class="comment">// ne[i] 表示节点i的next指针是多少</span></span><br><span class="line"><span class="comment">// idx 存储当前已经用到了哪个点</span></span><br><span class="line"><span class="keyword">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插到头节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_to_head</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    <span class="comment">// idx指向head原本指向的值</span></span><br><span class="line">    ne[idx] = head;</span><br><span class="line">    <span class="comment">// head指向idx</span></span><br><span class="line">    head = idx;</span><br><span class="line">    <span class="comment">// idx节点已被使用</span></span><br><span class="line">    idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插入到下标为k的点后面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = ne[k];</span><br><span class="line">    ne[k] = idx;</span><br><span class="line">    idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将下标为k的点后面的点删掉</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>AcWing 826：实现一个单链表，链表初始为空，支持三种操作：</p><p>(1) 向链表头插入一个数；</p><p>(2) 删除第 k 个插入的数后面的数；</p><p>(3) 在第 k 个插入的数后插入一个数</p><p>现在要对该链表进行 M 次操作，进行完所有操作后，从头到尾输出整个链表。</p><p><strong>注意</strong>:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 M，表示操作次数。</p><p>接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：</p><p>(1) “H x”，表示向链表头插入一个数 x。</p><p>(2) “D k”，表示删除第 k 个输入的数后面的数（当 k 为 0 时，表示删除头结点）。</p><p>(3) “I k x”，表示在第 k 个输入的数后面插入一个数 x（此操作中 k 均大于 0）。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，将整个链表从头到尾输出。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤M≤1000001≤M≤100000<br>所有操作保证合法。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">H 9</span><br><span class="line">I 1 1</span><br><span class="line">D 1</span><br><span class="line">D 0</span><br><span class="line">H 6</span><br><span class="line">I 3 6</span><br><span class="line">I 4 5</span><br><span class="line">I 4 5</span><br><span class="line">I 3 4</span><br><span class="line">D 6</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 4 6 5</span><br></pre></td></tr></table></figure><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_to_head</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x, ne[idx] = head, head = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x, ne[idx] = ne[k], ne[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察idx得第k个插入的数： 下标为k-1的节点</span></span><br><span class="line"><span class="comment">// 0号点是第一个插入的点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k, x;</span><br><span class="line">        <span class="keyword">char</span> op;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">'H'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            add_to_head(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">'D'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">            <span class="comment">// k=0时删除头节点</span></span><br><span class="line">            <span class="keyword">if</span>(!k) head = ne[head];</span><br><span class="line">            remove(k - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            add(k - <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><ul><li><p>主要用来优化某些问题</p></li><li><p>实现细节：</p><ul><li><p>不定义 head 和 tail，让下标 0 的点作为最左边的点 head，下标 1 的点为最右边的点 tail。</p></li><li><p>l[N]储存每个点左边的点，r[N]储存右边的点。</p></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 0表示左端点，1表示右端点</span></span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 0和1被占用了</span></span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在第k个点右边插入x</span></span><br><span class="line"><span class="comment">// add(l[k], x)可以在k的左边插入x</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    r[idx] = r[k];</span><br><span class="line">    l[idx] = k;</span><br><span class="line">    l[r[k]] = idx;</span><br><span class="line">    r[k] = idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第k个点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    r[l[k]] = r[k];</span><br><span class="line">    l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><ol><li>Acwing#28</li></ol><p>给定单向链表的一个节点指针，定义一个函数在 O(1)时间删除该结点。</p><p>假设链表一定存在，并且该节点一定不是尾节点。</p><ul><li>样例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：链表 1-&gt;4-&gt;6-&gt;8</span><br><span class="line">      删掉节点：第2个节点即6（头节点为第0个节点）</span><br><span class="line">输出：新链表 1-&gt;4-&gt;8</span><br></pre></td></tr></table></figure><ul><li>题解：<br>由于是单链表，不能找到前驱节点，所以不能按常规方法将该节点删除。可以将下一个节点的值复制到当前节点，然后将下一个节点删除即可。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode* node)</span> </span>&#123;</span><br><span class="line">        node-&gt;val = node-&gt;next-&gt;val;</span><br><span class="line">        node-&gt;next = node-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2.AcWing#36<br>输入两个递增排序的链表，合并这两个链表并使新链表中的结点仍然是按照递增排序的。</p><ul><li>样例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1-&gt;3-&gt;5 , 2-&gt;4-&gt;5</span><br><span class="line">输出：1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;5</span><br></pre></td></tr></table></figure><ul><li><p>题解：其实在考归并算法，可以用两个指针分别指向两个链表的头节点，把每次指向的两个结点中比较小的放在答案里。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">merge</span><span class="params">(ListNode* l1, ListNode* l2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建虚拟头节点</span></span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// cur指针记录当前链表尾节点</span></span><br><span class="line">        <span class="keyword">auto</span> cur = dummy;</span><br><span class="line">        <span class="comment">// 两个指针非空就一直遍历</span></span><br><span class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                cur-&gt;next = l1;</span><br><span class="line">                cur = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cur-&gt;next = l2;</span><br><span class="line">                cur=l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1) cur-&gt;next = l1;</span><br><span class="line">        <span class="keyword">else</span> cur-&gt;next = l2;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.AcWing#35</p></li></ul><p>定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。</p><ul><li>样例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出:5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><ul><li>题解：<br><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/RGIF2.gif" alt></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 记录前驱结点</span></span><br><span class="line">        ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">auto</span> cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> next = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>包含 IO：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代做法</span></span><br><span class="line"><span class="comment">// Iterative C++ program to reverse</span></span><br><span class="line"><span class="comment">// a linked list</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Link list node */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">    Node(<span class="keyword">int</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;data = data;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkedList</span> &#123;</span></span><br><span class="line">    Node* head;</span><br><span class="line">    LinkedList()</span><br><span class="line">    &#123;</span><br><span class="line">        head = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Function to reverse the linked list */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Initialize current, previous and</span></span><br><span class="line">        <span class="comment">// next pointers</span></span><br><span class="line">        Node* current = head;</span><br><span class="line">        Node *prev = <span class="literal">NULL</span>, *next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// Store next</span></span><br><span class="line">            next = current-&gt;next;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reverse current node's pointer</span></span><br><span class="line">            current-&gt;next = prev;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Move pointers one position ahead.</span></span><br><span class="line">            prev = current;</span><br><span class="line">            current = next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Function to print linked list */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">temp</span> = <span class="title">head</span>;</span></span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; temp-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node* temp = <span class="keyword">new</span> Node(data);</span><br><span class="line">        temp-&gt;next = head;</span><br><span class="line">        head = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Driver program to test above function*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* Start with the empty list */</span></span><br><span class="line">    LinkedList ll;</span><br><span class="line">    ll.push(<span class="number">20</span>);</span><br><span class="line">    ll.push(<span class="number">4</span>);</span><br><span class="line">    ll.push(<span class="number">15</span>);</span><br><span class="line">    ll.push(<span class="number">85</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Given linked list\n"</span>;</span><br><span class="line">    ll.print();</span><br><span class="line"></span><br><span class="line">    ll.reverse();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\nReversed Linked list \n"</span>;</span><br><span class="line">    ll.print();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="补充：线性表定义与操作-顺序表"><a href="#补充：线性表定义与操作-顺序表" class="headerlink" title="补充：线性表定义与操作-顺序表"></a>补充：线性表定义与操作-顺序表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    Position Last;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List L;</span><br><span class="line"></span><br><span class="line">    L = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">    L-&gt;Last = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查找 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1</span></span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">( List L, ElementType X )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( i &lt;= L-&gt;Last &amp;&amp; L-&gt;Data[i]!= X )</span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; L-&gt;Last )  <span class="keyword">return</span> ERROR; <span class="comment">/* 如果没找到，返回错误信息 */</span></span><br><span class="line">    <span class="keyword">else</span>  <span class="keyword">return</span> i;  <span class="comment">/* 找到后返回的是存储位置 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入 */</span></span><br><span class="line"><span class="comment">/*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">( List L, ElementType X, Position P )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 在L的指定位置P前插入一个新元素X */</span></span><br><span class="line">    Position i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( L-&gt;Last == MAXSIZE<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 表空间已满，不能插入 */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"表满"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( P&lt;<span class="number">0</span> || P&gt;L-&gt;Last+<span class="number">1</span> ) &#123; <span class="comment">/* 检查插入位置的合法性 */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"位置不合法"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>( i=L-&gt;Last; i&gt;=P; i-- )</span><br><span class="line">        L-&gt;Data[i+<span class="number">1</span>] = L-&gt;Data[i]; <span class="comment">/* 将位置P及以后的元素顺序向后移动 */</span></span><br><span class="line">    L-&gt;Data[P] = X;  <span class="comment">/* 新元素插入 */</span></span><br><span class="line">    L-&gt;Last++;       <span class="comment">/* Last仍指向最后元素 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line"><span class="comment">/*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Delete</span><span class="params">( List L, Position P )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 从L中删除指定位置P的元素 */</span></span><br><span class="line">    Position i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( P&lt;<span class="number">0</span> || P&gt;L-&gt;Last ) &#123; <span class="comment">/* 检查空表及删除位置的合法性 */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"位置%d不存在元素"</span>, P );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>( i=P+<span class="number">1</span>; i&lt;=L-&gt;Last; i++ )</span><br><span class="line">        L-&gt;Data[i<span class="number">-1</span>] = L-&gt;Data[i]; <span class="comment">/* 将位置P+1及以后的元素顺序向前移动 */</span></span><br><span class="line">    L-&gt;Last--; <span class="comment">/* Last仍指向最后元素 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充：线性表定义与操作-链式表"><a href="#补充：线性表定义与操作-链式表" class="headerlink" title="补充：线性表定义与操作-链式表"></a>补充：线性表定义与操作-链式表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">PtrToLNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToLNode Next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToLNode Position;</span><br><span class="line"><span class="keyword">typedef</span> PtrToLNode List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查找 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR NULL</span></span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">( List L, ElementType X )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position p = L; <span class="comment">/* p指向L的第1个结点 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( p &amp;&amp; p-&gt;Data!=X )</span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 下列语句可以用 return p; 替换 */</span></span><br><span class="line">    <span class="keyword">if</span> ( p )</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 带头结点的插入 */</span></span><br><span class="line"><span class="comment">/*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是链表结点指针，在P之前插入新结点 */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">( List L, ElementType X, Position P )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 这里默认L有头结点 */</span></span><br><span class="line">    Position tmp, pre;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查找P的前一个结点 */</span></span><br><span class="line">    <span class="keyword">for</span> ( pre=L; pre&amp;&amp;pre-&gt;Next!=P; pre=pre-&gt;Next ) ;</span><br><span class="line">    <span class="keyword">if</span> ( pre==<span class="literal">NULL</span> ) &#123; <span class="comment">/* P所指的结点不在L中 */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入位置参数错误\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">/* 找到了P的前一个结点pre */</span></span><br><span class="line">        <span class="comment">/* 在P前插入新结点 */</span></span><br><span class="line">        tmp = (Position)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode)); <span class="comment">/* 申请、填装结点 */</span></span><br><span class="line">        tmp-&gt;Data = X;</span><br><span class="line">        tmp-&gt;Next = P;</span><br><span class="line">        pre-&gt;Next = tmp;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 带头结点的删除 */</span></span><br><span class="line"><span class="comment">/*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是拟删除结点指针 */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Delete</span><span class="params">( List L, Position P )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 这里默认L有头结点 */</span></span><br><span class="line">    Position tmp, pre;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查找P的前一个结点 */</span></span><br><span class="line">    <span class="keyword">for</span> ( pre=L; pre&amp;&amp;pre-&gt;Next!=P; pre=pre-&gt;Next ) ;</span><br><span class="line">    <span class="keyword">if</span> ( pre==<span class="literal">NULL</span> || P==<span class="literal">NULL</span>) &#123; <span class="comment">/* P所指的结点不在L中 */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除位置参数错误\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">/* 找到了P的前一个结点pre */</span></span><br><span class="line">        <span class="comment">/* 将P位置的结点删除 */</span></span><br><span class="line">        pre-&gt;Next = P-&gt;Next;</span><br><span class="line">        <span class="built_in">free</span>(P);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/11/25/LINEAR-LIST/link.png&quot; style=&quot;margin: 0 auto;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用数组模拟可以提高效率，指针+结构体的实现方式每次创建一个新链表时都要&lt;code&gt;new Node();&lt;/code&gt;，此操作很慢，容易超时，如果出于效率考虑，一般不采用这种动态链表的方式。可以通过直接初始化 n 个 Node 进行改进，但是那种方式本质就和数组模拟(静态链表)差不多。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Data Structures" scheme="https://raptazure.github.io/categories/Data-Structures/"/>
    
    
  </entry>
  
  <entry>
    <title>Vim基本命令</title>
    <link href="https://raptazure.github.io/2019/11/12/Vim/"/>
    <id>https://raptazure.github.io/2019/11/12/Vim/</id>
    <published>2019-11-11T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.668Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/11/12/Vim/vim_main.png"><br>$\quad$主要介绍 Vim 的常用编辑命令以及 VSCode 使用 Vim key binding 的相关内容</p><a id="more"></a><h4 id="进入普通模式："><a href="#进入普通模式：" class="headerlink" title="进入普通模式："></a>进入普通模式：</h4><ul><li>VS Code Vim 修改键盘映射 Setting-&gt;Normal Mode Key Bindings ,添加：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   "vim.insertModeKeyBindings": [</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="attr">"before"</span>: [<span class="string">"j"</span>, <span class="string">"j"</span>],</span><br><span class="line"><span class="attr">"after"</span>: [<span class="string">"&lt;Esc&gt;"</span>]</span><br><span class="line"> &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><ul><li>实现按两次 j 键进入普通模式。</li></ul><h4 id="插入模式："><a href="#插入模式：" class="headerlink" title="插入模式："></a>插入模式：</h4><ul><li><p>i -insert</p></li><li><p>I - insert before line</p></li><li><p>a - append</p></li><li><p>A - append after line</p></li><li><p>o - open a line below</p></li><li><p>O - open a line above</p></li><li><p>u - undo</p></li><li><p>快速删除字符: 这几个快捷键也可用于 Linux 终端</p><p>crtl+h 删除上一个字符 ctrl+w 删除上一个单词 ctrl+u 删除当前行</p></li><li><p>在 normal 模式下使用<code>gi</code>快速跳转至最后一次编辑的位置并进入插入模式</p></li><li><p>Manjaro 里可以直接交换大写锁定与 ctrl</p></li></ul><h4 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h4><ul><li><p>:w 保存 :q 退出</p></li><li><p>:vs - vertical split :sp - split</p></li><li><p>:%s/foo/bar/g 全局替换</p></li></ul><h4 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式:"></a>可视模式:</h4><ul><li>快速选择文本 - hjkl 选择 S</li><li>V 进入 visual 模式并选择行 - 执行各种命令,比如 d - 删除 y - 复制</li><li>crtl+v 进入块状选择模式 - hjkl 选择</li></ul><h4 id="Vim-快速移动-Normal-Visual"><a href="#Vim-快速移动-Normal-Visual" class="headerlink" title="Vim 快速移动: Normal/Visual"></a>Vim 快速移动: Normal/Visual</h4><ul><li><p>h j(下) k(上) l</p></li><li><p>在单词间移动: w/W 移动到下一个 word/WORD 开头, e/E 下一个 word/WORD 末尾</p></li><li><p>b/B 回到上一个 word/WORD 开头, 可以理解为 backword</p><p>此处 word 指以非空白符分隔的单词, WORD 是以空白符分隔的词</p></li><li><p><strong>行间</strong>搜索移动：使用<code>f{char}</code>可以移动到字符 char 上，使用 t 移动到 char 的前一个字符。可以使用<code>;</code> / <code>,</code>继续搜该行下一个/上一个字符。<code>F{char}</code>表示反过来搜前面的字符。</p></li><li><p>非空白字符(可用 0 w 组合来替代)，<strong>$移动到行尾</strong>，g_移动到行尾非空白字符。</p></li><li><p>垂直移动：()在句子中移动，{}在段落之间移动。</p></li><li><p>页面移动：<code>gg</code> / <code>G</code>移动到文件开头/结尾，可用 ctrl+o 返回光标的上个位置。H/M/L 跳转到屏幕开头 Head，中间 Middle，结尾 Lower。crtl+u crtl+f 上下翻页 upward/forward。zz 把屏幕置为中间。</p></li></ul><h4 id="Vim-快速增删改查：Normal"><a href="#Vim-快速增删改查：Normal" class="headerlink" title="Vim 快速增删改查：Normal"></a>Vim 快速增删改查：Normal</h4><ul><li><p>增加：a/i/o A/I/O</p></li><li><p><code>:e!</code>重新加载当前文件</p></li><li><p>删除：<code>x</code>删除一个字符，使用<code>d</code>配合文本对象快速删除一个单词</p><p><code>daw</code> delete around word 删除单词及周围空格</p><p><code>diw</code> 删除单词但不删除周围空格</p><p><code>dd</code> 删除当前行</p><p><code>dt</code> delete to + 符号 比如<code>dt)</code>删除光标到右括号的所有内容（清空括号）</p><p><code>d$</code> 删除光标到行尾的内容</p><p><code>d0</code> 删除光标到行首的内容</p><p><code>d</code>和<code>x</code>可搭配数字实现多次执行，比如<code>4x</code>删除四个字符，<code>2dd</code>删除两行</p></li><li><p>修改：<code>r</code> - replace 替换一个字符，比如<code>ra</code>将当前字符改为 a</p><p><code>R</code> - 进入 Replace 模式，可以连续替换，Esc 退回 Normal 模式</p><p><code>c</code> - change 配合文本对象进行快速修改 （结合 d 的操作组合）</p><p><code>caw</code> <code>cw</code> 删除单词并进入插入模式 <code>C</code>删除整行并进入插入模式</p><p><code>ct&quot;</code> 删除光标到后引号中的内容并进入插入模式</p><p><code>s</code> - substitute 替换并进入插入模式 <code>4s</code>删除四个字符并进入插入模式</p><p><code>S</code> - 删除整行并进入插入模式</p></li><li><p>查询：<code>/</code> 或 <code>？</code> 进行前向或反向搜索，<code>n</code>或<code>N</code>跳转到下一个或上一个匹配。</p><p><code>*</code>或者<code>#</code>进行当前光标所处单词的前向和后向匹配。</p></li></ul><h4 id="Vim-搜索替换："><a href="#Vim-搜索替换：" class="headerlink" title="Vim 搜索替换："></a>Vim 搜索替换：</h4><ul><li><p>substitute 命令允许查找并替换文本，支持正则表达式。</p><p><code>:[range]s[ubstitute]/{pattern}/{string}/[flags]</code></p><p>range 10,20 表示 10 ～ 20 行，%表示全部</p><p>pattern 要替换的模式，string 是替换后的文本</p><p>flags 替换标志位 g - global，c - confirm</p><p>​ n - 报告匹配到的次数而不替换，可用来查询匹配次数</p><p>比如<code>:%s/self/this/g</code> <code>:1,6s/self/this/g</code> <code>:1,6s/self//n</code></p><p><code>:%s/\&lt;quack\&gt;jiao/g</code> 使用正则精确替换一个单词</p></li></ul><h4 id="多文件操作："><a href="#多文件操作：" class="headerlink" title="多文件操作："></a>多文件操作：</h4><ul><li><p>Buffer：打开的一个文件的内存缓冲区，Vim 打开一个文件会加载文件到缓冲区，之后的修改都是针对内存中的缓冲区，并不会直接保存到文件，执行:w 后才会把修改内容写入文件。使用<code>:ls</code>列举当前缓冲区，使用<code>:b</code>跳到第 n 个缓冲区。<code>bnext</code> 跳转到下一个缓冲区，<code>bpre</code> 跳转到上一个缓冲区，<code>:b buffer_name</code>使用 tab 补全进行跳转。</p></li><li><p>Window：Buffer 的可视化分割区域。一个缓冲区可以分成多个缓冲区，每个窗口可以打开不同缓存区。<code>Crtl+w w</code>在窗口间循环切换。<code>:q</code> 可以关闭窗口，<code>crtl+w =</code>使所有窗口等宽等高。</p></li><li><p>Tab：组织窗口为一个工作区。Tab 是可以容纳一系列窗口的容器，Vim 的 tab 可以看成 Linux 虚拟桌面。<code>:tabe {filename}</code> 在新标签中打开 filename <code>：tabnew duck.py</code>打开一个编辑 python 文件的 Tab(工作区)。</p></li></ul><h4 id="Text-Object"><a href="#Text-Object" class="headerlink" title="Text Object:"></a>Text Object:</h4><ul><li><p>Vim 里文本也有对象的概念，比如一个单词，一段句子，一个段落。通过修改文本对象比修改单个字符高效。</p></li><li><p>使用文本对象：<code>dw</code>删除一个单词 <code>[number]&lt;command&gt;[text object]</code></p><p>number 次数，command - d(delete) c(change) y(yank)</p><p>text object - w(word) s(sentence) p(paragragh)</p><p><img src="/2019/11/12/Vim/Screenshot_20191027_093305.png"></p></li></ul><p><img src="/2019/11/12/Vim/Screenshot_20191027_094013.png" style="zoom: 67%;"></p><h4 id="复制粘贴与寄存器使用："><a href="#复制粘贴与寄存器使用：" class="headerlink" title="复制粘贴与寄存器使用："></a>复制粘贴与寄存器使用：</h4><ul><li><p>Vim Normal 模式复制粘贴：</p><ul><li>复制粘贴分别使用 y - yank 和 p - put，剪贴 d 和 p。</li><li>可以使用 v(visual)选择需要复制的地方，然后用 p 粘贴。</li><li>配合文本对象：比如使用 yiw 复制一个单词，yy 复制一行。</li></ul></li><li><p>Vim Insert 模式复制粘贴：</p><ul><li>在vimrc中设置autoindent会使Python代码缩进错乱，这时需要用<code>:set paste</code> <code>:set nopaste</code> 解决。</li><li>Insert下使用ctrl+v或cmd+v粘贴即可。</li></ul></li><li><p>Vim 的寄存器：</p><ul><li><p>Vim 操作的是寄存器而不是系统剪贴板</p></li><li><p>默认使用 d 删除或 y 复制的内容放到“无名寄存器”</p></li><li><p>用 x 删除一个字符放到无名寄存器，然后 p 粘贴，可调换两个字符</p></li><li><p>深入寄存器：Vim 不使用单一剪切版进行剪切，复制与粘贴，而是多组寄存器。通过<code>“{register}</code>前缀可以指定寄存器，不指定则默认使用无名寄存器。比如使用<code>“ayiw</code>复制一个单词到寄存器 a 中，<code>“bdd</code>删除当前行到寄存器 b 中。可使用<code>:reg a</code>查看 a 寄存器中的内容，<code>“ap</code>粘贴 a 寄存器中的内容。Vim 中<code>“”</code>表示无名寄存器，缺省使用，<code>“” p</code>等同于 p。</p></li><li><p>除了有名寄存器 a-z，还有其他常见寄存器，比如复制专用寄存器<code>“0</code>使用 y 复制文本同时会被拷贝到复制寄存器 0，在复制前加上<code>“+</code>表示复制到系统剪贴板，也可使用<code>:set clipboard=unnamed</code>直接启用系统剪贴板。还有一些寄存器比如“% 当前文件名 “. 上次插入的文本</p></li></ul></li><li><p>以上很多内容可在 VS Code Vim - setting 里进行设置而使操作便利。</p></li></ul><h4 id="Vim-Macro："><a href="#Vim-Macro：" class="headerlink" title="Vim Macro："></a>Vim Macro：</h4><ul><li>给多行 url 链接加上双引号 - 使用宏</li><li>宏可以看成一系列命令的集合，可以使用宏录制一系列操作，然后再回放，从而快速把一系列命令用在多行文本上</li><li>Normal 下使用 q 录制/结束录制，使用<code>q{register}</code>选择要保存的寄存器，把录制的命令保存到其中，比如<code>qa</code>。</li><li>使用<code>@register</code>回放寄存器中保存的一系列命令</li><li>可在操作结尾录制下一行操作，使用<code>number@a</code>实现多行批量操作</li></ul><h4 id="其他的话："><a href="#其他的话：" class="headerlink" title="其他的话："></a>其他的话：</h4><p>​ 一些 Vim 命令本文没有提到(因为有的在 VS Code Vim 下不支持，而窝主要是想用这个扩展让 VS Code 更高效…)，其实 Vim 还有自定义度极高的配置文件和很多强大的插件，可以自由探索，试试 NeoVim 也是很不错的。</p><h4 id="图解-Vim-命令："><a href="#图解-Vim-命令：" class="headerlink" title="图解 Vim 命令："></a>图解 Vim 命令：</h4><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/classic1.gif" alt></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-tutorial-1.gif" alt></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-tutorial-2.gif" alt></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-tutorial-3.gif" alt></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-tutorial-4.gif" alt></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-tutorial-5.gif" alt></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-tutorial-6.gif" alt></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-tutorial-7.gif" alt></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/entry1.png" alt></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/advanced1.png" alt></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/morden1.png" alt></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/text1.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/11/12/Vim/vim_main.png&quot;&gt;&lt;br&gt;$\quad$主要介绍 Vim 的常用编辑命令以及 VSCode 使用 Vim key binding 的相关内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://raptazure.github.io/categories/Tools/"/>
    
    
      <category term="linux" scheme="https://raptazure.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro-i3</title>
    <link href="https://raptazure.github.io/2019/11/10/manjaro-i3/"/>
    <id>https://raptazure.github.io/2019/11/10/manjaro-i3/</id>
    <published>2019-11-10T14:06:23.000Z</published>
    <updated>2020-05-13T00:55:35.673Z</updated>
    
    <content type="html"><![CDATA[<p>  <img src="/2019/11/10/manjaro-i3/Screenshot_20191110_223819.jpg" style="margin: 0 auto;"></p><p>&#160;&#160;&#160;&#160;&#160;&#160;用 manjaro KDE 也有一段时间了，在感受 Plasma 各种便捷美观的同时，也在不断探索更轻量高效的桌面环境，直到在 TheCW 的视频里发现了 i3wm ～</p><p>&#160;&#160;&#160;&#160;&#160;&#160;面对可以变得超漂亮又可以提高效率的 i3，怎么能不去尝试一下呢？</p><a id="more"></a><h2 id="Some-Softwares："><a href="#Some-Softwares：" class="headerlink" title="Some Softwares："></a>Some Softwares：</h2><ul><li><p><code>fish</code> - A smart and user-friendly command shell for Linux.</p></li><li><p><code>oh-my-fish</code> - A fishshell framework that allows you to install packages which extend or modify the look and feel of your shell.</p></li><li><p><code>alacritty</code> - A free open-source, fast, cross-platform terminal emulator, that uses GPU (Graphics Processing Unit) for rendering. Alacritty is focused on two goals simplicity and performance.</p></li><li><p><code>ranger</code> - A lightweight and powerful file manager that works in a terminal window and it comes with vi/vim key bindings!</p></li><li><p><code>albert</code> - Access everything with virtually zero effort. Run applications, open files or their paths, open bookmarks in your browser, search the web, calculate things and a lot more … It is a desktop agnostic launcher and its goals are usability and beauty.</p></li><li><p><code>dmenu</code> - A fast and lightweight dynamic menu for X. It reads arbitrary text from stdin, and creates a menu with one item for each line. The user can then select an item, through the arrow keys or typing a part of the name, and the line is printed to stdout.</p><p>默认 i3 设置里应该是<code>bindsym $mod+d exec dmenu_run</code></p></li><li><p><code>variety</code> - A wallpaper manager for Linux systems. It supports numerous desktops and wallpaper sources, including local files and online services: Flickr, Wallhaven, Unsplash, and more.</p></li><li><p><code>polybar</code> - A fast and easy-to-use tool for creating status bars. Polybar aims to help users build beautiful and highly customizable status bars.</p></li><li><p><code>compton</code> - A compositor for X.</p><p>可以配合 alacritty 实现终端模拟器的半透明化，也可以使用这个版本 (<a href="https://github.com/Raptazure/compton" target="_blank" rel="noopener">https://github.com/Raptazure/compton</a>) 并通过编写配置文件来实现所有窗口的毛玻璃效果～配置也可以通过<code>compton-conf</code>完成。</p></li><li><p><code>neo-vim</code> - 打造属于你的超级文本编辑器～</p></li></ul><h2 id="一些常用软件的说明："><a href="#一些常用软件的说明：" class="headerlink" title="一些常用软件的说明："></a>一些常用软件的说明：</h2><ul><li><p>TIM - <code>pacman -S deepin.com.qq.office</code></p><p>​ 安装<code>gnome-settings-daemon</code></p><p>​ 后台运行 <code>nohup /usr/lib/gsd-xsettings &gt; /dev/null 2&gt;&amp;1 &amp;</code></p><p>​ 切换到对应目录 <code>cd /opt/deepinwine/apps/Deepin-TIM</code></p><p>​ 运行 <code>./run.sh</code></p></li><li><p>似乎只有 wine qq 稍微需要调整启动方式，其他软件比如网易云音乐，rime 输入法等都可以直接使用～</p></li><li><p>因为我是在 Manjaro KDE 基础上安装的 i3，原有系统软件也可以很方便地用起来，比如可以通过<code>albert</code>打开<code>KDE System Settings</code>进行一些系统配置，也可以很方便地打开 dolphin ～(虽然已经有 ranger 了…)</p></li><li><p>大概就是这样～以前怎么用现在照样就行～</p></li></ul><h2 id="关于配置文件："><a href="#关于配置文件：" class="headerlink" title="关于配置文件："></a>关于配置文件：</h2><ul><li><p>上面提到的软件 GitHub 都可以找到官方文档，具体可以自己慢慢看～</p></li><li><p>我的配置文件：<a href="https://github.com/Raptazure/.config" target="_blank" rel="noopener">https://github.com/Raptazure/.config</a></p></li></ul><h2 id="结束的话："><a href="#结束的话：" class="headerlink" title="结束的话："></a>结束的话：</h2><p>manjaro+i3 真的把简约高效美观炫酷做到了很好的平衡，总之超爱啦～希望更多的人可以用上并喜欢上 Manjaro Linux + i3 吧～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  &lt;img src=&quot;/2019/11/10/manjaro-i3/Screenshot_20191110_223819.jpg&quot; style=&quot;margin: 0 auto;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;用 manjaro KDE 也有一段时间了，在感受 Plasma 各种便捷美观的同时，也在不断探索更轻量高效的桌面环境，直到在 TheCW 的视频里发现了 i3wm ～&lt;/p&gt;
&lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;面对可以变得超漂亮又可以提高效率的 i3，怎么能不去尝试一下呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://raptazure.github.io/categories/Tools/"/>
    
    
      <category term="linux" scheme="https://raptazure.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python Exception</title>
    <link href="https://raptazure.github.io/2019/11/09/Python-Basics06/"/>
    <id>https://raptazure.github.io/2019/11/09/Python-Basics06/</id>
    <published>2019-11-08T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li><p>异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。一般情况下，在Python无法正常处理程序时就会发生一个异常。当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。</p><a id="more"></a></li><li><p>Python中引入了很多用来描述和处理异常的类，称为异常类。异常类定义中包含了该类异常的信息和对异常进行处理的方法。内建异常类的继承层次：比如<code>BaseException -&gt; Exception -&gt; NameError, ValueError, AttributeError etc.</code></p></li><li><p>Python中一切皆对象，异常也采用对象的方式进行处理：</p><ul><li>抛出异常：在执行一个方法时，如果发生异常，则这个方法生成代表该异常的一个对象，停止当前执行路径，并把异常对象提交给解释器。</li><li>捕获异常：解释器得到该异常后，寻找相应代码来处理该异常。</li></ul></li><li><p>Python提供了异常处理和断言(Assertions)两个非常重要的功能来处理程序在运行中出现的异常和错误。</p><p>| 异常名称                  | 描述                                               |<br>| :———————————— | :————————————————————————- |<br>| BaseException             | 所有异常的基类                                     |<br>| SystemExit                | 解释器请求退出                                     |<br>| KeyboardInterrupt         | 用户中断执行(通常是输入^C)                         |<br>| Exception                 | 常规错误的基类                                     |<br>| StopIteration             | 迭代器没有更多的值                                 |<br>| GeneratorExit             | 生成器(generator)发生异常来通知退出                |<br>| StandardError             | 所有的内建标准异常的基类                           |<br>| ArithmeticError           | 所有数值计算错误的基类                             |<br>| FloatingPointError        | 浮点计算错误                                       |<br>| OverflowError             | 数值运算超出最大限制                               |<br>| ZeroDivisionError         | 除(或取模)零 (所有数据类型)                        |<br>| AssertionError            | 断言语句失败                                       |<br>| AttributeError            | 对象没有这个属性                                   |<br>| EOFError                  | 没有内建输入,到达EOF 标记                          |<br>| EnvironmentError          | 操作系统错误的基类                                 |<br>| IOError                   | 输入/输出操作失败                                  |<br>| OSError                   | 操作系统错误                                       |<br>| WindowsError              | 系统调用失败                                       |<br>| ImportError               | 导入模块/对象失败                                  |<br>| LookupError               | 无效数据查询的基类                                 |<br>| IndexError                | 序列中没有此索引(index)                            |<br>| KeyError                  | 映射中没有这个键                                   |<br>| MemoryError               | 内存溢出错误(对于Python 解释器不是致命的)          |<br>| NameError                 | 未声明/初始化对象 (没有属性)                       |<br>| UnboundLocalError         | 访问未初始化的本地变量                             |<br>| ReferenceError            | 弱引用(Weak reference)试图访问已经垃圾回收了的对象 |<br>| RuntimeError              | 一般的运行时错误                                   |<br>| NotImplementedError       | 尚未实现的方法                                     |<br>| SyntaxError               | Python 语法错误                                    |<br>| IndentationError          | 缩进错误                                           |<br>| TabError                  | Tab 和空格混用                                     |<br>| SystemError               | 一般的解释器系统错误                               |<br>| TypeError                 | 对类型无效的操作                                   |<br>| ValueError                | 传入无效的参数                                     |<br>| UnicodeError              | Unicode 相关的错误                                 |<br>| UnicodeDecodeError        | Unicode 解码时的错误                               |<br>| UnicodeEncodeError        | Unicode 编码时错误                                 |<br>| UnicodeTranslateError     | Unicode 转换时错误                                 |<br>| Warning                   | 警告的基类                                         |<br>| DeprecationWarning        | 关于被弃用的特征的警告                             |<br>| FutureWarning             | 关于构造将来语义会有改变的警告                     |<br>| OverflowWarning           | 旧的关于自动提升为长整型(long)的警告               |<br>| PendingDeprecationWarning | 关于特性将会被废弃的警告                           |<br>| RuntimeWarning            | 可疑的运行时行为(runtime behavior)的警告           |<br>| SyntaxWarning             | 可疑的语法的警告                                   |<br>| UserWarning               | 用户代码生成的警告                                 |</p></li></ul><h2 id="try…except"><a href="#try…except" class="headerlink" title="try…except"></a>try…except</h2><ul><li><p>结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;被监控的可能引发异常的语句块&gt;        </span><br><span class="line"><span class="keyword">except</span> BaseException [<span class="keyword">as</span> e]:</span><br><span class="line">&lt;异常处理语句块&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>遇到异常的执行顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"step01"</span>)</span><br><span class="line">    a = <span class="number">3</span> / <span class="number">0</span></span><br><span class="line">    print(<span class="string">"step02"</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"step03"</span>)</span><br><span class="line">    print(e)</span><br><span class="line">    print(type(e))</span><br><span class="line">print(<span class="string">"step04"</span>)</span><br><span class="line"><span class="comment"># 跳过try块中异常以后的代码</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">step01</span></span><br><span class="line"><span class="string">step03</span></span><br><span class="line"><span class="string">division by zero</span></span><br><span class="line"><span class="string">&lt;class 'ZeroDivisionError'&gt;</span></span><br><span class="line"><span class="string">step04</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li><li><p>应用：循环输入数字，如果不是数字则处理异常，如果输入88则结束循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = int(input(<span class="string">"please input a number: "</span>))</span><br><span class="line">        print(<span class="string">"last input:"</span>, x)</span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">88</span>:</span><br><span class="line">            print(<span class="string">"exit the loop"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        print(<span class="string">"Input error!"</span>)</span><br><span class="line">print(<span class="string">"exit!!!"</span>)</span><br></pre></td></tr></table></figure></li><li><p>try…多个except结构：从经典理论考虑，建议尽量捕获可能出现的多个异常(按照先子类后父类的顺序)，并且针对性地写出异常处理代码，为了避免遗漏可能出现的异常，可以在最后增加BaseException。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;被监控的可能引发异常的语句块&gt;   </span><br><span class="line"><span class="keyword">except</span> Exception1:</span><br><span class="line">&lt;处理Exception1的语句块&gt;</span><br><span class="line"><span class="keyword">except</span> Exception2:</span><br><span class="line">&lt;处理Exception2的语句块&gt;</span><br><span class="line"><span class="keyword">except</span> BaseException:</span><br><span class="line">&lt;处理可能遗漏的异常的语句块&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>测试<code>try…多个except</code>结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = input(<span class="string">"please input a dividend:"</span>)</span><br><span class="line">    b = input(<span class="string">"please input a divisor:"</span>)</span><br><span class="line">    c = float(a) / float(b)</span><br><span class="line">    print(c)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"can not divide by zero!"</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"can not cast!"</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">"Variable does not exist!"</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure></li><li><p>try…except…else结构：如果try块没有抛出异常则执行else块，如果抛出异常则执行except块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = input(<span class="string">"please enter the dividend:"</span>)</span><br><span class="line">    b = input(<span class="string">"please enter the divisor:"</span>)</span><br><span class="line">    c = float(a) / float(b)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"the result is:"</span>, c)</span><br></pre></td></tr></table></figure></li><li><p>try…except…finally结构：finally块都会被执行，通常用来释放try块中申请的资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = input(<span class="string">"please enter the dividend:"</span>)</span><br><span class="line">    b = input(<span class="string">"please enter the divisor:"</span>)</span><br><span class="line">    c = float(a) / float(b)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"the result is:"</span>, c)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"I am always here!!"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"the end."</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">"~/manjaro.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">    content = f.readline()</span><br><span class="line">    print(content)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"Not found!"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">print(<span class="string">"the end."</span>)</span><br></pre></td></tr></table></figure></li><li><p>一般不把return语句放在异常处理结构中，而是放到方法最后。</p></li></ul><h2 id="with上下文管理"><a href="#with上下文管理" class="headerlink" title="with上下文管理"></a>with上下文管理</h2><p>​        除了使用finally释放资源外，还可以通过with进行上下文管理，更方便实现释放资源的操作。结构为<code>with context_expr [as var]</code>。with上下文管理可以自动管理资源，在with代码执行完毕后自动还原进入该代码之前的现场或上下文。不管何种原因跳出with，不论是否有异常，总能保证资源正常释放，极大地简化了工作，在文件操作，网络通信相关的场合很有用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"d:/manjaro.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.readline()</span><br><span class="line">    print(content)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"the end."</span>)</span><br></pre></td></tr></table></figure><h2 id="Traceback"><a href="#Traceback" class="headerlink" title="Traceback"></a>Traceback</h2><ul><li><p>使用traceback模块打印异常信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"step01"</span>)</span><br><span class="line">    num = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    traceback.print_exc()</span><br></pre></td></tr></table></figure></li><li><p>使用traceback将异常信息写入日志文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"step01"</span>)</span><br><span class="line">    num = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"d:/a.txt"</span>, <span class="string">"a"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        traceback.print_exc(file = f)</span><br></pre></td></tr></table></figure></li></ul><h2 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h2><ul><li><p>自定义异常类一般都是运行时异常，通常继承Exception或其子类，命名一般以Error，Exception为后缀。自定义异常由raise语句主动跳出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgeError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, errorInfo)</span>:</span></span><br><span class="line">        Exception.__init__(self)</span><br><span class="line">        self.errorInfo = errorInfo</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.errorInfo) + <span class="string">" age should be between 0 and 200!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 如果为True则模块作为独立文件运行，可以执行测试代码</span></span><br><span class="line">    age = int(input(<span class="string">"please enter your age:"</span>))</span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="number">0</span> <span class="keyword">or</span> age &gt; <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">raise</span> AgeError(age)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"normal age!"</span>, age)</span><br></pre></td></tr></table></figure></li></ul><h2 id="断点调试相关"><a href="#断点调试相关" class="headerlink" title="断点调试相关"></a>断点调试相关</h2><ul><li>浏览帧中，调试器列出断点处当前线程正在运行的方法，每个方法对应一个“栈帧”，最上面的是当前断点所处的方法。变量值观察区中，调试器列出了断点处所在方法相关的变量值，可以用来查看变量值的变化。</li><li>单步调试：<ul><li>step over：遇到函数跳过，若当前执行的是一个函数，则把函数当作整体一步执行完，不会进入内部。</li><li>step into： 遇到函数进入，若当前执行的是一个函数，则会进入这个函数内部。</li><li>step out： 跳出函数，当单步执行到子函数内部时，用step out可以执行完子函数剩余部分并返回到上一层函数。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。一般情况下，在Python无法正常处理程序时就会发生一个异常。当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://raptazure.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python OOP</title>
    <link href="https://raptazure.github.io/2019/11/08/Python-Basics05/"/>
    <id>https://raptazure.github.io/2019/11/08/Python-Basics05/</id>
    <published>2019-11-07T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​        面向对象编程将数据和操作数据相关方法封装到对象中，组织代码和数据的方式更加接近人的思维，从而大大提高编程效率。更加关注软件中对象中的关系，是一种设计者思维，适合编写大规模程序。面向对象离不开面向过程，二者相辅相成，宏观使用面向对象把握，微观处理仍是面向过程。遇到复杂问题，面向对象先从问题中找名词(面向过程更多的是找动词)，确定这些名词哪些可以作为类，再根据问题需求确定类的属性和方法，确定类之间的关系。</p><a id="more"></a><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>​        将不同类型的数据，方法(函数)放在一起 -&gt; 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span> <span class="comment"># 类名一般首字母大写，采用驼峰规则</span></span><br><span class="line">    compony = <span class="string">"233"</span>    <span class="comment"># 类属性</span></span><br><span class="line">    count = <span class="number">0</span>          <span class="comment"># 类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span> <span class="comment">#self必须位于第一个参数 </span></span><br><span class="line">        self.name = name      <span class="comment"># 实例属性</span></span><br><span class="line">        self.score = score</span><br><span class="line">        Student.count = Student.count + <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_score</span><span class="params">(self)</span>:</span>      <span class="comment"># 实例方法</span></span><br><span class="line">        print(<span class="string">"my compony is 233"</span>)</span><br></pre></td></tr></table></figure><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><ul><li><p>通过类定义数据类型的属性(变量)和方法(行为)，类将行为和状态打包在一起。从一个类创建对象时，每个对象会共享这个类的行为(类中定义的方法)，但会有自己的属性(不共享状态)，更具体一些：“方法代码共享，属性数据不共享”。</p></li><li><p>Python中一切皆对象，类也叫做类对象，类的实例也叫做实例对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span> <span class="comment"># 类名一般首字母大写，采用驼峰规则</span></span><br><span class="line">    compony = <span class="string">"233"</span>    <span class="comment"># 类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span>  <span class="comment"># self必须位于第一个参数 </span></span><br><span class="line">        self.name = name      <span class="comment"># 实例属性</span></span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_score</span><span class="params">(self)</span>:</span>      <span class="comment"># 实例方法</span></span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;self.name&#125;</span>'s score is <span class="subst">&#123;self.score&#125;</span>."</span>)</span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">"rapt"</span>, <span class="number">18</span>) <span class="comment"># 通过类名()调用构造函数</span></span><br><span class="line">s1.say_score()  <span class="comment">#s1是实例对象，自动调用__init()__方法</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="构造函数-init"><a href="#构造函数-init" class="headerlink" title="构造函数__init__()"></a>构造函数<code>__init__()</code></h2><ul><li><p>类是抽象的，也称为“对象的模板”，通过类这个模板创建类的实例对象，然后才能使用类定义的功能。</p></li><li><p>Python对象包含如下部分：id，type，value (attribute, method)</p></li><li><p>创建对象需要定义构造函数<code>__init__()</code>方法，构造方法用于执行“实例对象的初始化工作”，即对象创建后，初始化当前对象的相关属性，无返回值。</p></li><li><p><code>__inti__</code>名称固定，第一个参数必须为<code>self</code>，self就是指刚创建好的实例对象。构造函数通常用来初始化实例对象的实例属性。</p></li><li><p>通过“类名(参数列表)”来调用构造函数，将创建好的对象返回给相应的变量。比如<code>s1 = Student(‘rapt’, 18)</code></p></li><li><p><code>__init__()</code>方法：初始化创建好的对象(给实例属性赋值)</p><p><code>__new()__</code>方法：用于创建对象，但一般无需重定义该方法</p></li><li><p>Python中的self相当于C++中的self指针，Java和C#中的this关键字，Python中self必须为构造函数的第一个参数，名字可以任意修改。但一般遵守惯例，都叫做self。</p></li></ul><h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><ul><li>从属于实例对象的属性，也称为“实例变量”</li><li>一般在<code>__init__()</code>方法中通过<code>self.实例属性名 = 初始值</code>定义</li><li>在本类的其他实例方法中，也是通过self进行访问 <code>self.实例属性名</code></li><li>创建实例对象后，通过实例对象访问：<ul><li><code>obj01 = 类名()</code>  创建对象，调用<code>__init__()</code>初始化属性</li><li><code>obj01.实例属性名 = 值</code> 给已有属性赋值，也可以新加属性</li></ul></li></ul><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><ul><li><p>从属于对象的方法，定义格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 方法名<span class="params">(self, [形参列表])</span>:</span></span><br><span class="line">    函数体</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">方法的调用格式如下：</span></span><br><span class="line"><span class="string">对象：方法名([实参列表])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li><li><p>定义实例方法时，第一个参数必须为self(指当前的实例对象)</p></li><li><p>调用实例方法时，self由解释器自动传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例对象的方法调用本质：</span></span><br><span class="line">a = Student()</span><br><span class="line">a.say_score()</span><br><span class="line"><span class="comment"># 解释器翻译为 -&gt; Stduent.say_score(a)</span></span><br></pre></td></tr></table></figure></li><li><p>其他操作：</p><ul><li><code>dir(obj)</code> 获得对象的所有属性，方法</li><li><code>obj.__dict__()</code> 对象(定义)的属性字典</li><li><code>pass</code> 空语句</li><li><code>isinstance(对象, 类型)</code> 判断‘对象’是不是‘指定类型’</li></ul></li></ul><h2 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h2><ul><li><p>解释器执行class语句时就会创建一个类对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(type(Student))</span><br><span class="line">print(id(Student))</span><br><span class="line">Stu2 = Student</span><br><span class="line">s1 = Stu2()</span><br><span class="line">print(s1)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;class 'type'&gt;</span></span><br><span class="line"><span class="string">94630656980368</span></span><br><span class="line"><span class="string">&lt;__main__.Student object at 0x7f25bddc1ad0&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类属性和类方法"><a href="#类属性和类方法" class="headerlink" title="类属性和类方法"></a>类属性和类方法</h2><ul><li><p>类属性是从属于“类对象”的属性，可以被所有实例对象共享</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    company = <span class="string">'microsoft'</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">        Student.count += <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"my company is:"</span>, Student.company)</span><br><span class="line">        print(self.name, <span class="string">"score is"</span>, self.score)</span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">"rapt"</span>, <span class="number">100</span>)</span><br><span class="line">s1.say_score()</span><br><span class="line"></span><br><span class="line">s2 = Student(<span class="string">"r"</span>, <span class="number">99</span>)</span><br><span class="line">s2.say_score()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"created &#123;0&#125; objects in total"</span>.format(Student.count))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">my company is: microsoft</span></span><br><span class="line"><span class="string">rapt score is 100</span></span><br><span class="line"><span class="string">my company is: microsoft</span></span><br><span class="line"><span class="string">r score is 99</span></span><br><span class="line"><span class="string">created 2 objects in total</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>类方法是从属于“类对象”的方法，通过装饰器<code>@classmethod</code>来定义</p><ul><li><p>定义时装饰器必须位于方法上面一行</p></li><li><p>要在第一个位置写上cls (cls指“类对象”本身)</p></li><li><p>类方法中访问实例属性会导致错误 -&gt; 还不能调self</p></li><li><p>子类继承父类方法时，传入cls是子类对象，而非父类对象</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    company = <span class="string">'radhat'</span>  <span class="comment"># 类属性</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printCompany</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(cls.company)</span><br><span class="line"></span><br><span class="line">Student.printCompany()</span><br></pre></td></tr></table></figure><ul><li><p>静态方法：Python中允许定义与”类对象“无关的方法，称为静态方法</p><ul><li><p>静态方法和在模块中定义普通函数没有区别，只是静态方法放到了类的命名空间里面，需要通过类调用。</p></li><li><p>通过装饰器<code>@staticmethod</code>定义</p></li><li><p>静态方法中访问实例属性和实例方法会导致错误</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    company = <span class="string">'radhat'</span>  <span class="comment"># 类属性</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;a&#125;</span> + <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a + b&#125;</span>"</span>)</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">Student.add(<span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="析构函数和垃圾回收机制"><a href="#析构函数和垃圾回收机制" class="headerlink" title="析构函数和垃圾回收机制"></a>析构函数和垃圾回收机制</h2><ul><li><p><code>__del__()</code>称为析构方法，用于实现对象被销毁时所需的操作，比如：释放对象占用的资源，例如：打开的文件资源，网络连接等。</p></li><li><p>Python实现自动的垃圾回收，当对象没有被引用时(引用计数为0)，由垃圾回收器调用<code>__del__()</code>方法。</p></li><li><p>也可以通过del语句删除对象，从而调用<code>__del__()</code>方法。</p></li><li><p>系统会自动提供<code>__del__()</code>方法，一般不需要自定义析构方法。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"delete object: &#123;0&#125;"</span>.format(self))</span><br><span class="line"></span><br><span class="line">p1 = Person()</span><br><span class="line">p2 = Person()</span><br><span class="line"><span class="keyword">del</span> p2</span><br><span class="line">print(<span class="string">"the end"</span>)</span><br><span class="line"><span class="comment"># 之后销毁p1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">delete object: &lt;__main__.Person object at 0x7f781ef1d990&gt;</span></span><br><span class="line"><span class="string">the end</span></span><br><span class="line"><span class="string">delete object: &lt;__main__.Person object at 0x7f781ef1d910&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="call-与可调用对象"><a href="#call-与可调用对象" class="headerlink" title="__call__与可调用对象"></a><code>__call__</code>与可调用对象</h2><ul><li><p>定义了<code>__call__</code>方法的对象，称为可调用对象，即该对象可以像函数一样被调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalaryAccount</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, salary)</span>:</span></span><br><span class="line">        print(<span class="string">"calculating salary..."</span>)</span><br><span class="line">        yearSalary = salary * <span class="number">12</span></span><br><span class="line">        daySalary = salary // <span class="number">22.5</span></span><br><span class="line">        hourSalary = daySalary // <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> dict(yearSalary = yearSalary, monthSalary = salary, daySalary = daySalary, hourSalary = hourSalary)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = SalaryAccount()</span><br><span class="line">print(s(<span class="number">30000</span>))</span><br></pre></td></tr></table></figure></li></ul><h2 id="方法没有重载"><a href="#方法没有重载" class="headerlink" title="方法没有重载"></a>方法没有重载</h2><ul><li><p>在其他语言中，可以定义多个重名的方法，只要保证方法签名(方法名，参数数量。参数类型)唯一即可。Python中，方法的参数没有类型(调用时确定参数类型)，参数的数量也可由可变参数控制。Python中定义一个方法有多种调用方式，相当于实现了其他语言中的方法重载。</p></li><li><p>如果在类体中定义多个重名方法，只有最后一个方法有效</p></li><li><p>方法的动态性：Python是动态语言，可以动态地为类添加新的方法，或者动态地修改类的已有方法。</p></li></ul><h2 id="私有属性和私有方法-实现封装"><a href="#私有属性和私有方法-实现封装" class="headerlink" title="私有属性和私有方法(实现封装)"></a>私有属性和私有方法(实现封装)</h2><ul><li>Python对于类的成员没有严格的访问控制限制，这与其他面向对象语言有区别</li><li>通常约定，两个下划线开头的属性是私有的(private)，其他为公共的(public)</li><li>类内部可以访问私有属性(方法)</li><li>类外部可通过<code>__类名__私有属性(方法)名</code>访问私有属性(方法)</li><li>方法本质上也是属性，只不过可以通过()执行，所以私有方法和公有方法使用也类似<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">    __company = <span class="string">'redhat'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__work</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"work hard233"</span>)</span><br><span class="line">        print(<span class="string">f"age:<span class="subst">&#123;self.__age&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">e = Employee(<span class="string">'azure'</span>, <span class="number">18</span>)</span><br><span class="line">print(e.name)</span><br><span class="line">print(e._Employee__age)</span><br><span class="line">print(dir(e))</span><br><span class="line">e._Employee__work()</span><br><span class="line">print(Employee._Employee__company)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">azure</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">['_Employee__age', '_Employee__company', '_Employee__work', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'name']</span></span><br><span class="line"><span class="string">work hard233</span></span><br><span class="line"><span class="string">age:18</span></span><br><span class="line"><span class="string">redhat</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a><code>@property</code>装饰器</h2><ul><li>可以将一个方法的调用格式变成“属性调用”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不使用装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, salary)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__salary = salary</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_salary</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__salary</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_salary</span><span class="params">(self, salary)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">1000</span> &lt; salary &lt;<span class="number">50000</span>:</span><br><span class="line">            self.__salary = salary</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"input error!"</span>)</span><br><span class="line">   </span><br><span class="line">emp1 = Employee(<span class="string">'rapt'</span>, <span class="number">10000</span>)</span><br><span class="line">print(emp1.get_salary())</span><br><span class="line">emp1.set_salary(<span class="number">-200</span>)</span><br><span class="line">print(emp1.get_salary())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">10000</span></span><br><span class="line"><span class="string">input error!</span></span><br><span class="line"><span class="string">10000</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用@property装饰器代替get和set方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, salary)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__salary = salary</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">salary</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__salary</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @salary.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">salary</span><span class="params">(self, salary)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">1000</span> &lt; salary &lt;<span class="number">50000</span>:</span><br><span class="line">            self.__salary = salary</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"input error!"</span>)</span><br><span class="line"></span><br><span class="line">emp1 = Employee(<span class="string">'rapt'</span>, <span class="number">10000</span>)</span><br><span class="line">print(emp1.salary)</span><br><span class="line">emp1.salary = <span class="number">-200</span></span><br><span class="line">print(emp1.salary)</span><br></pre></td></tr></table></figure><h2 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h2><ul><li>封装(隐藏)：隐藏对象的属性和实现细节，只对外提供必要的方法，相当于“将细节封装起来”，只对外暴露“相关调用方法”。Python没有严格的语法级别的“访问控制符”。通过“私有属性”和“私有方法”实现“封装”。</li><li>继承：让子类拥有父类的特征，提高代码重用性。从设计上是一种增量进化，原有父类设计不变的情况下，可增加新的功能，或者改进已有算法。</li><li>多态：指同一个方法调用由于对象不同会产生不同行为。</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li><p>如果一个新类(子类/派生类)继承自一个设计好的类(父类/基类)，就直接具备了已有类的特征。</p></li><li><p>Python支持多重继承，一个子类可以继承多个父类。如果在类定义中没有指定父类，则默认父类是object类，也就是说，object是所有类的父类，里面定义了一些所有类共有的默认实现，比如<code>__new__()</code></p></li><li><p>定义子类时，必须在其构造函数中调用父类的构造函数，格式为<code>父类.__init__(self, 参数列表)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_age</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name, <span class="string">"'s age is:"</span>, self.age)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, score)</span>:</span></span><br><span class="line">        <span class="comment"># 必须显式调用父类初始化方法，不然解释器不含调用</span></span><br><span class="line">        Person.__init__(self, name, age)</span><br><span class="line">        self.score = score</span><br><span class="line"><span class="comment"># Student -&gt; Person -&gt; object类</span></span><br><span class="line">print(Student.mro())</span><br><span class="line">s = Student(<span class="string">'rapt'</span>, <span class="number">18</span>, <span class="number">100</span>)</span><br><span class="line">s.say_age()</span><br><span class="line">print(s.age)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[&lt;class '__main__.Student'&gt;, &lt;class '__main__.Person'&gt;, &lt;class 'object'&gt;]</span></span><br><span class="line"><span class="string">rapt 's age is: 18</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_age</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name, <span class="string">"'s age is:"</span>, self.__age)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, score)</span>:</span></span><br><span class="line">        <span class="comment"># 必须显式调用父类初始化方法，不然解释器不含调用</span></span><br><span class="line">        Person.__init__(self, name, age)</span><br><span class="line">        self.score = score</span><br><span class="line"><span class="comment"># Student -&gt; Person -&gt; object类</span></span><br><span class="line">print(Student.mro())</span><br><span class="line">s = Student(<span class="string">'rapt'</span>, <span class="number">18</span>, <span class="number">100</span>)</span><br><span class="line">s.say_age()</span><br><span class="line"><span class="comment"># print(s.age)</span></span><br><span class="line">print(dir(s))</span><br><span class="line">print(s._Person__age)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[&lt;class '__main__.Student'&gt;, &lt;class '__main__.Person'&gt;, &lt;class 'object'&gt;]</span></span><br><span class="line"><span class="string">rapt 's age is: 18</span></span><br><span class="line"><span class="string">['_Person__age', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'name', 'say_age', 'score']</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类成员的继承和重写"><a href="#类成员的继承和重写" class="headerlink" title="类成员的继承和重写"></a>类成员的继承和重写</h2><ul><li><p>成员继承：子类继承了父类除构造方法之外的所有成员</p></li><li><p>方法重写：子类可以重新定义父类中的方法，会覆盖(重写)父类中的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">introduce</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f"my name is <span class="subst">&#123;self.name&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, score)</span>:</span></span><br><span class="line">        Person.__init__(self, name, age)</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">introduce</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''重写父类方法'''</span></span><br><span class="line">        print(<span class="string">f"hello, my name is <span class="subst">&#123;self.name&#125;</span>"</span>)</span><br><span class="line">s = Student(<span class="string">'rapt'</span>, <span class="number">18</span>, <span class="number">100</span>)</span><br><span class="line">s.introduce()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">hello, my name is rapt</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="object根类"><a href="#object根类" class="headerlink" title="object根类"></a><code>object</code>根类</h2><ul><li><p>object是所有类的父类，所有类都有object的属性和方法，利用<code>dir()</code>查看对象的所有属性来观察object的结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_age</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f"my age is <span class="subst">&#123;self.age&#125;</span>"</span>)</span><br><span class="line">    </span><br><span class="line">obj = object()</span><br><span class="line">print(dir(obj))</span><br><span class="line">s = Person(<span class="string">'zure'</span>, <span class="number">18</span>)</span><br><span class="line">print(dir(s))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']</span></span><br><span class="line"><span class="string">['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'age', 'name', 'say_age']</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li><li><p>从上面的测试发现，Person对象增加了6个属性：<code>__dict__, __module__, __weakref__, age, name, say_age</code>，<code>say_name</code>虽然是方法，但实际上也是属性，属性的类型为method</p></li></ul><h2 id="重写-str-方法"><a href="#重写-str-方法" class="headerlink" title="重写__str__()方法"></a>重写<code>__str__()</code>方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写之前</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>   <span class="comment"># 默认继承object类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">p  = Person(<span class="string">'orz'</span>)</span><br><span class="line">print(p)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;__main__.Person object at 0x7fbdd8b92b10&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写之后</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span>   <span class="comment"># 默认继承object类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"real name is &#123;&#125;"</span>.format(self.name)</span><br><span class="line"></span><br><span class="line">p  = Person(<span class="string">'orz'</span>)</span><br><span class="line">print(p)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">real name is orz</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><ul><li>Python支持多重继承，一个子类可以有多个直接父类，这样就可以具备多个父类的特点，但这样会使“类的结构层次”变得复杂，尽量避免使用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aa</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bb</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"B"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B, A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cc</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"C"</span>)</span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">c.cc()</span><br><span class="line">c.bb()</span><br><span class="line">c.aa()</span><br></pre></td></tr></table></figure><h2 id="mro"><a href="#mro" class="headerlink" title="mro()"></a><code>mro()</code></h2><ul><li><p>Python支持多继承，如果父类中有相同名字的方法，在子类没有指定父类名时，解释器将“从左往右”按顺序搜索。</p></li><li><p>MRO(Method Resolution Order)：方法解析顺序(采用广度优先算法)。通过类的方法<code>mro()</code>或者类的属性<code>__mro__()</code>可以输出这个类的继承层次结构。方法解析顺序也是按照这个“类的层次结构”寻找的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aa</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bb</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"B"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B, A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cc</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"C"</span>)</span><br><span class="line"></span><br><span class="line">print(C.mro())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[&lt;class '__main__.C'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="super-获得父类定义"><a href="#super-获得父类定义" class="headerlink" title="super()获得父类定义"></a><code>super()</code>获得父类定义</h2><ul><li><p>代表父类的定义，而不是父类的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A:"</span>, self)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># A.say(self)</span></span><br><span class="line">        super().say()</span><br><span class="line">        print(<span class="string">"B:"</span>, self)</span><br><span class="line"></span><br><span class="line">B().say()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">A: &lt;__main__.B object at 0x7f3611315950&gt;</span></span><br><span class="line"><span class="string">B: &lt;__main__.B object at 0x7f3611315950&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li><p>同一方法调用由于对象不同可能产生不同行为。多态是指方法的多态，属性没有多态。多态的存在有两个必要条件：继承，方法重写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"need more food!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(Man)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"chopsticks!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">English</span><span class="params">(Man)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"fork and knife!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">manEat</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(m, Man):</span><br><span class="line">        m.eat()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"no food at all!"</span>)</span><br><span class="line"></span><br><span class="line">manEat(Chinese())</span><br><span class="line">manEat(English())</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">chopsticks!</span></span><br><span class="line"><span class="string">fork and knife!</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="特殊方法与运算符重载"><a href="#特殊方法与运算符重载" class="headerlink" title="特殊方法与运算符重载"></a>特殊方法与运算符重载</h2><ul><li><p>Python运算符实际上是调用对象的特殊方法实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">30</span></span><br><span class="line">c = a + b</span><br><span class="line">d = a.__add__(b)</span><br><span class="line">print(<span class="string">"c ="</span>,c)</span><br><span class="line">print(<span class="string">"d ="</span>,d)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">c = 50</span></span><br><span class="line"><span class="string">d = 50</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li><li><p>常用的特殊方法：</p><p>|        方法         |    说明    |          例子           |<br>| :————————-: | :————: | :——————————-: |<br>|     <code>__init__</code>      |  构造方法  | 对象创建： p = Person() |<br>|      <code>__del__</code>      |  析构方法  |        对象回收         |<br>| <code>__repr__, __str__</code> | 打印，转换 |        print(a)         |<br>|     <code>__call__</code>      |  函数调用  |           a()           |<br>|    <code>__getattr__</code>    |  点号运算  |          a.xxx          |<br>|    <code>__setattr__</code>    |  属性赋值  |      a.xxx = value      |<br>|    <code>__getitem__</code>    |  索引运算  |         a[key]          |<br>|    <code>__setitem__</code>    |  索引赋值  |     a[key] = value      |<br>|      <code>__len__</code>      |    长度    |         len(a)          |</p></li><li><p>每个运算符实际上都对应了相应的方法：</p><p>|   运算符    |                   特殊方法                    |<br>| :————-: | :—————————————————————-: |<br>|      +      |                   <code>__add__</code>                   |<br>|      -      |                   <code>__sub__</code>                   |<br>| <code>&lt;  &lt;=  ==</code> |           <code>__lt__, __le__, __eq__</code>            |<br>| <code>&gt;  &gt;=  !=</code> |           <code>__gt__, __ge__, __ne__</code>            |<br>|  |  ^  &amp;   |           <code>__or__, __xor__, _and__</code>           |<br>|   &lt;&lt;  &gt;&gt;    |           <code>__lshift__, __rshift__</code>            |<br>| <em>  /  %  // | <code>__mul__, __truediv__, __mod__, __floordiv__</code> |<br>|     *</em>      |                   <code>__pow__</code>                   |</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(other, Person):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;0&#125;--&#123;1&#125;"</span>.format(self.name, other.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"can not be added!"</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(other, int):</span><br><span class="line">            <span class="keyword">return</span> self.name * other</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"can not be multiplied!"</span></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">"rapt"</span>)</span><br><span class="line">p2 = Person(<span class="string">"azure"</span>)</span><br><span class="line"></span><br><span class="line">x = p1 + p2</span><br><span class="line">print(x)</span><br><span class="line">print(p1 * <span class="number">3</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">rapt--azure</span></span><br><span class="line"><span class="string">raptraptrapt</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h2><div class="table-container"><table><thead><tr><th style="text-align:center">特殊方法</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>obj.__dict__</code></td><td style="text-align:center">对象的属性字典</td></tr><tr><td style="text-align:center"><code>obj.__class__</code></td><td style="text-align:center">对象所属的类</td></tr><tr><td style="text-align:center"><code>class.__bases__</code></td><td style="text-align:center">类的基类元组(多继承)</td></tr><tr><td style="text-align:center"><code>class.__base__</code></td><td style="text-align:center">类的基类</td></tr><tr><td style="text-align:center"><code>class.__mro__</code></td><td style="text-align:center">类层次结构</td></tr><tr><td style="text-align:center"><code>class.__subclasses__()</code></td><td style="text-align:center">子类列表</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B, A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        self.num = num</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cc</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"cc"</span>)</span><br><span class="line"></span><br><span class="line">c = C(<span class="number">3</span>)</span><br><span class="line">print(dir(c))</span><br><span class="line">print(c.__dict__)</span><br><span class="line">print(c.__class__)</span><br><span class="line">print(C.__bases__)</span><br><span class="line">print(C.__base__)</span><br><span class="line">print(C.__mro__)</span><br><span class="line">print(A.__subclasses__)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'cc', 'num']</span></span><br><span class="line"><span class="string">&#123;'num': 3&#125;</span></span><br><span class="line"><span class="string">&lt;class '__main__.C'&gt;</span></span><br><span class="line"><span class="string">(&lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;)</span></span><br><span class="line"><span class="string">&lt;class '__main__.B'&gt;</span></span><br><span class="line"><span class="string">(&lt;class '__main__.C'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)</span></span><br><span class="line"><span class="string">&lt;built-in method __subclasses__ of type object at 0x55687d191590&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="对象的浅拷贝和深拷贝"><a href="#对象的浅拷贝和深拷贝" class="headerlink" title="对象的浅拷贝和深拷贝"></a>对象的浅拷贝和深拷贝</h2><ul><li>变量赋值：只是形成两个变量，实际还是指向同一个对象</li><li>浅拷贝：Python中拷贝一般都是浅拷贝。拷贝时，对象包含的子对象内容不拷贝，因此源对象和拷贝对象会引用同一个子对象。</li><li>深拷贝：使用copy模块的deepcopy函数，递归拷贝对象中包含的子对象，源对象和拷贝对象所有的子对象也不同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobilePhone</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cpu, screen)</span>:</span></span><br><span class="line">        self.cpu = cpu</span><br><span class="line">        self.screen = screen</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"5 ="</span>,<span class="number">3</span> + <span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"cpu object:"</span>,self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"nice picture"</span>)</span><br><span class="line">        print(<span class="string">"screen object"</span>, self)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试变量赋值</span></span><br><span class="line">c1 = CPU()</span><br><span class="line">c2 = c1</span><br><span class="line">print(c1)</span><br><span class="line">print(c2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试浅复制</span></span><br><span class="line">s1 = Screen()</span><br><span class="line">m1 = MobilePhone(c1, s1)</span><br><span class="line">m2 = copy.copy(m1)</span><br><span class="line">print(m1, m1.cpu, m1.screen)</span><br><span class="line">print(m2, m2.cpu, m2.screen)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试深复制</span></span><br><span class="line">m3 = copy.deepcopy(m1)</span><br><span class="line">print(m1, m1.cpu, m1.screen)</span><br><span class="line">print(m2, m2.cpu, m2.screen)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;__main__.CPU object at 0x7ffb8df27c10&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.CPU object at 0x7ffb8df27c10&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.MobilePhone object at 0x7ffb8df27e50&gt; &lt;__main__.CPU object at 0x7ffb8df27c10&gt; &lt;__main__.Screen object at 0x7ffb8df27d10&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.MobilePhone object at 0x7ffb8df2c6d0&gt; &lt;__main__.CPU object at 0x7ffb8df27c10&gt; &lt;__main__.Screen object at 0x7ffb8df27d10&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.MobilePhone object at 0x7ffb8df27e50&gt; &lt;__main__.CPU object at 0x7ffb8df27c10&gt; &lt;__main__.Screen object at 0x7ffb8df27d10&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.MobilePhone object at 0x7ffb8df2c6d0&gt; &lt;__main__.CPU object at 0x7ffb8df27c10&gt; &lt;__main__.Screen object at 0x7ffb8df27d10&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><ul><li><p>“is-a”关系，可以使用“继承”，从而实现子类拥有父类的方法和属性，如：狗是动物</p></li><li><p>“has-a”关系，可以使用”组合“，也能实现一个类拥有另一个类的方法和属性，如：手机有CPU</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用继承实现代码复用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_a1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a1"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span><span class="params">(A1)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">b1 = B1()</span><br><span class="line">b1.say_a1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用组合实现代码复用(效果相同)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_a2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"a2"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        self.a = a</span><br><span class="line"></span><br><span class="line">b2 = B2(A2())</span><br><span class="line">b2.a.say_a2()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a1</span></span><br><span class="line"><span class="string">a2</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试has-a关系，使用组合</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobilePhone</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cpu, screen)</span>:</span></span><br><span class="line">        self.cpu = cpu</span><br><span class="line">        self.screen = screen</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"5 ="</span>,<span class="number">3</span> + <span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"cpu object:"</span>,self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"nice picture"</span>)</span><br><span class="line">        print(<span class="string">"screen object"</span>, self)</span><br><span class="line"></span><br><span class="line">m = MobilePhone(CPU(), Screen())</span><br><span class="line">m.cpu.calc()</span><br><span class="line">m.screen.show()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5 = 5</span></span><br><span class="line"><span class="string">cpu object: &lt;__main__.CPU object at 0x7fab84874a90&gt;</span></span><br><span class="line"><span class="string">nice picture</span></span><br><span class="line"><span class="string">screen object &lt;__main__.Screen object at 0x7fab84874b90&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li><p>设计模式是面向对象语言特有的内容，是我们在面临某一类问题时候固定的做法，设计模式有很多种，比较流行的是：GOF(Group of Four)23种设计模式。</p></li><li><p>工厂模式：实现了创建者与调用者的分离，使用专门的工厂类将选择实现类、创建对象进行统一的管理和控制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_car</span><span class="params">(self, brand)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> brand == <span class="string">'Benz'</span>:</span><br><span class="line">            <span class="keyword">return</span> Benz()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">'BMW'</span>:</span><br><span class="line">            <span class="keyword">return</span> BWM()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">'Lamboghini'</span>:</span><br><span class="line">            <span class="keyword">return</span> Lamboghini()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"unknown"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Benz</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BWM</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lamboghini</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">factory = CarFactory()</span><br><span class="line">c1 = factory.create_car(<span class="string">'Benz'</span>)</span><br><span class="line">c2 = factory.create_car(<span class="string">'BMW'</span>)</span><br><span class="line">print(c1)</span><br><span class="line">print(c2)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;__main__.Benz object at 0x7f334f5b1ad0&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.BWM object at 0x7f334f5b1b10&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li><li><p>单例模式(Singleton Pattern)：核心作用是确保一个类只有一个实例，并且提供一个访问该实例的全局访问点。单例模式只生成一个实例对象，减少了对系统资源的开销。当一个对象的产生需要比较多的资源，如读取配置文件，产生其他依赖对象时，可以产生一个“单例对象”，然后永久驻留在内存中，从而降低开销。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span>:</span></span><br><span class="line">    __obj = <span class="literal">None</span></span><br><span class="line">    __init__flag = <span class="literal">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls.__obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__obj = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__obj</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> MySingleton.__init__flag:</span><br><span class="line">            print(<span class="string">"Initializing..."</span>)</span><br><span class="line">            self.name = name</span><br><span class="line">            MySingleton.__init__flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">a = MySingleton(<span class="string">"a"</span>)</span><br><span class="line">b  = MySingleton(<span class="string">"b"</span>)</span><br><span class="line">c = MySingleton(<span class="string">"c"</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Initializing...</span></span><br><span class="line"><span class="string">&lt;__main__.MySingleton object at 0x7f6f0dc1c890&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.MySingleton object at 0x7f6f0dc1c890&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.MySingleton object at 0x7f6f0dc1c890&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><ul><li><p>工厂+单例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span>:</span></span><br><span class="line">    __obj = <span class="literal">None</span></span><br><span class="line">    __init__flag = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_car</span><span class="params">(self, brand)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> brand == <span class="string">'Benz'</span>:</span><br><span class="line">            <span class="keyword">return</span> Benz()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">'BMW'</span>:</span><br><span class="line">            <span class="keyword">return</span> BWM()</span><br><span class="line">        <span class="keyword">elif</span> brand == <span class="string">'Lamboghini'</span>:</span><br><span class="line">            <span class="keyword">return</span> Lamboghini()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"unknown"</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls.__obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__obj = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__obj</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> CarFactory.__init__flag:</span><br><span class="line">            print(<span class="string">"Initializing CarFactory..."</span>)</span><br><span class="line">            CarFactory.__init__flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Benz</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BWM</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lamboghini</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">factory = CarFactory()</span><br><span class="line">c1 = factory.create_car(<span class="string">'Benz'</span>)</span><br><span class="line">c2 = factory.create_car(<span class="string">'BMW'</span>)</span><br><span class="line">print(c1)</span><br><span class="line">print(c2)</span><br><span class="line"></span><br><span class="line">factory2 = CarFactory()</span><br><span class="line">print(factory)</span><br><span class="line">print(factory2)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Initializing CarFactory...</span></span><br><span class="line"><span class="string">&lt;__main__.Benz object at 0x7f62ca5dfc10&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.BWM object at 0x7f62ca5dfc50&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.CarFactory object at 0x7f62ca5dfbd0&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.CarFactory object at 0x7f62ca5dfbd0&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面向对象编程&quot;&gt;&lt;a href=&quot;#面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;面向对象编程&quot;&gt;&lt;/a&gt;面向对象编程&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;​        面向对象编程将数据和操作数据相关方法封装到对象中，组织代码和数据的方式更加接近人的思维，从而大大提高编程效率。更加关注软件中对象中的关系，是一种设计者思维，适合编写大规模程序。面向对象离不开面向过程，二者相辅相成，宏观使用面向对象把握，微观处理仍是面向过程。遇到复杂问题，面向对象先从问题中找名词(面向过程更多的是找动词)，确定这些名词哪些可以作为类，再根据问题需求确定类的属性和方法，确定类之间的关系。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://raptazure.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python Function</title>
    <link href="https://raptazure.github.io/2019/11/07/Python-Basics04/"/>
    <id>https://raptazure.github.io/2019/11/07/Python-Basics04/</id>
    <published>2019-11-06T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h2><ul><li><p>函数代表一个任务或者一个功能，函数是代码复用的通用机制。</p></li><li><p>函数分类：内置函数，标准库函数，第三方库函数，用户自定义函数。</p><a id="more"></a></li></ul><h2 id="函数定义和调用："><a href="#函数定义和调用：" class="headerlink" title="函数定义和调用："></a>函数定义和调用：</h2><ul><li><p>Python执行def会创建一个新的函数对象(对象在堆里)，并绑定到函数名变量(在栈里)上 -&gt; 把对象地址给变量，可通过函数名变量找到对象。</p></li><li><p>圆括号内是形式参数表，有多个参数时应用<code>，</code>隔开。形参不需要声明变量类型，也不需要指定函数返回值类型，实参列表要与形参对应。</p></li><li><p>return 返回值，不含return则返回None，要返回多个值可用序列存储。</p></li><li><p>调用函数前必须先定义函数(用def创建函数对象)：</p><ul><li>内置函数对象会自动创建</li><li>标准库和第三方库函数，通过import导入模块时，会执行模块中的def语句。5</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"$"</span> * <span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    my_func()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMax</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="string">'''compare two numbers and give the bigger one'''</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">        print(a,<span class="string">"is bigger"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(b,<span class="string">"is bigger"</span>)</span><br><span class="line">    </span><br><span class="line">printMax(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">printMax(<span class="number">2</span>,<span class="number">34</span>)</span><br><span class="line"><span class="comment"># 打印文档字符串</span></span><br><span class="line">help(printMax)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(x,y,z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x* <span class="number">10</span>, y * <span class="number">10</span>, z * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(test(<span class="number">19</span>, <span class="number">29</span>, <span class="number">39</span>))</span><br><span class="line"><span class="comment"># (190, 290, 390)</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"object"</span>)</span><br><span class="line">test()</span><br><span class="line">c = test</span><br><span class="line">c()</span><br><span class="line">print(id(test))</span><br><span class="line">print(id(c))</span><br><span class="line">print(type(c))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">object</span></span><br><span class="line"><span class="string">object</span></span><br><span class="line"><span class="string">139964785728976</span></span><br><span class="line"><span class="string">139964785728976</span></span><br><span class="line"><span class="string">&lt;class 'function'&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><ul><li><p>全局变量：在函数和类定义之外声明的变量，作用域是定义的模块，一般做常量使用，函数内要改变全局变量的值需用global声明。</p><p>局部变量：在函数体中声明的变量(包含形参)，局部变量存在栈帧里(Stack Frame)，局部变量的引用快于全局变量。若函数内局部变量与全局变量同名，则在函数内屏蔽全局变量。</p><p>使用<code>print(locals())</code> <code>print(globals())</code>打印所有局部变量和全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试局部变量与全局变量效率</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100001</span>):</span><br><span class="line">        math.sqrt(<span class="number">30</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">"time cost: &#123;&#125;"</span>.format(end - start))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    b = math.sqrt</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100001</span>):</span><br><span class="line">        b(<span class="number">30</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">"time cost: &#123;&#125;"</span>.format(end - start))</span><br><span class="line">test()</span><br><span class="line">test2()</span><br><span class="line"><span class="comment"># time cost: 0.010730981826782227</span></span><br><span class="line"><span class="comment"># time cost: 0.005475521087646484</span></span><br></pre></td></tr></table></figure></li><li><p>参数传递：本质是从实参到形参的赋值操作，Python中一切皆对象，所有赋值操作都是引用的赋值，所以python中的参数传递是“引用传递”而非“值传递”。具体操作分为：</p><ul><li><p>对可变对象(字典，列表，集合，自定义的对象等)进行“写操作”，直接作用于原对象本身。传递参数是可变对象时，实际传递的是对象的引用，在函数中不创建新的对象拷贝，而是可以直接修改所传递的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(m)</span>:</span></span><br><span class="line">    print(<span class="string">"m"</span>,id(m))</span><br><span class="line">    m.append(<span class="number">30</span>)</span><br><span class="line">f2(b)</span><br><span class="line">print(<span class="string">"b"</span>,id(b))</span><br><span class="line">print(b)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">m 140456535695920</span></span><br><span class="line"><span class="string">b 140456535695920</span></span><br><span class="line"><span class="string">[10, 20, 30]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li><li><p>对不可变对象(数字，字符串，元组，布尔值，function等)进行“写操作”，会产生一个新的“对象空间”，并用新的值填充这块空间(起到其他语言的“值传递”效果但不是“值传递”)。传递对象是不可变对象时，实际传递的也是对象的引用，在“赋值”操作时，由于不可变对象无法修改，系统会创建一个新的对象拷贝，此时用的是浅拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"n"</span>,id(n))</span><br><span class="line">    n = n + <span class="number">200</span></span><br><span class="line">    print(<span class="string">"n"</span>,id(n))</span><br><span class="line">    print(n)</span><br><span class="line">f(a)</span><br><span class="line">print(<span class="string">"a"</span>,a,id(a))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">n 140526911552880</span></span><br><span class="line"><span class="string">n 140526912199440</span></span><br><span class="line"><span class="string">10200</span></span><br><span class="line"><span class="string">a 10000 140526911552880</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#n和a一开始是同一个对象，n值改变-&gt;新的对象</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">print(<span class="string">"a:"</span>,id(a))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(m)</span>:</span></span><br><span class="line">    print(<span class="string">"m:"</span>,id(m))</span><br><span class="line">    m = <span class="number">20</span></span><br><span class="line">    print(<span class="string">"m:"</span>,id(m))</span><br><span class="line">test(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a: 139863371449600</span></span><br><span class="line"><span class="string">m: 139863371449600</span></span><br><span class="line"><span class="string">m: 139863371449920</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 浅拷贝</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = (<span class="number">10</span>, <span class="number">20</span>, [<span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">print(<span class="string">"a:"</span>,id(a))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(m)</span>:</span></span><br><span class="line">    print(<span class="string">"m:"</span>,id(m))</span><br><span class="line">    m[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">233</span></span><br><span class="line">    print(m)</span><br><span class="line">    print(<span class="string">"m:"</span>,id(m))</span><br><span class="line">test(a)</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a: 140400765861072</span></span><br><span class="line"><span class="string">m: 140400765861072</span></span><br><span class="line"><span class="string">(10, 20, [233, 6])</span></span><br><span class="line"><span class="string">m: 140400765861072</span></span><br><span class="line"><span class="string">(10, 20, [233, 6])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#传递不可变对象时，若不可变对象里包含的子对象是可变的，在方法内修改这个可变对象时，源对象也会发生变化</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>浅拷贝和深拷贝：内置函数<code>copy</code>  <code>deepcopy</code></p><ul><li><p>浅拷贝：不拷贝子对象内容，只是拷贝子对象的引用。</p></li><li><p>深拷贝：将子对象的内存全部拷贝一份，对子对象的修改不会影响源对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="comment">#浅拷贝</span></span><br><span class="line">a = [<span class="number">10</span>, <span class="number">20</span>, [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(<span class="string">"a"</span>,a)</span><br><span class="line">print(<span class="string">"b"</span>,b)</span><br><span class="line">b.append(<span class="number">30</span>)</span><br><span class="line">b[<span class="number">2</span>].append(<span class="number">7</span>)</span><br><span class="line">print(<span class="string">"copy..."</span>)</span><br><span class="line">print(<span class="string">"a"</span>,a)</span><br><span class="line">print(<span class="string">"b"</span>,b)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a [10, 20, [5, 6]]</span></span><br><span class="line"><span class="string">b [10, 20, [5, 6]]</span></span><br><span class="line"><span class="string">copy...</span></span><br><span class="line"><span class="string">a [10, 20, [5, 6, 7]]</span></span><br><span class="line"><span class="string">b [10, 20, [5, 6, 7], 30]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a = [<span class="number">10</span>, <span class="number">20</span>, [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">print(<span class="string">"a"</span>,a)</span><br><span class="line">print(<span class="string">"b"</span>,b)</span><br><span class="line">b.append(<span class="number">30</span>)</span><br><span class="line">b[<span class="number">2</span>].append(<span class="number">7</span>)</span><br><span class="line">print(<span class="string">"deepcopy..."</span>)</span><br><span class="line">print(<span class="string">"a"</span>,a)</span><br><span class="line">print(<span class="string">"b"</span>,b)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a [10, 20, [5, 6]]</span></span><br><span class="line"><span class="string">b [10, 20, [5, 6]]</span></span><br><span class="line"><span class="string">deepcopy...</span></span><br><span class="line"><span class="string">a [10, 20, [5, 6]]</span></span><br><span class="line"><span class="string">b [10, 20, [5, 6, 7], 30]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>参数的几种类型：</p><ul><li><p>位置参数：函数调用时实参按默认位置顺序传递，需要个数和形参匹配。按位置传递的参数是位置参数。</p></li><li><p>默认值参数：为某些参数设定默认值，这样这些参数在传递时就是可选的。默认值参数放在位置参数后面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b, c = <span class="number">10</span>)</span>:</span></span><br><span class="line">    print(a, b, c)</span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>命名参数：按照形参的名称传递参数，也叫关键字函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    print(a, b, c)</span><br><span class="line">f(c = <span class="number">10</span>, a = <span class="number">20</span>, b = <span class="number">30</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>可变参数：数量可变。<code>*param</code>将多个参数收集到一个元组对象中。<code>**param</code>将多个参数收集到一个字典对象中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, *b, **c)</span>:</span></span><br><span class="line">    print(a, b, c)</span><br><span class="line">func(<span class="number">8</span>, <span class="number">9</span>, <span class="number">233</span>, <span class="number">1</span>, name = <span class="string">'rapt'</span>, age = <span class="number">18</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">8 (9, 233, 1) &#123;'name': 'rapt', 'age': 18&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>强制命名参数：在带*的可变参数后增加新的参数，必须在调用时“强制命名参数”。否则前面的可变参数会持续收集使得后面的无法进行赋值。</li></ul><h2 id="lambda表达式与匿名函数："><a href="#lambda表达式与匿名函数：" class="headerlink" title="lambda表达式与匿名函数："></a>lambda表达式与匿名函数：</h2><ul><li><p>lambda表达式是一种简单的，在同一行中定义函数的方法。可用来声明匿名函数，lambda函数实际生成一个函数对象。运算结果是函数返回值</p><p><code>lambda arg1, arg2, arg3 … : &lt;exp&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> a, b, c : a + b + c</span><br><span class="line">print(f)</span><br><span class="line">print(f(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">g = [<span class="keyword">lambda</span> a : a * <span class="number">2</span>, <span class="keyword">lambda</span> b : b * <span class="number">3</span>, <span class="keyword">lambda</span> c : c * <span class="number">4</span>]</span><br><span class="line">print(g[<span class="number">0</span>](<span class="number">6</span>), g[<span class="number">1</span>](<span class="number">7</span>), g[<span class="number">2</span>](<span class="number">10</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a, b, c, d)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c + d</span><br><span class="line">h = [test, test] <span class="comment">#函数也是对象</span></span><br><span class="line">print(h[<span class="number">0</span>](<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;function &lt;lambda&gt; at 0x7fbf0647b050&gt;</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">12 21 40</span></span><br><span class="line"><span class="string">14</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="eval-函数："><a href="#eval-函数：" class="headerlink" title="eval() 函数："></a><code>eval()</code> 函数：</h2><ul><li><p>功能：将字符串str当成有效的表达式来求值并返回计算结果。</p></li><li><p>语法：<code>eval([__source], [__globals], [__locals]) -&gt; value</code></p></li><li><p>参数：source - 一个Python表达式或函数compile()返回的代码对象</p><p>​            globals - 可选，必须是dictionary</p><p>​            locals - 可选，任意映射对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"print('rapt')"</span></span><br><span class="line">eval(s)</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = eval(<span class="string">"a + b"</span>)</span><br><span class="line">print(c)</span><br><span class="line">dict = dict(a = <span class="number">100</span>, b = <span class="number">200</span>)</span><br><span class="line">d = eval(<span class="string">"a + b"</span>, dict)</span><br><span class="line">print(d)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">rapt</span></span><br><span class="line"><span class="string">30</span></span><br><span class="line"><span class="string">300</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="递归函数："><a href="#递归函数：" class="headerlink" title="递归函数："></a>递归函数：</h2><ul><li><p>在函数内部直接或间接地调用自己的函数。类似于数学归纳法。每个递归函数需要包含终止条件和递归步骤两个部分。递归函数会创建大量函数对象，消耗较多内存、空间和运算能力，不建议在处理大量数据时使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"Testing..."</span>,n)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"over"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        test(n - <span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Testing****"</span>,n)</span><br><span class="line">test(<span class="number">3</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Testing... 3</span></span><br><span class="line"><span class="string">Testing... 2</span></span><br><span class="line"><span class="string">Testing... 1</span></span><br><span class="line"><span class="string">Testing... 0</span></span><br><span class="line"><span class="string">over</span></span><br><span class="line"><span class="string">Testing**** 0</span></span><br><span class="line"><span class="string">Testing**** 1</span></span><br><span class="line"><span class="string">Testing**** 2</span></span><br><span class="line"><span class="string">Testing**** 3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 后进先出</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>递归计算阶乘：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span>  n * fact(n - <span class="number">1</span>)</span><br><span class="line">print(<span class="string">"the result is"</span>,fact(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></li></ul><h2 id="嵌套函数："><a href="#嵌套函数：" class="headerlink" title="嵌套函数："></a>嵌套函数：</h2><ul><li><p>在函数内部定义的函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"outer running"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"inner running"</span>)</span><br><span class="line">    inner()</span><br><span class="line">outer()</span><br></pre></td></tr></table></figure></li><li><p>作用：封装，数据隐藏，外部无法访问嵌套函数。</p><p>​            贯彻DRY- Don’t Repeat Yourself原则，在函数内部避免重复代码。</p><p>​            闭包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printName</span><span class="params">(isChinese, name, familyName)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_print</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        print(<span class="string">"&#123;0&#125; &#123;1&#125;"</span>.format(a, b))</span><br><span class="line">    <span class="keyword">if</span> isChinese:</span><br><span class="line">        inner_print(familyName, name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        inner_print(name, familyName)</span><br><span class="line">printName(<span class="literal">True</span>, <span class="string">'azure'</span>, <span class="string">'rapt'</span>)</span><br><span class="line">printName(<span class="literal">False</span>, <span class="string">'Arch'</span>, <span class="string">'linux'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="nonlocal-关键字："><a href="#nonlocal-关键字：" class="headerlink" title="nonlocal 关键字："></a><code>nonlocal</code> 关键字：</h2><ul><li><p>nonlocal  用来声明外层的局部变量    global 用来声明全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">233</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">external</span><span class="params">()</span>:</span></span><br><span class="line">    b = <span class="number">1024</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">internal</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> b</span><br><span class="line">        print(<span class="string">"internal"</span>,b)</span><br><span class="line">        b = <span class="number">10</span></span><br><span class="line">        <span class="keyword">global</span> a</span><br><span class="line">        a = <span class="number">23333</span></span><br><span class="line">    internal()</span><br><span class="line">    print(<span class="string">"external"</span>,b)</span><br><span class="line">external()</span><br><span class="line">print(<span class="string">"a:"</span>,a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">internal 1024</span></span><br><span class="line"><span class="string">external 10</span></span><br><span class="line"><span class="string">a: 23333</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="LEGB规则："><a href="#LEGB规则：" class="headerlink" title="LEGB规则："></a>LEGB规则：</h2><ul><li><p>Python在查找名称时，按照LEGB规则查找：</p><p>Local - Enclosed - Global - Built in</p><p>Local 函数或者类的方法内部</p><p>Enclosed 嵌套函数(一个函数包裹另一个函数，闭包)</p><p>Global 模块中的全局变量</p><p>Built in 指Python为自己保留的特殊名称</p></li><li><p>如果某个name映射在局部命名空间local中没有找到，就会到闭包作用域进行搜索…依次类推，如果在所有命名空间都没有找到，产生NameError</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#str = 'global'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#str = 'outer'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment">#str = 'inner'</span></span><br><span class="line">        print(str)</span><br><span class="line">    inner()</span><br><span class="line">outer()</span><br><span class="line"><span class="comment"># &lt;class 'str'&gt;  Built-in</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;h2 id=&quot;基本概念：&quot;&gt;&lt;a href=&quot;#基本概念：&quot; class=&quot;headerlink&quot; title=&quot;基本概念：&quot;&gt;&lt;/a&gt;基本概念：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;函数代表一个任务或者一个功能，函数是代码复用的通用机制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数分类：内置函数，标准库函数，第三方库函数，用户自定义函数。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://raptazure.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python Control Flow</title>
    <link href="https://raptazure.github.io/2019/11/06/Python-Basics03/"/>
    <id>https://raptazure.github.io/2019/11/06/Python-Basics03/</id>
    <published>2019-11-05T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h1><h2 id="选择结构："><a href="#选择结构：" class="headerlink" title="选择结构："></a>选择结构：</h2><h4 id="单分支选择结构："><a href="#单分支选择结构：" class="headerlink" title="单分支选择结构："></a>单分支选择结构：</h4><ul><li><p>if 条件表达式(逻辑，关系，算术)，注意缩进。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = input(<span class="string">"please input a number"</span>)</span><br><span class="line"><span class="keyword">if</span> int(num)&lt;<span class="number">10</span>:</span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure></li></ul>  <a id="more"></a><ul><li><p>条件表达式值为False的情况如下：False，0，0.0，None空值，空序列对象（空列表，空元组，空字典，空字符串），空range对象，空迭代对象,其他均为True。条件表达式中不能有赋值操作符‘=’(报语法错误)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"ok"</span>)</span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    print(<span class="string">"empty list,False"</span>)</span><br><span class="line">s = <span class="string">"False"</span></span><br><span class="line"><span class="keyword">if</span> s:</span><br><span class="line">    print(<span class="string">"string,True"</span>)</span><br><span class="line">c = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span>&lt;c&lt;<span class="number">10</span>:</span><br><span class="line">    print(<span class="string">"True"</span>)</span><br><span class="line">‘’‘</span><br><span class="line">ok</span><br><span class="line">string,<span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">’‘’</span><br></pre></td></tr></table></figure></li></ul><h4 id="多分支选择结构"><a href="#多分支选择结构" class="headerlink" title="多分支选择结构:"></a>多分支选择结构:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#VS Code Python3.7.4</span></span><br><span class="line">s = input(<span class="string">"please input a number"</span>)</span><br><span class="line"><span class="keyword">if</span> int(s) &lt; <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">"s is smaller than 10"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"s is bigger"</span>)</span><br><span class="line"><span class="comment"># 三元条件运算符</span></span><br><span class="line">num = input(<span class="string">"please input another number"</span>)</span><br><span class="line">print(num <span class="keyword">if</span> int(num) &lt; <span class="number">10</span> <span class="keyword">else</span> <span class="string">"too big"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#多分支结构种分支有逻辑关系,不可随意颠倒顺序</span></span><br><span class="line">score = int(input(<span class="string">"please input your score "</span>))</span><br><span class="line">grade = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> score &lt; <span class="number">60</span>:</span><br><span class="line">    grade = <span class="string">'E'</span></span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">80</span>:</span><br><span class="line">    grade = <span class="string">'D'</span></span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">90</span>:</span><br><span class="line">    grade = <span class="string">'B'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    grade = <span class="string">'A'</span></span><br><span class="line">print(<span class="string">"your score is &#123;0&#125; and your grade is &#123;1&#125;"</span>.format(score,grade))</span><br><span class="line"><span class="comment"># 多分支也可只用if,但推荐elif</span></span><br><span class="line"><span class="comment"># 选择结构嵌套注意缩进</span></span><br><span class="line">score = int(input(<span class="string">"please input your score "</span>))</span><br><span class="line">degree = <span class="string">'ABCDE'</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> score &gt; <span class="number">100</span> <span class="keyword">or</span> score &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"please input a number between 0 and 100"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    num = score//<span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">5</span>:</span><br><span class="line">        num = <span class="number">5</span></span><br><span class="line">    print(degree[<span class="number">9</span>-num])</span><br></pre></td></tr></table></figure><h2 id="循环结构："><a href="#循环结构：" class="headerlink" title="循环结构："></a>循环结构：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## while</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">100</span>:</span><br><span class="line">    print(num,end = <span class="string">'\t'</span>)</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line"><span class="comment">## for  用于可迭代对象的遍历</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>):</span><br><span class="line">    print(x*<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"rapt"</span>:</span><br><span class="line">    print(x)</span><br><span class="line">d = &#123;<span class="string">'name'</span>:<span class="string">'rapt'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d:</span><br><span class="line">    print(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.values():</span><br><span class="line">    print(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.keys():</span><br><span class="line">    print(x)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d.items():</span><br><span class="line">    print(x)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">name</span></span><br><span class="line"><span class="string">age</span></span><br><span class="line"><span class="string">rapt</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">name</span></span><br><span class="line"><span class="string">age</span></span><br><span class="line"><span class="string">('name', 'rapt')</span></span><br><span class="line"><span class="string">('age', 18)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">sum_even = <span class="number">0</span></span><br><span class="line">sum_odd = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        sum_even += num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sum_odd += num</span><br><span class="line">print(<span class="string">"even sum = &#123;0&#125;, odd sum = &#123;1&#125;"</span>.format(sum_even,sum_odd))</span><br><span class="line"><span class="comment">## 嵌套循环</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        print(x,end = <span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">00000</span></span><br><span class="line"><span class="string">11111</span></span><br><span class="line"><span class="string">22222</span></span><br><span class="line"><span class="string">33333</span></span><br><span class="line"><span class="string">44444</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 打印乘法表</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">"&#123;0&#125; * &#123;1&#125; = &#123;2&#125;"</span>.format(m,n,(m*n)), end = <span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br><span class="line"><span class="comment"># 与字典配合</span></span><br><span class="line">r1 = dict(name=<span class="string">'rapt1'</span>,age=<span class="number">18</span>)</span><br><span class="line">r2 = dict(name=<span class="string">'rapt2'</span>,age=<span class="number">19</span>)</span><br><span class="line">r3 = dict(name=<span class="string">'rapt3'</span>,age=<span class="number">20</span>)</span><br><span class="line">table = [r1,r2,r3]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> table:</span><br><span class="line">    <span class="keyword">if</span> x.get(<span class="string">'age'</span>) &gt;= <span class="number">19</span>:</span><br><span class="line">        print(x)</span><br><span class="line"><span class="comment"># break结束整个循环 &amp; continue结束本次循环进入下一次</span></span><br><span class="line">empNum = <span class="number">0</span></span><br><span class="line">salarySum = <span class="number">0</span></span><br><span class="line">salary = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = input(<span class="string">"Please enter the salary:"</span>)</span><br><span class="line">    <span class="keyword">if</span> s.upper() == <span class="string">'Q'</span>:</span><br><span class="line">        print(<span class="string">"quit"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> float(s) &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    empNum += <span class="number">1</span></span><br><span class="line">    salary.append(float(s))</span><br><span class="line">    salarySum += float(s)</span><br><span class="line">print(<span class="string">"the number of employees:&#123;0&#125;"</span>.format(empNum))</span><br><span class="line">print(<span class="string">"salary:"</span>,salary)</span><br><span class="line">print(<span class="string">f"average salary:<span class="subst">&#123;salarySum/empNum&#125;</span>"</span>)</span><br><span class="line"><span class="comment"># while，for循环可以附带一个else语句，如果for，while没有被break结束，则会执行else子句</span></span><br><span class="line">empNum = <span class="number">0</span></span><br><span class="line">salarySum = <span class="number">0</span></span><br><span class="line">salary = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    s = input(<span class="string">"Please enter the salary:"</span>)</span><br><span class="line">    <span class="keyword">if</span> s.upper() == <span class="string">'Q'</span>:</span><br><span class="line">        print(<span class="string">"quit"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> float(s) &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    empNum += <span class="number">1</span></span><br><span class="line">    salary.append(float(s))</span><br><span class="line">    salarySum += float(s)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"you have entered salary of all the employees"</span>)</span><br><span class="line">print(<span class="string">"the number of employees:&#123;0&#125;"</span>.format(empNum))</span><br><span class="line">print(<span class="string">"salary:"</span>,salary)</span><br><span class="line">print(<span class="string">f"average salary:<span class="subst">&#123;salarySum/empNum&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><ul><li><p>循环代码优化：</p><ul><li>尽量减少循环内部不必要的计算</li></ul></li><li>嵌套循环中尽量减少内层循环计算，尽可能外提<ul><li>局部变量查询较快，尽量使用局部变量</li></ul></li><li><p>连续多个字符串，使用<code>join()</code>不用+</p><ul><li>列表进行元素插入和删除，尽量在列表尾部操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        result.append(i*<span class="number">1000</span>+m*<span class="number">100</span>)</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">f'time cost:<span class="subst">&#123;end - start&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">start2 = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    result = []</span><br><span class="line">    c = i*<span class="number">1000</span> </span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        result.append(c+m*<span class="number">100</span>)</span><br><span class="line">end2 = time.time()</span><br><span class="line">print(<span class="string">f"time cost:<span class="subst">&#123;end2 - start2&#125;</span>"</span>)</span><br><span class="line"><span class="comment"># time cost:1.810370922088623</span></span><br><span class="line"><span class="comment"># time cost:1.4288480281829834</span></span><br></pre></td></tr></table></figure></li><li><p><code>zip()</code>进行并行迭代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'rapt'</span>,<span class="string">'azure'</span>,<span class="string">'linux'</span>]</span><br><span class="line">ages = [<span class="number">18</span>,<span class="number">19</span>,<span class="number">50</span>]</span><br><span class="line">jobs = [<span class="string">'stu'</span>,<span class="string">'pro'</span>,<span class="string">'opt'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name,age,job <span class="keyword">in</span> zip(names,ages,jobs):</span><br><span class="line">    print(<span class="string">"&#123;0&#125;--&#123;1&#125;--&#123;2&#125;"</span>.format(name,age,job))</span><br><span class="line"><span class="comment"># 相同功能也可通过以下代码实现</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(<span class="string">"&#123;0&#125;--&#123;1&#125;--&#123;2&#125;"</span>.format(names[i],ages[i],jobs[i]))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">rapt--18--stu</span></span><br><span class="line"><span class="string">azure--19--pro</span></span><br><span class="line"><span class="string">linux--50--opt</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>推导式创建序列：推导式是从一个或多个迭代器快速创建序列的一种方法，它可以将循环和条件判断结合，从而简化代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表推导式</span></span><br><span class="line"><span class="comment"># [表达式 for item in 可迭代对象 if 条件判断]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">20</span>) <span class="keyword">if</span> x % <span class="number">5</span> == <span class="number">0</span>]</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[a <span class="keyword">for</span> a <span class="keyword">in</span> <span class="string">'abcdef'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">cells = [(row, col) <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> cells:</span><br><span class="line">    print(cell)</span><br><span class="line"><span class="comment"># (1,1) to (9,9)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典推导式 </span></span><br><span class="line"><span class="comment"># &#123;key_exp:value_exp for 表达式 in 可迭代对象&#125;</span></span><br><span class="line">my_text = <span class="string">'i love programming, i love computers'</span></span><br><span class="line">char_count = &#123;c:my_text.count(c) <span class="keyword">for</span> c <span class="keyword">in</span> my_text&#125;</span><br><span class="line">print(char_count)</span><br><span class="line"><span class="comment"># &#123;'i': 3, ' ': 5, 'l': 2, 'o': 4, 'v': 2, 'e': 3, 'p': 2, 'r': 3, 'g': 2, 'a': 1, 'm': 3, 'n': 1, ',': 1, 'c': 1, 'u': 1, 't': 1, 's': 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集合推导式 -&gt; 没有key的字典</span></span><br><span class="line"><span class="comment">#&#123;表达式 for item in 可迭代对象 if 条件判断&#125;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">if</span> x%<span class="number">9</span> == <span class="number">0</span>&#125;</span><br><span class="line">&#123;<span class="number">99</span>, <span class="number">36</span>, <span class="number">72</span>, <span class="number">9</span>, <span class="number">45</span>, <span class="number">81</span>, <span class="number">18</span>, <span class="number">54</span>, <span class="number">90</span>, <span class="number">27</span>, <span class="number">63</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成器推导式：生成元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">if</span> x%<span class="number">9</span> == <span class="number">0</span>)</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x7fddcf259e50</span>&gt;</span><br><span class="line"><span class="comment">#提示“一个生成器对象，可见元组没有推导式</span></span><br><span class="line">gnt = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">if</span> x % <span class="number">9</span> == <span class="number">0</span>)</span><br><span class="line">print(tuple(gnt))</span><br><span class="line"><span class="comment">#(9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99)</span></span><br><span class="line"><span class="comment">#生成器是可迭代对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gnt = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">if</span> x%<span class="number">9</span> == <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> gnt:</span><br><span class="line">print(x, end = <span class="string">' '</span> )</span><br></pre></td></tr></table></figure></li></ul><h2 id="小练习：多彩同心圆"><a href="#小练习：多彩同心圆" class="headerlink" title="小练习：多彩同心圆"></a>小练习：多彩同心圆</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">my_colors = (<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>, <span class="string">"yellow"</span>)</span><br><span class="line">t = turtle.Pen()</span><br><span class="line">t.width(<span class="number">5</span>)</span><br><span class="line">t.speed(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    t.penup()</span><br><span class="line">    t.goto(<span class="number">0</span>,- i * <span class="number">10</span>)</span><br><span class="line">    t.pendown()</span><br><span class="line">    t.color(my_colors[i % len(my_colors)])</span><br><span class="line">    t.circle(<span class="number">15</span> + i * <span class="number">10</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><p>​            </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;控制语句&quot;&gt;&lt;a href=&quot;#控制语句&quot; class=&quot;headerlink&quot; title=&quot;控制语句&quot;&gt;&lt;/a&gt;控制语句&lt;/h1&gt;&lt;h2 id=&quot;选择结构：&quot;&gt;&lt;a href=&quot;#选择结构：&quot; class=&quot;headerlink&quot; title=&quot;选择结构：&quot;&gt;&lt;/a&gt;选择结构：&lt;/h2&gt;&lt;h4 id=&quot;单分支选择结构：&quot;&gt;&lt;a href=&quot;#单分支选择结构：&quot; class=&quot;headerlink&quot; title=&quot;单分支选择结构：&quot;&gt;&lt;/a&gt;单分支选择结构：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if 条件表达式(逻辑，关系，算术)，注意缩进。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;num = input(&lt;span class=&quot;string&quot;&gt;&quot;please input a number&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; int(num)&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(num)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://raptazure.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Max Subsequnce Sum</title>
    <link href="https://raptazure.github.io/2019/11/05/Max-Seq/"/>
    <id>https://raptazure.github.io/2019/11/05/Max-Seq/</id>
    <published>2019-11-04T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.666Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>给定N个整数的序列<em>{A1,A2, … ,An}</em>，求函数的最大值：</p><script type="math/tex; mode=display">\ f(x) = \max\{0,\sum\limits_{k=1}^{n}Ak \}</script><a id="more"></a></li></ul><p>1.最暴力：把所有连续子列和都算出来，从中找最大的那个。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubseqSum1</span> <span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ThisSum,Maxsum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="comment">//i为子列左端位置，j为子列右端位置，ThisSum为A[i]到A[j]子列和</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( j = i; j &lt; N; j++) &#123;</span><br><span class="line">            ThisSum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= j; k++)</span><br><span class="line">                ThisSum += a[k];</span><br><span class="line">            <span class="keyword">if</span> (ThisSum &gt; Maxsum)</span><br><span class="line">                Maxsum = ThisSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Maxsum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   时间复杂度为O(n^3^) —-三层循环嵌套  其实当知道从i到j和的时候，要加上下一个j时没有必要从头往后加，可加一个元素。</p><p>2.省略k循环：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubseqSum2</span> <span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ThisSum, Maxsum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        ThisSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( j = i; j &lt; N; j++) &#123;</span><br><span class="line">            <span class="comment">//对于相同的i，不同的j，在j-1次循环基础累加1即可</span></span><br><span class="line">            ThisSum += a[j];</span><br><span class="line">            <span class="keyword">if</span> (ThisSum &gt; Maxsum)</span><br><span class="line">               Maxsum = ThisSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Maxsum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​      时间复杂度为O(n2）—-&gt;  可否改进为O(nlogn)</p><p>3.分治算法：</p><p>​     把一个复杂的问题切分成很多小块，然后分头解决他们，最后合并结果。把数组从中间一分为二，递归地解决左右两边的问题。但还要考虑跨越边界的子列和。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归分成两份，分别求每个分割后最大子列和，时间复杂度为 O(n*logn)</span></span><br><span class="line"><span class="comment">/* 返回三者中最大值*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max3</span><span class="params">(<span class="keyword">int</span> A,<span class="keyword">int</span> B,<span class="keyword">int</span> C)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (A&gt;B)?((A&gt;C)?A:C):((B&gt;C)?B:C);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DivideAndConquer</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*递归结束条件：子列只有一个数字*/</span></span><br><span class="line">    <span class="comment">// 当该数为正数时，最大子列和为其本身</span></span><br><span class="line">    <span class="comment">// 当该数为负数时，最大子列和为 0</span></span><br><span class="line">    <span class="keyword">if</span>(left == right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> &lt; a[left])  </span><br><span class="line">            <span class="keyword">return</span> a[left];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 分别递归找到左右最大子列和*/</span> </span><br><span class="line">    <span class="keyword">int</span> center = (left+right)/<span class="number">2</span>; </span><br><span class="line">    <span class="keyword">int</span> MaxLeftSum = DivideAndConquer(a,left,center);</span><br><span class="line">    <span class="keyword">int</span> MaxRightSum = DivideAndConquer(a,center+<span class="number">1</span>,right);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 再分别找左右跨界最大子列和*/</span></span><br><span class="line">    <span class="keyword">int</span> MaxLeftBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> LeftBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=center;i&gt;=left;i--)&#123;  <span class="comment">//应该从边界出发向左边找</span></span><br><span class="line">        LeftBorderSum += a[i];</span><br><span class="line">        <span class="keyword">if</span>(MaxLeftBorderSum &lt; LeftBorderSum)</span><br><span class="line"> MaxLeftBorderSum = LeftBorderSum;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> MaXRightBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> RightBorderSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=center+<span class="number">1</span>;i&lt;=right;i++)&#123;  <span class="comment">// 从边界出发向右边找</span></span><br><span class="line">        RightBorderSum += a[i];</span><br><span class="line">        <span class="keyword">if</span>(MaXRightBorderSum &lt; RightBorderSum)</span><br><span class="line">            MaXRightBorderSum = RightBorderSum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*最后返回分解的左边最大子列和，右边最大子列和，和跨界最大子列和三者中最大的数*/</span></span><br><span class="line"><span class="keyword">return</span> Max3(MaxLeftSum,MaxRightSum,MaXRightBorderSum+MaxLeftBorderSum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubseqSum3</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DivideAndConquer(a,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.在线处理（贪心算法）：</p><p>​      不从整体最优上考虑而是求出局部最优解，只关心子列和当前的大小，如果临时和加上一个负数，则置临时和为0。时间复杂度为O(n)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubseqSum4</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tmpSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpSum+=a[i];</span><br><span class="line">        <span class="keyword">if</span>(tmpSum&lt;<span class="number">0</span>)</span><br><span class="line">            tmpSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (max&lt;tmpSum)</span><br><span class="line">            max=tmpSum;            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;给定N个整数的序列&lt;em&gt;{A1,A2, … ,An}&lt;/em&gt;，求函数的最大值：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\ f(x) = \max\{0,\sum\limits_{k=1}^{n}Ak \}&lt;/script&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Algorithms" scheme="https://raptazure.github.io/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>Python Sequence</title>
    <link href="https://raptazure.github.io/2019/11/05/Python-Basics02/"/>
    <id>https://raptazure.github.io/2019/11/05/Python-Basics02/</id>
    <published>2019-11-04T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><ul><li>序列是一种数据存储方式，用来存储一系列的数据。在内存中，序列就是一块用来存放多个连续值的内存空间。序列中存储的是对象的地址，而不是对象的值，同时序列本身也是一个对象。Python中常用的序列结构有：字符串，列表，元组，集合。</li></ul><a id="more"></a><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h4 id="基本特点："><a href="#基本特点：" class="headerlink" title="基本特点："></a>基本特点：</h4><ul><li><p>字符串的本质是字符序列。Python的字符串是不可变的，我们无法对原字符串做任何修改，但是可以将字符串的一部分复制到新创建的字符串，达到“看起来修改”的效果。</p></li><li><p>Python不支持单字符类型，单字符也是作为一个字符串使用的</p></li></ul><h4 id="字符串编码："><a href="#字符串编码：" class="headerlink" title="字符串编码："></a>字符串编码：</h4><ul><li><p>Python3 支持Unicode，可以表示世界上任何书面语言的字符，Python3 的字符默认就是16位Unicode编码，ASCII码是Unicode编码的子集。</p></li><li><p>使用<code>ord()</code>可以把字符转换为对应的Unicode码，使用<code>chr()</code>可以把十进制数字转换为对应的字符。</p></li></ul><h4 id="引号创建字符串："><a href="#引号创建字符串：" class="headerlink" title="引号创建字符串："></a>引号创建字符串：</h4><ul><li>可通过单引号或双引号创建字符串，根据情况使用两种引号。</li><li>连续三个单(双)引号，可以创建多行字符串。</li></ul><h4 id="空字符串和len-函数："><a href="#空字符串和len-函数：" class="headerlink" title="空字符串和len() 函数："></a>空字符串和len() 函数：</h4><ul><li>Python允许空字符串的存在，不包含任何字符且长度为0，例如<code>c=‘’</code></li><li>len()用于计算字符串有多少字符</li></ul><h4 id="转义字符："><a href="#转义字符：" class="headerlink" title="转义字符："></a>转义字符：</h4><ul><li><p>使用<code>\+特殊字符</code>实现换行，回车，退格，制表等</p></li><li><p><code>\续行符</code> <code>\\反斜杠</code> <code>\&#39;单引号</code> <code>\&quot;双引号</code> (和C相似)</p></li></ul><h4 id="字符串操作："><a href="#字符串操作：" class="headerlink" title="字符串操作："></a>字符串操作：</h4><ul><li>拼接：可以使用+将多个字符串拼接起来，如<code>”aa“+”bb“+”cc“</code>，形成一个新字符串（新对象），如果+两边类型不同，会输出异常。因为使用+会生成新字符串对象，所以更推荐使用join()函数，因为此函数在拼接前会计算所有字符串长度，然后再逐一拷贝，仅新建一次对象。</li><li>复制：使用<em>实现复制，比如`“–” </em> 3`</li><li>不换行打印：调用print时会自动打印换行符，通过<code>end=“字符串”</code>进行改变。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"rapt"</span>,end=<span class="string">' '</span>)</span><br><span class="line">print(<span class="string">"azure"</span>,end=<span class="string">'##'</span>)</span><br></pre></td></tr></table></figure><ul><li><p>从控制台读取字符串：使用<code>input()</code>从控制台读取键盘输入的内容。</p></li><li><p><code>str()</code>实现数字转型字符串：比如<code>str(3.14e2)</code>&gt;&gt;&gt;<code>314.0</code> ,调用<code>print()</code>函数时，解释器自动调用量str()将非字符串的对象转成了字符串。</p></li><li><p>使用[]提取字符：字符串的本质是字符序列，可以在[]里指定偏移量(索引)来提取该位置的单个字符，可以进行反向搜索。</p><p>从左到右：<code>0</code> -&gt; <code>len(str)-1</code>          从右到左：<code>-len(str)</code> &lt;- <code>-1</code></p></li><li><p><code>replace()</code>实现字符串“替换”：字符串“不可变”，替换只能通过创建新字符串对象，原来的变量指向新字符串来实现。比如<code>a=a.replace(‘c’,‘a’)</code></p></li><li><p><code>slice()</code>实现字符串切片：提取子字符串，格式<code>[start:end:step]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">3.7</span><span class="number">.4</span> (default, Oct  <span class="number">4</span> <span class="number">2019</span>, <span class="number">06</span>:<span class="number">57</span>:<span class="number">26</span>) </span><br><span class="line">[GCC <span class="number">9.2</span><span class="number">.0</span>] on linux</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"abcdefghijklmn"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>]</span><br><span class="line"><span class="string">'c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">5</span>:<span class="number">1</span>]</span><br><span class="line"><span class="string">'bcde'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"><span class="string">'bcde'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>]</span><br><span class="line"><span class="string">'bd'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:]</span><br><span class="line"><span class="string">'abcdefghijklmn'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:]</span><br><span class="line"><span class="string">'cdefghijklmn'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">2</span>]</span><br><span class="line"><span class="string">'ab'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-3</span>:]</span><br><span class="line"><span class="string">'lmn'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-8</span>:<span class="number">-3</span>]</span><br><span class="line"><span class="string">'ghijk'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">-1</span>]</span><br><span class="line"><span class="string">'nmlkjihgfedcba'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">400</span>]</span><br><span class="line"><span class="string">'cdefghijklmn'</span></span><br></pre></td></tr></table></figure></li><li><p><code>split()</code>分割和<code>join()</code>合并：split可以基于指定分隔符将字符串分割成多个子字符串（存储到列表中），如果不指定分隔符，默认使用空白字符(制表，换行，空格)。<code>join()</code>作用相反，用于合并一系列子字符串。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"2B or not 2B"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.split()</span><br><span class="line">[<span class="string">'2B'</span>, <span class="string">'or'</span>, <span class="string">'not'</span>, <span class="string">'2B'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.split(<span class="string">'2B'</span>)</span><br><span class="line">[<span class="string">''</span>, <span class="string">' or not '</span>, <span class="string">''</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a =[<span class="string">"2B"</span>,<span class="string">"or"</span>,<span class="string">"not"</span>,<span class="string">"2B"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"*"</span>.join(a)</span><br><span class="line"><span class="string">'2B*or*not*2B'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">" "</span>.join(a)</span><br><span class="line"><span class="string">'2B or not 2B'</span></span><br></pre></td></tr></table></figure><ul><li><p>一个小测试：使用join与+拼接字符串的不同效率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">a = <span class="string">""</span></span><br><span class="line">time01 = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">    a += <span class="string">"hit"</span>    <span class="comment">#创建1000000个对象</span></span><br><span class="line">time02 = time.time()</span><br><span class="line">print(time02-time01)</span><br><span class="line"></span><br><span class="line">time03 = time.time()</span><br><span class="line">li = []           <span class="comment">#只有一个对象</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">    li.append(<span class="string">"hit"</span>)</span><br><span class="line">a = <span class="string">""</span>.join(li)</span><br><span class="line">time04 = time.time()</span><br><span class="line">print(time04-time03)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0.16577386856079102</span></span><br><span class="line"><span class="comment">#0.11212515830993652</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串驻留机制和字符串比较："><a href="#字符串驻留机制和字符串比较：" class="headerlink" title="字符串驻留机制和字符串比较："></a>字符串驻留机制和字符串比较：</h4><ul><li>字符串驻留：仅保存一份相同且不可变字符串的方法，不同的值被存放在字符串驻留池中。Python支持字符串驻留机制，对于符合标识符规则(字母，下划线，数字)的字符串会启用字符串驻留机制。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"abd_22"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"abd_22"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span>  <span class="comment"># 同一个对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">"dd#"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="string">"dd#"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c <span class="keyword">is</span> d</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li><p>成员操作符：<code>in/not in</code>判断某个子字符串是否存在字符串中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"23333"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"2"</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串常用方法："><a href="#字符串常用方法：" class="headerlink" title="字符串常用方法："></a>字符串常用方法：</h4><ul><li>查找：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"this is a simple test"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(a)</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.startswith(<span class="string">"this"</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.endswith(<span class="string">"est"</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.find(<span class="string">" "</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.rfind(<span class="string">'s'</span>)</span><br><span class="line"><span class="number">19</span>   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="string">"s"</span>)</span><br><span class="line"><span class="number">4</span>       <span class="comment">#计数出现次数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.isalnum()</span><br><span class="line"><span class="literal">False</span>   <span class="comment">#是否全是字母和数字</span></span><br></pre></td></tr></table></figure><ul><li>去除首尾信息：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"#this is a test#"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.strip(<span class="string">"#"</span>)</span><br><span class="line"><span class="string">'this is a test'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"*h*i*t*"</span>.rstrip(<span class="string">"*"</span>)</span><br><span class="line"><span class="string">'*h*i*t'</span>  <span class="comment">#去掉了右边的*</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"       hit     "</span>.strip()</span><br><span class="line"><span class="string">'hit'</span></span><br></pre></td></tr></table></figure><ul><li>大小写转换：以下都产生了新字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'hit wh'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.capitalize()</span><br><span class="line"><span class="string">'Hit wh'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.title()</span><br><span class="line"><span class="string">'Hit Wh'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.upper()</span><br><span class="line"><span class="string">'HIT WH'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.swapcase()</span><br><span class="line"><span class="string">'HIT WH'</span>  <span class="comment">#所有字母大小写转换</span></span><br></pre></td></tr></table></figure><ul><li>格式排版：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'HIT'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.center(<span class="number">10</span>)</span><br><span class="line"><span class="string">'   HIT    '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.center(<span class="number">9</span>,<span class="string">'#'</span>)</span><br><span class="line"><span class="string">'###HIT###'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.ljust(<span class="number">10</span>,<span class="string">'#'</span>)</span><br><span class="line"><span class="string">'HIT#######'</span></span><br></pre></td></tr></table></figure><ul><li>其他方法：<ul><li><code>isalnum()</code>是否为字母或数字</li><li><code>isalpha()</code>检测字符串是否只由字母组成(含汉字) -&gt;Unicode</li><li><code>isdigit()</code>检测是否只由数字组成</li><li><code>isspace()</code>检测是否为空白字符</li><li><code>isupper()</code>是否为大写字母</li><li><code>islower()</code>是否为小写字母</li></ul></li></ul><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><ul><li><p><code>format()</code>基本用法：可以通过{索引}或者{参数名}直接映射参数值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"my name is: &#123;0&#125;. my age is: &#123;1&#125;"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.format(<span class="string">"raptazure"</span>,<span class="number">18</span>)</span><br><span class="line"><span class="string">'my name is: raptazure. my age is: 18'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.format(<span class="string">"r"</span>,<span class="number">2</span>)</span><br><span class="line"><span class="string">'my name is: r. my age is: 2'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"my name is &#123;0&#125; and &#123;0&#125; is good."</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.format(<span class="string">"r"</span>)</span><br><span class="line"><span class="string">'my name is r and r is good.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">"name:&#123;name&#125;  age:&#123;age&#125;"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.format(age = <span class="number">19</span>, name = <span class="string">'r'</span>)</span><br><span class="line"><span class="string">'name:r  age:19'</span></span><br></pre></td></tr></table></figure></li><li><p>填充与对齐：^ &lt; &gt; 分别是居中，左对齐，右对齐，后面带宽度。:后带填充的字符，只能是一个字符，不指定默认用空格填充。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"&#123;:*&gt;8&#125;"</span>.format(<span class="string">'2333'</span>)</span><br><span class="line"><span class="string">'****2333'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"I am &#123;0&#125;,I like &#123;1:*^8&#125;"</span>.format(<span class="string">"R"</span>,<span class="string">"233"</span>)</span><br><span class="line"><span class="string">'I am R,I like **233***'</span></span><br></pre></td></tr></table></figure><h4 id="数字格式化："><a href="#数字格式化：" class="headerlink" title="数字格式化："></a>数字格式化：</h4><ul><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"I am &#123;0&#125; and my number is &#123;1:.2f&#125;"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.format(<span class="string">"R"</span>,<span class="number">23333.5566</span>)</span><br><span class="line"><span class="string">'I am R and my number is 23333.56'</span></span><br><span class="line"><span class="comment"># &#123;:,&#125; 三位用，隔开</span></span><br><span class="line"><span class="comment"># &#123;:.2e&#125; 指数记法</span></span><br><span class="line"><span class="comment"># &#123;:.2%&#125; 百分比格式</span></span><br><span class="line"><span class="comment"># &#123;:+.2f&#125; 带符号保留小数点后两位</span></span><br><span class="line"><span class="comment"># &#123;:x&lt;4d&#125; 数字补x，填充右边，宽度为4</span></span><br><span class="line"><span class="comment"># &#123;:10d&#125; 默认右对齐，宽度为10</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="可变字符串："><a href="#可变字符串：" class="headerlink" title="可变字符串："></a>可变字符串：</h4><ul><li>Python中的字符串属于不可变对象，不可原地修改，修改其中的值只能创建新字符串对象。如果确实需要原地修改字符串，可用<code>io.StringIO</code>对象或<code>array</code>模块。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> io</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"rapt"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sio = io.StringIO(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sio</span><br><span class="line">&lt;_io.StringIO object at <span class="number">0x7f5e56094870</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sio.getvalue()</span><br><span class="line"><span class="string">'rapt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sio.seek(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sio.write(<span class="string">'9'</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sio.getvalue()</span><br><span class="line"><span class="string">'rap9'</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h4 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h4><ul><li>列表是用于存储任意数目，任意类型的数据集合。列表中元素可以各不相同，可为任意类型。</li><li>常用方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">list.append(x)  <span class="comment">#将元素x加到list尾部</span></span><br><span class="line">list.extend(aList) <span class="comment">#将列表aList所有元素加到list尾部</span></span><br><span class="line">list.insert(index,x) <span class="comment">#在list指定位置index插入元素x</span></span><br><span class="line">list.remove(x)  <span class="comment">#在list中删除首次出现的指定元素x</span></span><br><span class="line">list.pop(index) <span class="comment">#删除并返回list指定index处元素，默认最后一个元素</span></span><br><span class="line">list.clear()  <span class="comment">#删除列表所有元素，并不是删除列表对象</span></span><br><span class="line">list.index(x)  <span class="comment">#返回第一个x的索引位置，若不存在x则抛出异常</span></span><br><span class="line">list.count(x)  <span class="comment">#返回指定元素x在list中出现次数</span></span><br><span class="line">len(list)   <span class="comment">#返回列表list中包含元素个数</span></span><br><span class="line">list.reverse() <span class="comment">#所有元素原地翻转</span></span><br><span class="line">list.sort()  <span class="comment">#所有元素原地排序</span></span><br><span class="line">list.copy()  <span class="comment">#返回列表对象的浅拷贝</span></span><br></pre></td></tr></table></figure><ul><li>Python的列表大小可变，根据需要随时增加或者缩小</li><li>字符串和列表都是序列类型，一个字符串是一个字符序列，一个列表是任何元素的序列，字符串方法很多在列表中同样适用。</li></ul><h4 id="列表的创建："><a href="#列表的创建：" class="headerlink" title="列表的创建："></a>列表的创建：</h4><ul><li>基本语法[]创建：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">233</span>,<span class="number">23333</span>,<span class="string">'r'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">233</span>, <span class="number">23333</span>, <span class="string">'r'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">90</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">233</span>, <span class="number">23333</span>, <span class="string">'r'</span>, <span class="number">90</span>]</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><p><code>list()</code>可以将任何可迭代数据转化为列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = list()</span><br><span class="line"><span class="comment"># range()创建列表：range(start,end,step)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = list(range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = list(range(<span class="number">15</span>,<span class="number">3</span>,<span class="number">-2</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">15</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = list(<span class="string">'rapt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">'r'</span>, <span class="string">'a'</span>, <span class="string">'p'</span>, <span class="string">'t'</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>推导式生成列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环创建多个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment"># 通过if过滤元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>) <span class="keyword">if</span> x%<span class="number">9</span> == <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">18</span>, <span class="number">36</span>, <span class="number">54</span>, <span class="number">72</span>, <span class="number">90</span>, <span class="number">108</span>, <span class="number">126</span>, <span class="number">144</span>, <span class="number">162</span>, <span class="number">180</span>, <span class="number">198</span>]</span><br></pre></td></tr></table></figure></li></ul><h4 id="列表元素的增加与删除"><a href="#列表元素的增加与删除" class="headerlink" title="列表元素的增加与删除"></a>列表元素的增加与删除</h4><ul><li><p>列表增删元素时，会自动进行内存管理。由于在列表中间操作会涉及列表元素的大量移动，效率较低。所以一般只在列表尾部添删元素，可以提高列表的操作效率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># append()原地修改列表对象，真正在尾部添加新元素，速度最快</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">20</span>,<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">99</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">20</span>, <span class="number">10</span>, <span class="number">99</span>]</span><br><span class="line"><span class="comment"># +创建新列表对象，将原列表与新列表对象元素依次复制到新列表</span></span><br><span class="line"><span class="comment"># 对象中，涉及较多复制操作，对大量元素不建议使用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">233</span>,<span class="number">666</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">140040216615824</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = a + [<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">140040216502752</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">233</span>, <span class="number">666</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># extend()将目标列表所有元素添加到尾部，不创建新对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">233</span>,<span class="number">2333</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend([<span class="number">233333</span>,<span class="number">233333</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">233</span>, <span class="number">2333</span>, <span class="number">233333</span>, <span class="number">233333</span>]</span><br><span class="line"><span class="comment"># insert()将指定元素插入到列表对象任意位置，插入位置后的所# 有元素移动。类似发生这种移动的函数还有remove(),pop(),</span></span><br><span class="line"><span class="comment"># del，涉及大量元素时效率低</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">'r'</span>,<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">1</span>,<span class="number">233</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">'r'</span>, <span class="number">233</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用乘法可以扩展(重复)列表生成新列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># del可以删除指定位置元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">233</span>,<span class="number">2333</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">233</span>]</span><br><span class="line"><span class="comment"># pop()删除并返回指定位置元素，默认位置为最后一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'r'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="string">'r'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># remove()删除首次出现的指定元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">555</span>,<span class="number">233</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">555</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">233</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></li></ul><h4 id="列表元素的访问和计数："><a href="#列表元素的访问和计数：" class="headerlink" title="列表元素的访问和计数："></a>列表元素的访问和计数：</h4><ul><li><p>通过索引直接访问元素。</p></li><li><p><code>index(value,start,end)</code>获得指定元素在列表中首次出现的索引，start和end指定了搜索的范围，默认从头到尾。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'r'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="string">'r'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><p><code>count()</code>获取指定元素在列表中出现次数。</p></li><li><p>成员资格判断：可以用<code>count()</code>或者<code>in</code>。</p></li></ul><h4 id="列表切片操作："><a href="#列表切片操作：" class="headerlink" title="列表切片操作："></a>列表切片操作：</h4><ul><li>和字符串类似，切片适用于列表，元组，字符串等</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:]</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">3</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">20</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">[<span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:]</span><br><span class="line">[<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">2</span>]</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-5</span>:<span class="number">-3</span>]</span><br><span class="line">[<span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">-1</span>]</span><br><span class="line">[<span class="number">60</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>]</span><br><span class="line"><span class="comment"># 切片包含头不包含尾</span></span><br></pre></td></tr></table></figure><h4 id="列表遍历："><a href="#列表遍历：" class="headerlink" title="列表遍历："></a>列表遍历：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> listObj:</span><br><span class="line">    print(obj)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># ps:以下操作无法实现列表元素复制</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span><span class="string">'r'</span>]</span><br><span class="line">list2 = list1</span><br><span class="line"><span class="comment"># 只是将list2也指向了列表对象，也就是说list1和list2持有地址值相</span></span><br><span class="line"><span class="comment"># 同，列表对象本身的元素并没有复制。</span></span><br></pre></td></tr></table></figure><h4 id="列表排序："><a href="#列表排序：" class="headerlink" title="列表排序："></a>列表排序：</h4><ul><li><p>直接修改原列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">20</span>,<span class="number">25</span>,<span class="number">23</span>,<span class="number">233</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">20</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">233</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort(reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">233</span>, <span class="number">25</span>, <span class="number">23</span>, <span class="number">20</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">20</span>, <span class="number">233</span>, <span class="number">25</span>, <span class="number">23</span>]</span><br></pre></td></tr></table></figure></li><li><p>新建列表的排序：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">20</span>,<span class="number">3</span>,<span class="number">233</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">140399227782160</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = sorted(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">233</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">140399201146032</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = sorted(a,reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">233</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li><p><code>reversed()</code>返回迭代器：也支持逆序排列，不对原列表做任何修改，只是返回一个逆序排列的迭代器对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">40</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = reversed(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;list_reverseiterator object at <span class="number">0x7fb13c84dd50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(c)</span><br><span class="line">[<span class="number">40</span>, <span class="number">30</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"><span class="comment"># 迭代器指针从后向前移动，迭代对象在第一次时遍历结束</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(c)</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li></ul><h4 id="其他内置函数："><a href="#其他内置函数：" class="headerlink" title="其他内置函数："></a>其他内置函数：</h4><ul><li><code>max()</code> <code>min()</code>用于返回列表中最大/小值</li><li><code>sum()</code>对数值型所有元素求和</li></ul><h4 id="多维列表："><a href="#多维列表：" class="headerlink" title="多维列表："></a>多维列表：</h4><ul><li><p>二维列表可以存储表格的数据，列表的元素也可以是列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># IDLE</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [</span><br><span class="line">[<span class="string">'r'</span>,<span class="number">18</span>],</span><br><span class="line">[<span class="string">'a'</span>,<span class="number">17</span>],</span><br><span class="line">[<span class="string">'p'</span>,<span class="number">16</span>],</span><br><span class="line">[<span class="string">'t'</span>,<span class="number">15</span>]</span><br><span class="line">]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]</span><br><span class="line">[<span class="string">'r'</span>, <span class="number">18</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="string">'r'</span></span><br><span class="line"><span class="comment"># VS Code</span></span><br><span class="line">a = [</span><br><span class="line">[<span class="string">'r'</span>,<span class="number">18</span>],</span><br><span class="line">[<span class="string">'a'</span>,<span class="number">17</span>],</span><br><span class="line">[<span class="string">'p'</span>,<span class="number">16</span>],</span><br><span class="line">[<span class="string">'t'</span>,<span class="number">15</span>]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        print(a[i][j],end = <span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br><span class="line">    <span class="comment"># 打印完一行后换行</span></span><br><span class="line"></span><br><span class="line">‘’‘</span><br><span class="line">r<span class="number">18</span></span><br><span class="line">a<span class="number">17</span></span><br><span class="line">p<span class="number">16</span></span><br><span class="line">t<span class="number">15</span></span><br><span class="line">’‘’</span><br></pre></td></tr></table></figure></li></ul><h2 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h2><h4 id="基本概念：-1"><a href="#基本概念：-1" class="headerlink" title="基本概念："></a>基本概念：</h4><ul><li><p>元组属于不可变序列，不可修改元组中的元素。元组支持：</p><p>索引访问，切片操作，连接操作，成员关系操作，比较运算操作，计数操作比如<code>len() sum() max() min()</code></p></li></ul><h4 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h4><ul><li><p>通过<code>()</code>, 小括号可以省略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; a = 1,</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"># 注意单个元素的情况</span></span><br><span class="line">&gt;&gt;&gt; a = (1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>通过<code>tuple(可迭代的对象)</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = tuple()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = tuple(range(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = tuple([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = tuple(<span class="string">'r'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="string">'r'</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> b  <span class="comment">#删除</span></span><br><span class="line"><span class="comment"># tuple()可接受列表，字符串，其他序列类型，迭代器-&gt;元组</span></span><br><span class="line"><span class="comment"># list()可接受元组，字符串，其他序列类型，迭代器-&gt;列表</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="元素访问与计数："><a href="#元素访问与计数：" class="headerlink" title="元素访问与计数："></a>元素访问与计数：</h4><ul><li><p>元组元素不可修改 -  immutable</p></li><li><p>访问方法与列表相同，不过仍然返回元组对象。</p></li><li><p>列表关于排序的方法list.sorted()是修改原列表对象，元组没有该方法，如果要对元组排序，只能使用内置函数sorted(tupleObj)，并生成新的列表对象。</p></li><li><p><code>zip()</code>将多个列表对应位置元素组合为元组，并返回这个zip对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(a)</span><br><span class="line">[<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = [<span class="number">233</span>,<span class="number">2333</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = [<span class="number">555</span>,<span class="number">666</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = zip(b,c,d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e</span><br><span class="line">&lt;zip object at <span class="number">0x7fc3c2f0e1e0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(e)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">233</span>, <span class="number">555</span>), (<span class="number">5</span>, <span class="number">2333</span>, <span class="number">666</span>)]</span><br></pre></td></tr></table></figure></li></ul><h4 id="生成器推导式创建元组："><a href="#生成器推导式创建元组：" class="headerlink" title="生成器推导式创建元组："></a>生成器推导式创建元组：</h4><ul><li><p>形式上与列表推导式类似，只是使用小括号。列表推导式生成列表，生成器推导式生成的不是列表也不是元组，而是一个生成器对象。</p></li><li><p>可以通过生成器对象转化为列表或元组，也可使用生成器对象的<code>__next__()</code>方法进行遍历，或直接作为迭代器对象使用。不管以什么方式使用，元素访问(指针移动)结束后，如果需要重新访问其中元素则需重新创建该生成器对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = (x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x7fc3c37d9c50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple(s)</span><br><span class="line">(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(s)</span><br><span class="line"><span class="comment"># 只能访问一次元素</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = (x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li>元组核心特点：不可变序列</li><li>元组访问和处理速度快于列表</li><li>与整数和字符串一样，元组可作字典的键，列表不能作为字典的键使用。</li></ul><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h4 id="基本概念：-2"><a href="#基本概念：-2" class="headerlink" title="基本概念："></a>基本概念：</h4><ul><li><p>字典是“键值对”的无序可变序列，字典中每个元素都是一个“键值对”，包含：“键对象”和“值对象”。可以通过“键对象”实现快速获取，删除，更新对应的“值对象”。</p></li><li><p>列表中通过下标数字找到对应对象。字典中通过“键对象”找到对应的“值对象”。“键”是任意的不可变数据，比如：整数，浮点数，字符串，元组，但是列表，字典，集合这些可变对象不可作为“键”。</p></li><li><p>“键”不可重复，“值”可以是任意数据，可重复。</p></li><li><p>定义方式：<code>a = {&#39;name&#39;:&#39;rapt&#39;, &#39;age&#39;:18}</code></p></li></ul><h4 id="字典的创建："><a href="#字典的创建：" class="headerlink" title="字典的创建："></a>字典的创建：</h4><ul><li><p>可通过<code>{}</code> <code>dict()</code>创建字典对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = dict(name = <span class="string">'rapt'</span>, age = <span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'rapt'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = dict([(<span class="string">'name'</span>,<span class="string">'rapt'</span>), (<span class="string">'age'</span>,<span class="number">18</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'rapt'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="comment"># 创建空字典  c = &#123;&#125;    d = dict()</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>zip()</code>创建字典对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>k = [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'job'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v = [<span class="string">'rapt'</span>, <span class="string">'18'</span>, <span class="string">'student'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(zip(k,v))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'rapt'</span>, <span class="string">'age'</span>: <span class="string">'18'</span>, <span class="string">'job'</span>: <span class="string">'student'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>通过fromkeys创建值为空的字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = dict.fromkeys([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'job'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="literal">None</span>, <span class="string">'age'</span>: <span class="literal">None</span>, <span class="string">'job'</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="字典元素的访问："><a href="#字典元素的访问：" class="headerlink" title="字典元素的访问："></a>字典元素的访问：</h4><ul><li><p>通过[键]获得“值”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">'name'</span>:<span class="string">'rapt'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'job'</span>:<span class="string">'student'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">'name'</span>]</span><br><span class="line"><span class="string">'rapt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">'age'</span>]</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>通过<code>get()</code>方法获得“值”，若指定键不存在则返回None，也可设定指定键不存在时默认返回的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">'name'</span>:<span class="string">'rapt'</span>, <span class="string">'age'</span>:<span class="number">18</span>, <span class="string">'job'</span>:<span class="string">'student'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.get(<span class="string">'name'</span>)</span><br><span class="line"><span class="string">'rapt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a.get(<span class="string">'sex'</span>))</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.get(<span class="string">'sex'</span>,<span class="string">'Not Exist'</span>)</span><br><span class="line"><span class="string">'Not Exist'</span></span><br><span class="line"><span class="comment"># 列出所有键值对</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.items()</span><br><span class="line">dict_items([(<span class="string">'name'</span>, <span class="string">'rapt'</span>), (<span class="string">'age'</span>, <span class="number">18</span>), (<span class="string">'job'</span>, <span class="string">'student'</span>)])</span><br><span class="line"><span class="comment"># 列出所有键</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.keys()</span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'job'</span>])</span><br><span class="line"><span class="comment"># 列出所有值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.values()</span><br><span class="line">dict_values([<span class="string">'rapt'</span>, <span class="number">18</span>, <span class="string">'student'</span>])</span><br><span class="line"><span class="comment"># 键值对个数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(a)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment"># 检测key是否在字典中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"name"</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="字典元素添加，修改，删除："><a href="#字典元素添加，修改，删除：" class="headerlink" title="字典元素添加，修改，删除："></a>字典元素添加，修改，删除：</h4><ul><li>给字典新增“键值对”，若“键”已存在，则覆盖旧的键值对;如果“键”不存在，则新增“键值对”。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">'name'</span>:<span class="string">'rapt'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'job'</span>:<span class="string">'student'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">'address'</span>]=<span class="string">'HITwh'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">'age'</span>]=<span class="number">19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'rapt'</span>, <span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'job'</span>: <span class="string">'student'</span>, <span class="string">'address'</span>: <span class="string">'HITwh'</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><p>使用<code>update()</code>将新字典中所有键值对全部添加到旧字典对象上，若key有重复，则直接覆盖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">"name"</span>:<span class="string">'raptazure'</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.update(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'raptazure'</span>, <span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'job'</span>: <span class="string">'student'</span>, <span class="string">'address'</span>: <span class="string">'HITwh'</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>字典中元素的删除，可以使用<code>del()</code>方法，或者<code>clear()</code>删除所有键值对，<code>pop()</code>删除指定键值对，并返回对应的“值对象”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  &gt;&gt;&gt; a =&#123;<span class="string">"name"</span>:<span class="string">'rapt'</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">'job'</span>:<span class="string">'student'</span>&#125;</span><br><span class="line">  &gt;&gt;&gt; <span class="keyword">del</span>(a[<span class="string">'job'</span>])</span><br><span class="line">  &gt;&gt;&gt; a</span><br><span class="line">  &#123;<span class="string">'name'</span>: <span class="string">'rapt'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">  &gt;&gt;&gt; b = a.pop(<span class="string">'age'</span>)</span><br><span class="line">  &gt;&gt;&gt; b</span><br><span class="line">  <span class="number">18</span></span><br><span class="line">  &gt;&gt;&gt; a</span><br><span class="line">  &#123;<span class="string">'name'</span>: <span class="string">'rapt'</span>&#125;</span><br><span class="line"> &gt;&gt;&gt; a.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>popitem()</code>随机删除和返回该键值对，字典是“无序可变序列”，因此没有第一个元素和最后一个元素的概念。popitem弹出随机的项，因为字典中并没有有关顺序的概念。若想一个接一个地移除并处理项，这个方法很有效（不用首先获取键的列表）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a  = &#123;<span class="string">"name"</span>:<span class="string">'rapt'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'job'</span>:<span class="string">'student'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.popitem()</span><br><span class="line">(<span class="string">'job'</span>, <span class="string">'student'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'rapt'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.popitem()</span><br><span class="line">(<span class="string">'age'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'rapt'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="序列解包："><a href="#序列解包：" class="headerlink" title="序列解包："></a>序列解包：</h4><ul><li><p>序列解包可用于元组，列表，字典，方便对多个变量赋值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y,z = (<span class="number">20</span>,<span class="number">30</span>,<span class="number">233</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line"><span class="number">233</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(a,b,c) = (<span class="number">9</span>,<span class="number">8</span>,<span class="number">23</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[a,b,c] = [<span class="number">23</span>,<span class="number">233</span>,<span class="number">2333</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">233</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>序列解包用于字典时，默认对key进行操作，如果需对键值对进行操作，则需使用<code>items()</code>；如果需要对值进行操作，则需用<code>values()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="string">"name"</span>:<span class="string">'rapt'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'job'</span>:<span class="string">'student'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c = s</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'name'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">'age'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c = s.items()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="string">'name'</span>, <span class="string">'rapt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c = s.values()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="string">'student'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="表格数据使用字典和列表存储："><a href="#表格数据使用字典和列表存储：" class="headerlink" title="表格数据使用字典和列表存储："></a>表格数据使用字典和列表存储：</h4><div class="table-container"><table><thead><tr><th style="text-align:center">name</th><th style="text-align:center">age</th><th style="text-align:center">job</th><th style="text-align:center">city</th></tr></thead><tbody><tr><td style="text-align:center">rapt</td><td style="text-align:center">18</td><td style="text-align:center">student</td><td style="text-align:center">Beijing</td></tr><tr><td style="text-align:center">azure</td><td style="text-align:center">19</td><td style="text-align:center">boy</td><td style="text-align:center">Shanghai</td></tr><tr><td style="text-align:center">happy</td><td style="text-align:center">1</td><td style="text-align:center">girl</td><td style="text-align:center">Shenzhen</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">r1 = &#123;<span class="string">'name'</span>:<span class="string">'rapt'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'job'</span>:<span class="string">'student'</span>,<span class="string">'city'</span>:<span class="string">'Beijing'</span>&#125;</span><br><span class="line">r2 = &#123;<span class="string">'name'</span>:<span class="string">'azure'</span>,<span class="string">'age'</span>:<span class="number">19</span>,<span class="string">'job'</span>:<span class="string">'boy'</span>,<span class="string">'city'</span>:<span class="string">'Sahnghai'</span>&#125;</span><br><span class="line">r3 = &#123;<span class="string">'name'</span>:<span class="string">'happy'</span>,<span class="string">'age'</span>:<span class="number">1</span>,<span class="string">'job'</span>:<span class="string">'girl'</span>,<span class="string">'city'</span>:<span class="string">'Shenzhen'</span>&#125;</span><br><span class="line">table = [r1,r2,r3]</span><br><span class="line"><span class="comment">#获取第二行的job</span></span><br><span class="line">print(table[<span class="number">1</span>].get(<span class="string">"job"</span>))</span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line"><span class="comment">#打印表中所有job &amp; age</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(table)):</span><br><span class="line">print(table[i].get(<span class="string">'job'</span>),table[i].get(<span class="string">'age'</span>))</span><br></pre></td></tr></table></figure><h4 id="字典核心底层原理："><a href="#字典核心底层原理：" class="headerlink" title="字典核心底层原理："></a>字典核心底层原理：</h4><ul><li><p>字典对象的核心是散列表，散列表是一个稀疏数组（总是有空白元素的数组），数组的每个单词叫做bucket，每个bucket有两个部分：一个是键对象的引用，一个是值对象的引用。由于所有bucket结构和大小一致，可以通过偏移量来读取指定bucket。</p><p>|  0   | key1 | value1 |<br>| :—: | :—: | :——: |<br>|  1   |      |        |<br>|  2   | key2 | value2 |<br>|  3   |      |        |<br>|  4   |      |        |<br>|  5   | key4 | value4 |</p></li><li><p>将一个键值对放到字典的底层过程：假设字典a对象创建完后，数组长度为8，要把“name” = “rapt”这个键值对放到字典对象a中，首先计算键<code>&#39;name&#39;</code>的散列值<code>hash()</code>，由于数组长度为8，可以拿计算出的散列值最右边3位数字作为偏移量(若长度为32则6位6位取)，即100，十进制数字为4，查看偏移量4对应的bucket值是否为空，若空则放入键值对，若不空则向左取次右边3位作为偏移量，即-&gt;100-&gt;111，111十进制为7，再看偏移量为7的bucket是否为空，直到找到空的bucket将键值对放进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">'name'</span>] = <span class="string">'rapt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(hash(<span class="string">'name'</span>))</span><br><span class="line"><span class="string">'-0b10101110010111000010011110111010110011000011011001110111100100'</span></span><br></pre></td></tr></table></figure></li></ul><p>  Python根据散列表的拥挤程度扩容。如果数组有2/3已满，则会自动扩容以创建更大数组，将原内容拷贝到新数组中。</p><ul><li>根据key查找“键值对”的底层过程：当调用<code>a.get(&#39;name&#39;)</code>，就是根据key<code>&#39;name&#39;</code>找到键值对，从而找到值对象<code>&#39;rapt&#39;</code> 。首先仍要计算<code>‘name&#39;</code>对象的散列值，和存储的底层流程算法一致，也是依次取散列值的不同位置的数字。假设数组长度为8，拿出计算出的散列值的最右边3位数字作为偏移量，即100，十进制数字为4，查看偏移量4对应的bucket值是否为空，若空则返回None，若不空则将这个bucket的键对象计算对应散列值，与上次计算得出的散列值比较，如果相等则将对应值对象返回，如果不相等则再依次取其他几位数字，重新计算偏移量。依次取完后仍没有找到则返回None。</li></ul><h4 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h4><ul><li>键必须可散列<ul><li>数字，字符串，元组都可散列</li><li>自定义对象需支持以下三点：<ol><li>支持<code>hash()</code>函数</li><li>支持通过<code>__eq__()</code>方法检测相等性</li><li>若a==b为真，则<code>hash(a)=hash(b)</code>也为真</li></ol></li><li>字典在内存中开销巨大，典型的空间换时间</li></ul></li><li>key查询速度很快<ul><li>往字典中添加新建可能导致扩容，导致散列表中键的次序变化。因此不要在遍历字典的同时修改字典。</li></ul></li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h4 id="基本概念：-3"><a href="#基本概念：-3" class="headerlink" title="基本概念："></a>基本概念：</h4><ul><li>集合无序可变，元素不可重复，实际上底层是字典实现，集合所有元素都是字典中的键对象，因此是不能重复的。</li></ul><h4 id="集合的创建和删除："><a href="#集合的创建和删除：" class="headerlink" title="集合的创建和删除："></a>集合的创建和删除：</h4><ul><li><p>使用{}创建集合对象，并用<code>add()</code>方法添加元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.add(<span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>使用<code>set()</code>将列表，元组等可迭代对象转成集合。如果原数据中存在重复数据，则只保留一个。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &gt;&gt;&gt; a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'b'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = set(a)</span><br><span class="line">  &gt;&gt;&gt; b</span><br><span class="line">  &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="集合相关操作："><a href="#集合相关操作：" class="headerlink" title="集合相关操作："></a>集合相关操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="number">233</span>,<span class="number">666</span>,<span class="number">555</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">555</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="number">233</span>, <span class="number">666</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">set()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="string">'rapt'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="string">'rapt'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a|b  <span class="comment">#并集</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'rapt'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a&amp;b  <span class="comment">#交集</span></span><br><span class="line">&#123;<span class="string">'rapt'</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a-b  <span class="comment">#差集</span></span><br><span class="line">&#123;<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.union(b) <span class="comment">#并集</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'rapt'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.intersection(b) <span class="comment">#交集</span></span><br><span class="line">&#123;<span class="string">'rapt'</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.difference(b)  <span class="comment">#差集</span></span><br><span class="line">&#123;<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序列&quot;&gt;&lt;a href=&quot;#序列&quot; class=&quot;headerlink&quot; title=&quot;序列&quot;&gt;&lt;/a&gt;序列&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;序列是一种数据存储方式，用来存储一系列的数据。在内存中，序列就是一块用来存放多个连续值的内存空间。序列中存储的是对象的地址，而不是对象的值，同时序列本身也是一个对象。Python中常用的序列结构有：字符串，列表，元组，集合。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://raptazure.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>PAT</title>
    <link href="https://raptazure.github.io/2019/11/04/PAT/"/>
    <id>https://raptazure.github.io/2019/11/04/PAT/</id>
    <published>2019-11-03T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h1><h2 id="B1002-写出这个数"><a href="#B1002-写出这个数" class="headerlink" title="B1002 写出这个数"></a>B1002 写出这个数</h2><p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出自然数 <em>n</em> 的值。这里保证 <em>n</em> 小于 10100。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行内输出 <em>n</em> 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567890987654321123456789</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yi san wu</span><br></pre></td></tr></table></figure><h3 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h3><p>​        因为要读入的数字太大，所以用字符串读入，在求和时就要考虑将字符串数字转换为整数，此后，为了方便获取和sum的位数，可以再使用<code>to_string</code>将sum转化为字符串num，之后利用<code>lenth()</code>函数得出元素个数，通过str数组与num数组的元素对应关系遍历输出结果。此外还要注意输出时最后一个拼音后面不要有空格。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> str[<span class="number">10</span>] = &#123;<span class="string">"ling"</span>, <span class="string">"yi"</span>, <span class="string">"er"</span>, <span class="string">"san"</span>, <span class="string">"si"</span>, <span class="string">"wu"</span>, <span class="string">"liu"</span>, <span class="string">"qi"</span>, <span class="string">"ba"</span>, <span class="string">"jiu"</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">        sum += (s[i] - <span class="string">'0'</span>);</span><br><span class="line">    <span class="built_in">string</span> num = to_string(sum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str[num[i] - <span class="string">'0'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B1003-我要通过！-数学题"><a href="#B1003-我要通过！-数学题" class="headerlink" title="B1003 我要通过！-  数学题"></a>B1003 我要通过！-  数学题</h2><p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p><p>得到“<strong>答案正确</strong>”的条件是：</p><ol><li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li><li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li><li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li></ol><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">PAT</span><br><span class="line">PAAT</span><br><span class="line">AAPATAA</span><br><span class="line">AAPAATAAAA</span><br><span class="line">xPATx</span><br><span class="line">PT</span><br><span class="line">Whatever</span><br><span class="line">APAAATAA</span><br></pre></td></tr></table></figure><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h3 id="Solution：-1"><a href="#Solution：-1" class="headerlink" title="Solution："></a>Solution：</h3><p>​        分析题目中可以通过的字符串：</p><div class="table-container"><table><thead><tr><th style="text-align:center">xPATx</th><th style="text-align:center">aPbTc  -&gt;  aPbATca</th></tr></thead><tbody><tr><td style="text-align:center">APATA</td><td style="text-align:center">APATA -&gt; APAATAA -&gt; APAAATAAA -&gt; APAAAATAAAA</td></tr><tr><td style="text-align:center">AAPATAA</td><td style="text-align:center">AAPATAA -&gt; AAPAATAAAA -&gt; AAPAAATAAAAAA</td></tr></tbody></table></div><p>​        可以发现：字符串中必须只有P，A，T，且P和T中间至少有一个A。字符串中只能有一个P和一个T。中间和首尾可以插入A，但是需要满足开头A个数 × 中间A个数 = 末尾A个数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> n, p = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.size(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            m[s[j]]++;<span class="comment">//统计P A T个数</span></span><br><span class="line">            <span class="keyword">if</span>(s[j] == <span class="string">'P'</span>) p = j;<span class="comment">//记录P的index</span></span><br><span class="line">            <span class="keyword">if</span>(s[j] == <span class="string">'T'</span>) t = j;<span class="comment">//记录T的index</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只有一个P，有A，只有一个T，仅有P A T三种字母，P和T之间要有字母，开头A个数 × 中间A个数 = 末尾A个数</span></span><br><span class="line">        <span class="keyword">if</span>(m[<span class="string">'P'</span>] == <span class="number">1</span> &amp;&amp; m[<span class="string">'A'</span>] != <span class="number">0</span> &amp;&amp; m[<span class="string">'T'</span>] == <span class="number">1</span> &amp;&amp; m.size() == <span class="number">3</span> &amp;&amp; t - p != <span class="number">1</span> &amp;&amp; p * (t - p <span class="number">-1</span>) == s.size() - t - <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B1006-换个格式输出整数"><a href="#B1006-换个格式输出整数" class="headerlink" title="B1006 换个格式输出整数"></a>B1006 换个格式输出整数</h2><p>让我们用字母 <code>B</code> 来表示“百”、字母 <code>S</code> 表示“十”，用 <code>12...n</code> 来表示不为零的个位数字 <code>n</code>（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 <code>234</code> 应该被输出为 <code>BBSSS1234</code>，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p><h3 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，给出正整数 <em>n</em>（&lt;1000）。</p><h3 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，用规定的格式输出 <em>n</em>。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">234</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BBSSS1234</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS123</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h3><p>​        //一道比较简单的字符串处理，注意一下按位存到数组里就行了，或者甚至可以不开数组…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i] = n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b[<span class="number">2</span>]; i++) <span class="built_in">printf</span>(<span class="string">"B"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b[<span class="number">1</span>]; i++) <span class="built_in">printf</span>(<span class="string">"S"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b[<span class="number">0</span>]; i++) <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B1009-说反话"><a href="#B1009-说反话" class="headerlink" title="B1009 说反话"></a>B1009 说反话</h2><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p><h3 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h3><p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p><h3 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，输出倒序后的句子。</p><h3 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World Here I Come</span><br></pre></td></tr></table></figure><h3 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Come I Here World Hello</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution:"></a>Solution:</h3><p>​        根据输入输出的规律，考虑可以用栈来实现。将输入的每个单词用v.push(s)压入栈中，再输出栈顶v.top()，然后将栈顶元素弹出v.pop()，直到栈空为止。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s) v.push(s);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.top();</span><br><span class="line">    v.pop();</span><br><span class="line">    <span class="keyword">while</span>(!v.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; v.top();</span><br><span class="line">        v.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        另外，因为PAT是单点测试，所以可用EOF判断单词是否已经输入完毕。注意在黑框手动输入时，系统不知道什么时候到达了“文件末尾”，需要Ctrl Z+Enter来告诉系统到达了EOF，这样系统才会结束while。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;<span class="comment">//单词个数</span></span><br><span class="line">    <span class="keyword">char</span> ans[<span class="number">90</span>][<span class="number">90</span>];<span class="comment">//单词数，字母数</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,ans[num]) != <span class="number">-1</span>)<span class="comment">//输入直到文件末尾</span></span><br><span class="line">        num++;  <span class="comment">//单词个数加1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = num - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)<span class="comment">//倒着输出单词</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>,ans[i]);</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        还有一种很麻烦的做法，c语言风格，注意<code>fgets()</code>函数会读入回车符而不是像<code>gets()</code>函数(可是这个函数已经被c11标准删除，OJ上似乎也挂掉了)一样直接把\n转换为\0，所以需要借助字符指针修改掉被读入的\n。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">90</span>];</span><br><span class="line">    <span class="keyword">char</span> * find;</span><br><span class="line">    fgets(str, <span class="keyword">sizeof</span>(str), <span class="built_in">stdin</span>);</span><br><span class="line">    </span><br><span class="line">    find = <span class="built_in">strchr</span>(str, <span class="string">'\n'</span>);  <span class="comment">//查找换行符</span></span><br><span class="line">    <span class="keyword">if</span>(find)         <span class="comment">//如果find不为空指针</span></span><br><span class="line">        *find = <span class="string">'\0'</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str), r = <span class="number">0</span>, h = <span class="number">0</span>; <span class="comment">//r为行，h为列</span></span><br><span class="line">    <span class="keyword">char</span> ans[<span class="number">90</span>][<span class="number">90</span>];   <span class="comment">//ans[0] 到 ans[r] 存放单词</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] != <span class="string">' '</span>)<span class="comment">//如果不是空格，存放至ans[r][h]并h++</span></span><br><span class="line">            ans[r][h++] = str[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//如果是空格，说明一个单词结束，行增加1,列恢复为0</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans[r][h] = <span class="string">'\0'</span>;  <span class="comment">//末尾是结束符\0</span></span><br><span class="line">            r++;</span><br><span class="line">            h = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &gt;= <span class="number">0</span>; i--)  <span class="comment">//倒序输出单词</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, ans[i]);</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B1014-福尔摩斯的约会"><a href="#B1014-福尔摩斯的约会" class="headerlink" title="B1014 福尔摩斯的约会"></a>B1014 福尔摩斯的约会</h2><p>大侦探福尔摩斯接到一张奇怪的字条：<code>我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm</code>。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间<code>星期四 14:04</code>，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 <code>D</code>，代表星期四；第 2 对相同的字符是 <code>E</code> ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示）；后面两字符串第 1 对相同的英文字母 <code>s</code> 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p><h3 id="输入格式：-4"><a href="#输入格式：-4" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。</p><h3 id="输出格式：-4"><a href="#输出格式：-4" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出约会的时间，格式为 <code>DAY HH:MM</code>，其中 <code>DAY</code> 是某星期的 3 字符缩写，即 <code>MON</code> 表示星期一，<code>TUE</code> 表示星期二，<code>WED</code> 表示星期三，<code>THU</code> 表示星期四，<code>FRI</code> 表示星期五，<code>SAT</code> 表示星期六，<code>SUN</code> 表示星期日。题目输入保证每个测试存在唯一解。</p><h3 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3485djDkxh4hhGE </span><br><span class="line">2984akDfkkkkggEdsb </span><br><span class="line">s&amp;hgsfdk </span><br><span class="line">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure><h3 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">THU 14:04</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution:"></a>Solution:</h3><p>​        先找到前两个字符串中第一对相等的大写字母来确定星期，再找到第二对相同的字符(可能是字母也可能是数字)来确定小时，最后通过后两个字符串中第一对相同的英文字母确定分钟(字母的index)。可用cctype里的函数确定一个字符是字母还是数字，还要注意如何控制输出，以及字符串和数字间的转换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    <span class="keyword">char</span> t[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> pos, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; a.length() &amp;&amp; i &lt; b.length())&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[i] &amp;&amp; (a[i] &gt;= <span class="string">'A'</span> &amp;&amp; a[i] &lt;= <span class="string">'G'</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            t[<span class="number">0</span>] = a[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    i = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; a.length() &amp;&amp; i &lt; b.length())&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[i] &amp;&amp; ((a[i] &gt;= <span class="string">'A'</span> &amp;&amp; a[i] &lt;= <span class="string">'N'</span>) || <span class="built_in">isdigit</span>(a[i])))&#123;</span><br><span class="line">            t[<span class="number">1</span>] = a[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; c.length() &amp;&amp; j &lt; d.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[j] == d[j] &amp;&amp; <span class="built_in">isalpha</span>(c[j]))</span><br><span class="line">        &#123;</span><br><span class="line">            pos = j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> week[<span class="number">7</span>] = &#123;<span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span>, <span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="built_in">isdigit</span>(t[<span class="number">1</span>]) ? t[<span class="number">1</span>] - <span class="string">'0'</span> : t[<span class="number">1</span>] - <span class="string">'A'</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; week[t[<span class="number">0</span>] - <span class="string">'A'</span>] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%02d:%02d"</span>, m, pos);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h1><h2 id="B1001-害死人不偿命的-3n-1-猜想"><a href="#B1001-害死人不偿命的-3n-1-猜想" class="headerlink" title="B1001 害死人不偿命的(3n+1)猜想"></a>B1001 害死人不偿命的(3n+1)猜想</h2><p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>=1？</p><h3 id="输入格式：-5"><a href="#输入格式：-5" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p><h3 id="输出格式：-5"><a href="#输出格式：-5" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 <em>n</em> 计算到 1 需要的步数。</p><h3 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="Solution：-2"><a href="#Solution：-2" class="headerlink" title="Solution："></a>Solution：</h3><p>​        //第一题，没啥好说的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            n = (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        cnt ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B1008-数组元素循环右移问题"><a href="#B1008-数组元素循环右移问题" class="headerlink" title="B1008 数组元素循环右移问题"></a>B1008 数组元素循环右移问题</h2><p>一个数组<em>A</em>中存有<em>N</em>（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移<em>M</em>（≥0）个位置，即将<em>A</em>中的数据由（<em>A</em>[0]<em>A</em>[1]⋯<em>A[N−1]）变换为（</em>A[N−<em>M]⋯</em>A[N−1]A[0]A[1]⋯A[N−M−1]）（最后<em>M</em>个数循环移至最前面的<em>M</em>个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>每个输入包含一个测试用例，第1行输入<em>N</em>（1≤<em>N</em>≤100）和<em>M</em>（≥0）；第2行输入<em>N</em>个整数，之间用空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出循环右移<em>M</em>位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 6 1 2 3 4</span><br></pre></td></tr></table></figure><h3 id="Solution：-3"><a href="#Solution：-3" class="headerlink" title="Solution："></a>Solution：</h3><p>​        观察测试用例，由123456变为561234，考虑到algorithm里的reverse很方便，可以多次(局部)倒置数组来实现循环右移，即数组全部倒置 -&gt; 前M个元素倒置 -&gt; 剩下的N - M个元素倒置。注意如果M &gt; N，那么向右循环移动M位净效果为向右移动M % N位，所以使用M前需要先执行M = M % N。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    m %= n;</span><br><span class="line">    <span class="keyword">if</span>(m)</span><br><span class="line">    &#123;</span><br><span class="line">        reverse(begin(v), begin(v) + n);</span><br><span class="line">        reverse(begin(v), begin(v) + m);</span><br><span class="line">        reverse(begin(v) + m, begin(v) + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; n - <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个题当然也可以不用vector，可以对比一下写法(其实差不多少哇)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    m %= n;</span><br><span class="line">    <span class="keyword">if</span>(m)</span><br><span class="line">    &#123;</span><br><span class="line">        reverse(a, a + n);</span><br><span class="line">        reverse(a, a + m);</span><br><span class="line">        reverse(a + m, a + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; n - <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B1010-一元多项式求导"><a href="#B1010-一元多项式求导" class="headerlink" title="B1010 一元多项式求导"></a>B1010 一元多项式求导</h2><p>设计函数求一元多项式的导数。（注：<em>x**n</em>（<em>n</em>为整数）的一阶导数为<em>n<strong>x</strong>n</em>−1。）</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 <code>0 0</code>。</p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 -5 2 6 1 -2 0</span><br></pre></td></tr></table></figure><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12 3 -10 1 6 0</span><br></pre></td></tr></table></figure><h3 id="Solution：-4"><a href="#Solution：-4" class="headerlink" title="Solution："></a>Solution：</h3><p>​        因为零多项式的情况需要输出0 0(不然没输出多尴尬..)，所以需要变量flag标记是否已经输出过，同时flag还可以控制空格的输出。每一组第二次输入的数b不为0时肯定有输出，此时先判断flag是否为1，如果为1则表示前面有过输出，需要在前面先输出一个空格。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a * b &lt;&lt; <span class="string">" "</span> &lt;&lt; b - <span class="number">1</span>;</span><br><span class="line">            flag = <span class="number">1</span>; <span class="comment">//标记为已有输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有输出且b=0时输出"0 0"</span></span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"0 0"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B1011-A-B和C"><a href="#B1011-A-B和C" class="headerlink" title="B1011 A+B和C"></a>B1011 A+B和C</h2><p>给定区间 [−231,231] 内的 3 个整数 <em>A</em>、<em>B</em> 和 <em>C</em>，请判断 <em>A</em>+<em>B</em> 是否大于 <em>C</em>。</p><h3 id="输入格式：-6"><a href="#输入格式：-6" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第 1 行给出正整数 <em>T</em> (≤10)，是测试用例的个数。随后给出 <em>T</em> 组测试用例，每组占一行，顺序给出 <em>A</em>、<em>B</em> 和 <em>C</em>。整数间以空格分隔。</p><h3 id="输出格式：-6"><a href="#输出格式：-6" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每组测试用例，在一行中输出 <code>Case #X: true</code> 如果 <em>A</em>+<em>B</em>&gt;<em>C</em>，否则输出 <code>Case #X: false</code>，其中 <code>X</code> 是测试用例的编号（从 1 开始）。</p><h3 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br><span class="line">2147483647 0 2147483646</span><br><span class="line">0 -2147483648 -2147483647</span><br></pre></td></tr></table></figure><h3 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Case #1: false</span><br><span class="line">Case #2: true</span><br><span class="line">Case #3: true</span><br><span class="line">Case #4: false</span><br></pre></td></tr></table></figure><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution:"></a>Solution:</h3><p>​        注意数据范围应该用long long int。要求对每组测试用例在一行中输出结果，每组测试用例占一行，则每次循环输入后就给出输出，即每次循环完成一组用例。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> LL;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        LL a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %s\n"</span>, i + <span class="number">1</span>, a + b &gt; c ? <span class="string">"true"</span> : <span class="string">"false"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B1012-数字分类"><a href="#B1012-数字分类" class="headerlink" title="B1012 数字分类"></a>B1012 数字分类</h2><p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p><ul><li><em>A</em>1 = 能被 5 整除的数字中所有偶数的和；</li><li><em>A</em>2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 <em>n</em>1−<em>n</em>2+<em>n</em>3−<em>n</em>4⋯；</li><li><em>A</em>3 = 被 5 除后余 2 的数字的个数；</li><li><em>A</em>4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li><li><em>A</em>5 = 被 5 除后余 4 的数字中最大数字。</li></ul><h3 id="输入格式：-7"><a href="#输入格式：-7" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em>，随后给出 <em>N</em> 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p><h3 id="输出格式：-7"><a href="#输出格式：-7" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对给定的 <em>N</em> 个正整数，按题目要求计算 <em>A</em>1~<em>A</em>5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p><p>若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p><h3 id="输入样例-1：-1"><a href="#输入样例-1：-1" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13 1 2 3 4 5 6 7 8 9 10 20 16 18</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-1"><a href="#输出样例-1：-1" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 11 2 9.7 9</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-1"><a href="#输入样例-2：-1" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 1 2 4 5 6 7 9 16</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-1"><a href="#输出样例-2：-1" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N 11 2 N 9</span><br></pre></td></tr></table></figure><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution:"></a>Solution:</h3><p>​        数字取余后的结果i保存在v[i]向量中，对v[i]中每个元素按照不同i分类计算，注意如何才能安照题目要求输出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, num, A1 = <span class="number">0</span>, A2 = <span class="number">0</span>, A5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> A4 = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        v[num%<span class="number">5</span>].push_back(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].size(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; v[i][j] % <span class="number">2</span> == <span class="number">0</span>) A1 += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j % <span class="number">2</span> == <span class="number">0</span>) A2 += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j % <span class="number">2</span> == <span class="number">1</span>) A2 -= v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>) A4 += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">4</span> &amp;&amp; v[i][j] &gt; A5) A5 = v[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; A1 == <span class="number">0</span> || i != <span class="number">0</span> &amp;&amp; v[i].size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"N"</span>); <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, A1);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, A2);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, v[<span class="number">2</span>].size());</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%.1f"</span>, A4 / v[<span class="number">3</span>].size());</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, A5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        //这个题用数组很麻烦…要声明很多变量…所以推荐vector</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">1010</span>], b[<span class="number">1010</span>] ,num[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, j = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q[i]);</span><br><span class="line">    <span class="keyword">int</span> sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>, max5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sum4 = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i] % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; q[i] % <span class="number">2</span> == <span class="number">0</span>) &#123;sum1 += q[i];num[<span class="number">0</span>]++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(q[i] % <span class="number">5</span> == <span class="number">1</span>) &#123;b[j++] = q[i]; num[<span class="number">1</span>]++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(q[i] % <span class="number">5</span> == <span class="number">2</span>) num[<span class="number">2</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(q[i] % <span class="number">5</span> == <span class="number">3</span>) &#123;</span><br><span class="line">            sum4 += q[i]; num[<span class="number">3</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q[i] % <span class="number">5</span> == <span class="number">4</span> &amp;&amp; q[i] &gt; max5) &#123;max5 = q[i]; num[<span class="number">4</span>]++;&#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= j; i++) sum2 += <span class="built_in">pow</span>(<span class="number">-1</span>, i) * b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span> (num[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"N"</span>); <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum1);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum2);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, num[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%.1f"</span>, sum4 / num[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, max5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        //还有一种思路，比较麻烦…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> ans[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n, temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp); <span class="comment">//读入数字</span></span><br><span class="line">        <span class="keyword">if</span> (temp % <span class="number">5</span> == <span class="number">0</span>)  <span class="comment">//A1类</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[<span class="number">0</span>] += temp;</span><br><span class="line">                count[<span class="number">0</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp % <span class="number">5</span> == <span class="number">1</span>)  <span class="comment">//A2类</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(count[<span class="number">1</span>] % <span class="number">2</span> == <span class="number">0</span>) ans[<span class="number">1</span>] += temp;</span><br><span class="line">            <span class="keyword">else</span> ans[<span class="number">1</span>] -= temp;</span><br><span class="line">            count[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp % <span class="number">5</span> == <span class="number">2</span>) count[<span class="number">2</span>]++;  <span class="comment">//A3类</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp % <span class="number">5</span> == <span class="number">3</span>)  <span class="comment">//A4类</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans[<span class="number">3</span>] += temp;</span><br><span class="line">            count[<span class="number">3</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">//A5类</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; ans[<span class="number">4</span>])</span><br><span class="line">                ans[<span class="number">4</span>] = temp;</span><br><span class="line">            count[<span class="number">4</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count[<span class="number">0</span>] == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(count[<span class="number">1</span>] == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(count[<span class="number">2</span>] == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d "</span>, count[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span>(count[<span class="number">3</span>] == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.1f "</span>,(<span class="keyword">double</span>)ans[<span class="number">3</span>] / count[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">if</span>(count[<span class="number">4</span>] == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"N"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[<span class="number">4</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="A1025-PAT-Ranking"><a href="#A1025-PAT-Ranking" class="headerlink" title="A1025 PAT Ranking"></a>A1025 PAT Ranking</h2><p>Programming Ability Test (PAT) is organized by the College of Computer Science and Technology of Zhejiang University. Each test is supposed to run simultaneously in several places, and the ranklists will be merged immediately after the test. Now it is your job to write a program to correctly merge all the ranklists and generate the final rank.</p><!--more--><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive number <em>N</em> (≤100), the number of test locations. Then <em>N</em> ranklists follow, each starts with a line containing a positive integer <em>K</em> (≤300), the number of testees, and then <em>K</em> lines containing the registration number (a 13-digit number) and the total score of each testee. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in one line the total number of testees. Then print the final ranklist in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registration_number final_rank location_number local_rank</span><br></pre></td></tr></table></figure><p>The locations are numbered from 1 to <em>N</em>. The output must be sorted in nondecreasing order of the final ranks. The testees with the same score must have the same rank, and the output must be sorted in nondecreasing order of their registration numbers.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">1234567890001 95</span><br><span class="line">1234567890005 100</span><br><span class="line">1234567890003 95</span><br><span class="line">1234567890002 77</span><br><span class="line">1234567890004 85</span><br><span class="line">4</span><br><span class="line">1234567890013 65</span><br><span class="line">1234567890011 25</span><br><span class="line">1234567890014 100</span><br><span class="line">1234567890012 85</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">1234567890005 1 1 1</span><br><span class="line">1234567890014 1 2 1</span><br><span class="line">1234567890001 3 1 2</span><br><span class="line">1234567890003 3 1 2</span><br><span class="line">1234567890004 5 1 4</span><br><span class="line">1234567890012 5 2 2</span><br><span class="line">1234567890002 7 1 5</span><br><span class="line">1234567890013 8 2 3</span><br><span class="line">1234567890011 9 2 4</span><br></pre></td></tr></table></figure><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution:"></a>Solution:</h3><ul><li>[x]  01</li></ul><ul><li><p>在结构体中存放准考证号，分数，考场号以及考场内排名</p></li><li><p>cmp: 分数从大到小，分数相同准考证号从小到大</p></li><li><p>步骤：</p><ul><li><p>按考场读入各考生信息，并对当前读入考场所有考生排序，之后将该考场所有考生排名写入结构体</p></li><li><p>对所有考生排序</p></li><li><p>按顺序一边计算总排名一边输出所有考生信息</p></li></ul></li><li><p>注意：</p></li></ul><ul><li>对同一考场考生单独排序：int num存放当前获取的考生数，每读入一个考生的信息就num++，这样读完一个考场的考生信息后，这个考场的考生对应的数组下标便为[num - k, num]。</li><li><p>相同的分数情况下按照学号的从小到大排列，但是他们的排名应该是一样的数字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">int</span> location_num;</span><br><span class="line">    <span class="keyword">int</span> local_rank;</span><br><span class="line">&#125;stu[<span class="number">30010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Student a, Student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.score != b.score) <span class="keyword">return</span> a.score &gt; b.score;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">strcmp</span>(a.id, b.id) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//num - total testees, n - locations</span></span><br><span class="line">    <span class="keyword">int</span> n, k, num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//k - local testees</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s %d"</span>, stu[num].id, &amp;stu[num].score);</span><br><span class="line">            <span class="comment">//this testee's location number is i</span></span><br><span class="line">            stu[num].location_num = i;</span><br><span class="line">            <span class="comment">//total_testees ++</span></span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//sort testees of current location</span></span><br><span class="line">        sort(stu + num - k, stu + num, cmp);</span><br><span class="line">        <span class="comment">//mark 1st of current location</span></span><br><span class="line">        stu[num - k].local_rank = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//mark the others' rank</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = num - k + <span class="number">1</span>; j &lt; num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(stu[j].score == stu[j - <span class="number">1</span>].score)</span><br><span class="line">                stu[j].local_rank = stu[j - <span class="number">1</span>].local_rank;</span><br><span class="line">            <span class="keyword">else</span> stu[j].local_rank = j + <span class="number">1</span> - (num - k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line">    sort(stu, stu + num, cmp);</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; stu[i].score != stu[i - <span class="number">1</span>].score)</span><br><span class="line">            r = i + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s "</span>,stu[i].id);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, r, stu[i].location_num, stu[i].local_rank);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>[x]  02</li></ul><ul><li><p>利用vector储存数据。先在考场内排名，将某地区排名完成的结构体local[j]赋给总体结构体数组total，然后进行总排名，最后输出。注意输入数据对准考证号位数的要求，不加013最后一个用例会挂掉…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> local_rank, totoal_rank, score, location_num;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Stu a, Stu b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.score != b.score ? a.score &gt; b.score : a.id &lt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;Stu&gt; total;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="built_in">vector</span>&lt;Stu&gt; local(m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld %d"</span>, &amp;local[j].id, &amp;local[j].score);</span><br><span class="line">            local[j].location_num = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(local.begin(), local.end(), cmp);</span><br><span class="line">        local[<span class="number">0</span>].local_rank = <span class="number">1</span>;</span><br><span class="line">        total.push_back(local[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            local[j].local_rank = (local[j].score == local[j - <span class="number">1</span>].score) ? (local[j - <span class="number">1</span>].local_rank) : (j + <span class="number">1</span>);</span><br><span class="line">            total.push_back(local[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(total.begin(), total.end(), cmp);</span><br><span class="line">    total[<span class="number">0</span>].totoal_rank = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; total.size(); j++)</span><br><span class="line">        total[j].totoal_rank = (total[j].score == total[j - <span class="number">1</span>].score) ? (total[j - <span class="number">1</span>].totoal_rank) : (j + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>, total.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total.size(); i++)</span><br><span class="line">    <span class="comment">// K lines containing the registration number (a 13-digit number)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%013lld %d %d %d\n"</span>, total[i].id, total[i].totoal_rank, total[i].location_num, total[i].local_rank);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="B1015-德才论"><a href="#B1015-德才论" class="headerlink" title="B1015 德才论"></a>B1015 德才论</h2><p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p><p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p><h3 id="输入格式：-8"><a href="#输入格式：-8" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出 3 个正整数，分别为：<em>N</em>（≤105），即考生总数；<em>L</em>（≥60），为录取最低分数线，即德分和才分均不低于 <em>L</em> 的考生才有资格被考虑录取；<em>H</em>（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 <em>H</em>，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 <em>L</em> 的考生也按总分排序，但排在第三类考生之后。</p><p>随后 <em>N</em> 行，每行给出一位考生的信息，包括：<code>准考证号 德分 才分</code>，其中<code>准考证号</code>为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。</p><h3 id="输出格式：-8"><a href="#输出格式：-8" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出第一行首先给出达到最低分数线的考生人数 <em>M</em>，随后 <em>M</em> 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。</p><h3 id="输入样例：-6"><a href="#输入样例：-6" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">14 60 80</span><br><span class="line">10000001 64 90</span><br><span class="line">10000002 90 60</span><br><span class="line">10000011 85 80</span><br><span class="line">10000003 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000005 82 77</span><br><span class="line">10000006 83 76</span><br><span class="line">10000007 90 78</span><br><span class="line">10000008 75 79</span><br><span class="line">10000009 59 90</span><br><span class="line">10000010 88 45</span><br><span class="line">10000012 80 100</span><br><span class="line">10000013 90 99</span><br><span class="line">10000014 66 60</span><br></pre></td></tr></table></figure><h3 id="输出样例：-6"><a href="#输出样例：-6" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">10000013 90 99</span><br><span class="line">10000012 80 100</span><br><span class="line">10000003 85 80</span><br><span class="line">10000011 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000007 90 78</span><br><span class="line">10000006 83 76</span><br><span class="line">10000005 82 77</span><br><span class="line">10000002 90 60</span><br><span class="line">10000014 66 60</span><br><span class="line">10000008 75 79</span><br><span class="line">10000001 64 90</span><br></pre></td></tr></table></figure><h3 id="Solution：-5"><a href="#Solution：-5" class="headerlink" title="Solution："></a>Solution：</h3><p>先看看分类要求：</p><ul><li>德才分中有一个低于L，为第五类。</li><li>德才均不低于H，为第一类。</li><li>德不低于H，才低于L，为第二类</li><li>德才均低于L但德大于才，为第三类</li><li>剩下为第四类</li></ul><p>再看看排序要求：</p><ul><li><p>先比类别</p></li><li><p>类别相同比总分</p></li><li><p>总分相同比德</p></li><li><p>德相同比考号</p></li></ul><p>考虑到数据的组织关系，想到可以用结构体。结构体数组<code>vector&lt;node&gt; v[4]</code>中v[0]保存第一类考生，v[1]保存第二类考生…这样可以使分类更加清晰。注意cmp函数中，排序先按照总分排序，然后按照德分排序，最后按照才分排序…然后输出前四类学生的信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num, de, cai;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(struct node a, struct node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="keyword">if</span>((a.de + a.cai) != (b.de + b.cai)) </span><br><span class="line">        <span class="keyword">return</span> (a.de + a.cai) &gt; (b.de + b.cai);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.de != b.de)  <span class="keyword">return</span> a.de &gt; b.de;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> a.num &lt; b.num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, low, high;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;low, &amp;high);   </span><br><span class="line">    <span class="built_in">vector</span>&lt;node&gt; v[<span class="number">4</span>];</span><br><span class="line">    node temp;</span><br><span class="line">    <span class="keyword">int</span> total = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;temp.num, &amp;temp.de, &amp;temp.cai);</span><br><span class="line">        <span class="keyword">if</span>(temp.de &lt; low || temp.cai &lt; low) total--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp.de &gt;= high &amp;&amp; temp.cai &gt;= high)</span><br><span class="line">            v[<span class="number">0</span>].push_back(temp);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp.de &gt;= high &amp;&amp; temp.cai &lt; high)</span><br><span class="line">            v[<span class="number">1</span>].push_back(temp);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp.de &lt; high &amp;&amp; temp.cai &lt; high &amp;&amp; temp.de &gt;= temp.cai)</span><br><span class="line">            v[<span class="number">2</span>].push_back(temp);</span><br><span class="line">        <span class="keyword">else</span> v[<span class="number">3</span>].push_back(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, total);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sort(v[i].begin(), v[i].end(), cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].size(); j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, v[i][j].num, v[i][j].de, v[i][j].cai);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​     还有一种解法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> id[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> de, cai, sum;</span><br><span class="line"><span class="keyword">int</span> flag;  <span class="comment">//考生类别</span></span><br><span class="line">&#125;stu[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Student a, Student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.flag != b.flag) <span class="comment">//类别小的在前</span></span><br><span class="line"><span class="keyword">return</span> a.flag &lt; b.flag;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.sum != b.sum)</span><br><span class="line"><span class="keyword">return</span> a.sum &gt; b.sum; <span class="comment">//总分大的在前</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.de != b.de)  <span class="comment">//德大的在前</span></span><br><span class="line"><span class="keyword">return</span> a.de &gt; b.de; <span class="comment">//考号小的在前 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">strcmp</span>(a.id, b.id) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, L, H;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;L, &amp;H);</span><br><span class="line"><span class="keyword">int</span> m = n;  <span class="comment">//m为及格人数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>, stu[i].id, &amp;stu[i].de, &amp;stu[i].cai);</span><br><span class="line">stu[i].sum = stu[i].de + stu[i].cai;  <span class="comment">//计算总分</span></span><br><span class="line"><span class="keyword">if</span>(stu[i]. de &lt; L || stu[i].cai &lt; L) <span class="comment">//不及格</span></span><br><span class="line">&#123;</span><br><span class="line">stu[i].flag = <span class="number">5</span>;</span><br><span class="line">m--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(stu[i].de &gt;= H &amp;&amp; stu[i].cai &gt;= H) stu[i].flag = <span class="number">1</span>;   </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(stu[i].de &gt;= H &amp;&amp; stu[i].cai &lt; H) stu[i].flag = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(stu[i].de &gt;= stu[i].cai) stu[i].flag = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> stu[i].flag = <span class="number">4</span>;  <span class="comment">//第4类情况最多，放在最后</span></span><br><span class="line">&#125;</span><br><span class="line">sort(stu, stu + n, cmp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %d %d\n"</span>, stu[i].id, stu[i].de, stu[i].cai);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h1><h2 id="B1004-成绩排名"><a href="#B1004-成绩排名" class="headerlink" title="B1004 成绩排名"></a>B1004 成绩排名</h2><p>读入 <em>n</em>（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><h3 id="输入格式：-9"><a href="#输入格式：-9" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，格式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第 1 行：正整数 n</span><br><span class="line">第 2 行：第 1 个学生的姓名 学号 成绩</span><br><span class="line">第 3 行：第 2 个学生的姓名 学号 成绩</span><br><span class="line">  ... ... ...</span><br><span class="line">第 n+1 行：第 n 个学生的姓名 学号 成绩</span><br></pre></td></tr></table></figure><p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p><h3 id="输出格式：-9"><a href="#输出格式：-9" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p><h3 id="输入样例：-7"><a href="#输入样例：-7" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Joe Math990112 89</span><br><span class="line">Mike CS991301 100</span><br><span class="line">Mary EE990830 95</span><br></pre></td></tr></table></figure><h3 id="输出样例：-7"><a href="#输出样例：-7" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure><h3 id="Solutioin"><a href="#Solutioin" class="headerlink" title="Solutioin:"></a>Solutioin:</h3><p>​        //一道很基础的搜索</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, score;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">101</span>, max = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">string</span> name, num, minname, maxname, minnum, maxnum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name &gt;&gt; num &gt;&gt; score;</span><br><span class="line">        <span class="keyword">if</span>(score &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            maxname = name;</span><br><span class="line">            maxnum = num;</span><br><span class="line">            max = score;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(score &lt; min)</span><br><span class="line">        &#123;</span><br><span class="line">            minname = name;</span><br><span class="line">            minnum = num;</span><br><span class="line">            min = score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxname &lt;&lt; <span class="string">" "</span> &lt;&lt; maxnum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; minname &lt;&lt; <span class="string">" "</span> &lt;&lt; minnum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><h2 id="B1005-继续-3n-1-猜想"><a href="#B1005-继续-3n-1-猜想" class="headerlink" title="B1005 继续(3n+1)猜想"></a>B1005 <strong>继续(3n+1)猜想</strong></h2><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 <em>n</em>=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 <em>n</em>=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 <em>n</em> 为“关键数”，如果 <em>n</em> 不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><h3 id="输入格式：-10"><a href="#输入格式：-10" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 <em>K</em> (&lt;100)，第 2 行给出 <em>K</em> 个互不相同的待验证的正整数 <em>n</em> (1&lt;<em>n</em>≤100)的值，数字间用空格隔开。</p><h3 id="输出格式：-10"><a href="#输出格式：-10" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p><h3 id="输入样例：-8"><a href="#输入样例：-8" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 5 6 7 8 11</span><br></pre></td></tr></table></figure><h3 id="输出样例：-8"><a href="#输出样例：-8" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 6</span><br></pre></td></tr></table></figure><h3 id="Solution：-6"><a href="#Solution：-6" class="headerlink" title="Solution："></a>Solution：</h3><p>​        对每个输入的数字验证猜想，验证过程中出现的数字对应的q[n]都更新为1，之后利用sort函数对所有数进行排序，选择q[n]为0的值进行输出，即得关键数字(注意输出时对空格的控制)。这里选择了vector储存n，主要是考虑到其丰富的内置函数，比如<code>vector.begin()</code>返回指向第一个元素的迭代器，<code>end()</code>返回指向最后一个元素的下一个元素的迭代器，这样写sort的时候就很方便，还有<code>size()</code>可以方便地统计元素数量。由于sort函数默认由小到大排列，所以需要手动写cmp函数。注意q的大小应该大于等于100×100，否则可能会segmentation fault。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, n, flag = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        v[i] = n;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> != <span class="number">0</span>) n = <span class="number">3</span> * n + <span class="number">1</span>;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[n] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            q[n] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.begin(), v.end(), cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[v[i]] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">1</span>)  <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; v[i];</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不过由于这道题v中一共只有k个元素，其实也可以不用vector，如下：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, n, flag = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">int</span> h[k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        h[i] = n;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> != <span class="number">0</span>) n = <span class="number">3</span> * n + <span class="number">1</span>;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[n] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            q[n] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(h, h + k, cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">if</span>(q[h[i]] == <span class="number">0</span>)</span><br><span class="line">       &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; h[i];</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h1><h2 id="B1007-素数对猜想"><a href="#B1007-素数对猜想" class="headerlink" title="B1007 素数对猜想"></a>B1007 素数对猜想</h2><p>让我们定义d[n]为：d[n]=p[n+1]−p[n]，其中<em>p[i]</em>是第<em>i</em>个素数。显然有<em>d</em>[1]=1，且对于<em>n</em>&gt;1有<em>d[n]</em>是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p><p>现给定任意正整数<code>N</code>(&lt;105)，请计算不超过<code>N</code>的满足猜想的素数对的个数。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行给出正整数<code>N</code>。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出不超过<code>N</code>的满足猜想的素数对的个数。</p><h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="Solution：-7"><a href="#Solution：-7" class="headerlink" title="Solution："></a>Solution：</h3><p>​        基础：判断是否为素数的函数。根据题意，素数对即是相邻且相差2的两个素数，比如3,5,7就包含两个素数对。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= a; i++)</span><br><span class="line">        <span class="keyword">if</span>(a % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">5</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(isPrime(i) &amp;&amp; isPrime(i - <span class="number">2</span>)) cnt++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B1013-数素数"><a href="#B1013-数素数" class="headerlink" title="B1013  数素数"></a>B1013  数素数</h2><p>令 P[i]表示第 <em>i</em> 个素数。现任给两个正整数 <em>M</em>≤<em>N</em>≤104，请输出 <em>P[M]</em> 到 <em>P[N]</em> 的所有素数。</p><h3 id="输入格式：-11"><a href="#输入格式：-11" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出 <em>M</em> 和 <em>N</em>，其间以空格分隔。</p><h3 id="输出格式：-11"><a href="#输出格式：-11" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 P[M]到 P[N] 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p><h3 id="输入样例：-9"><a href="#输入样例：-9" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 27</span><br></pre></td></tr></table></figure><h3 id="输出样例：-9"><a href="#输出样例：-9" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11 13 17 19 23 29 31 37 41 43</span><br><span class="line">47 53 59 61 67 71 73 79 83 89</span><br><span class="line">97 101 103</span><br></pre></td></tr></table></figure><h3 id="Solution：-8"><a href="#Solution：-8" class="headerlink" title="Solution："></a>Solution：</h3><p>​        需要先利用计数器cnt给n之前的素数编上号，并将其中大于等于m的部分存进数组ans里，之后再次利用cnt进行计数，每次数到十的倍数都换行，在每行第一次输出时不需要在数字前输出空格，以此控制每行结尾没有额外的空格。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= a; i++)</span><br><span class="line">        <span class="keyword">if</span>(a % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, j = <span class="number">0</span>, cnt = <span class="number">0</span>, num = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (cnt &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isPrime(num))&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= m) ans[j++] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span>(cnt % <span class="number">10</span> != <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line">        <span class="keyword">if</span>(cnt % <span class="number">10</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        当然这个题也能使用vector储存素数，可以省略一些变量和index操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= a; i++)</span><br><span class="line">        <span class="keyword">if</span>(a % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, N, num = <span class="number">2</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">while</span> (cnt &lt; N) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isprime(num)) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= M) v.push_back(num);</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++) &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span> (cnt % <span class="number">10</span> != <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, v[i]);</span><br><span class="line">        <span class="keyword">if</span> (cnt % <span class="number">10</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;字符串处理&quot;&gt;&lt;a href=&quot;#字符串处理&quot; class=&quot;headerlink&quot; title=&quot;字符串处理&quot;&gt;&lt;/a&gt;字符串处理&lt;/h1&gt;&lt;h2 id=&quot;B1002-写出这个数&quot;&gt;&lt;a href=&quot;#B1002-写出这个数&quot; class=&quot;headerlink&quot; title=&quot;B1002 写出这个数&quot;&gt;&lt;/a&gt;B1002 写出这个数&lt;/h2&gt;&lt;p&gt;读入一个正整数 &lt;em&gt;n&lt;/em&gt;，计算其各位数字之和，用汉语拼音写出和的每一位数字。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithms" scheme="https://raptazure.github.io/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>Python Introduction</title>
    <link href="https://raptazure.github.io/2019/11/04/python-Introduction/"/>
    <id>https://raptazure.github.io/2019/11/04/python-Introduction/</id>
    <published>2019-11-03T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图形化程序设计"><a href="#图形化程序设计" class="headerlink" title="图形化程序设计"></a>图形化程序设计</h2><ul><li>Prepare(Arch):   <code>sudo pacman -S tk</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle            <span class="comment"># 导入turtle模块</span></span><br><span class="line">turtle.showturtle()      <span class="comment"># 显示箭头</span></span><br><span class="line">turtle.write(<span class="string">"raptazure"</span>) <span class="comment"># 写字符串 </span></span><br><span class="line">turtle.forward(<span class="number">300</span>)       <span class="comment"># 前进300像素</span></span><br><span class="line">turtle.color(<span class="string">"red"</span>)       <span class="comment"># 画笔颜色改为red</span></span><br><span class="line">turtle.left(<span class="number">90</span>)           <span class="comment"># 箭头左转90度</span></span><br><span class="line">turtle.goto(<span class="number">0</span>,<span class="number">50</span>)         <span class="comment"># 去坐标（0,50）</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>画一个奥运五环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.width(<span class="number">10</span>)</span><br><span class="line">turtle.color(<span class="string">"blue"</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">120</span>,<span class="number">0</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">"black"</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">240</span>,<span class="number">0</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">"red"</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">60</span>,<span class="number">-50</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">"yellow"</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">180</span>,<span class="number">-50</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">"green"</span>)</span><br><span class="line">turtle.circle(<span class="number">50</span>)</span><br></pre></td></tr></table></figure><h2 id="Python程序构成"><a href="#Python程序构成" class="headerlink" title="Python程序构成"></a>Python程序构成</h2><ul><li>由模块构成，一个模块对应一个python源文件。</li><li>模块由语句构成，语句是python语句的构造单元，用于创建对象，变量赋值，调用函数，控制语句等。</li><li>注意缩进 tab ; 使用 \ 行连接符<br>​官方PEP-8代码风格说明：<a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0008/</a></li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>​            Python中，一切皆对象。每个对象由标识<code>id</code>，类型<code>type</code>，值<code>value</code> 组成</p><ul><li><p>标识用于唯一标识对象，通常对应对象在计算机内存中的地址。使用内置函数id(obj)可以返回对象obj的标识。</p></li><li><p>类型用于表示对象存储的“数据”的类型，类型可以限制对象的取值范围以及可以执行的操作。可以使用type(obj)获得对象的所属类型。</p></li><li><p>值表示对象所存储的数据的信息，使用print(obj)可以直接打印出值。</p></li><li><p>对象的本质是一个内存块，拥有特定的值，支持特定类型的相关操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">r = id(a)</span><br><span class="line">s= id(b)</span><br><span class="line">print(r,s)</span><br><span class="line"><span class="comment"># 140637462492192 140637462492192</span></span><br><span class="line"><span class="comment"># id：140637462492192</span></span><br><span class="line"><span class="comment"># type：int</span></span><br><span class="line"><span class="comment"># value：3</span></span><br><span class="line"><span class="comment"># 参考 整数缓存机制</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><p>在Python中，变量也称为：对象的引用。因为变量存储的就是对象的地址。变量通过地址引用了“对象”。变量位于：栈内存   对象位于：堆内存</p></li><li><p>Python是动态类型语言，变量不需要显式声明类型。根据变量引用的对象，Python解释器自动确定数据类型。</p></li><li><p>Python是强类型语言，每个对象都有数据类型，只支持该类型支持的操作。</p></li></ul><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li><p>用于变量，函数，类，模块的名称。</p><ul><li><p>区分大小写</p></li><li><p>第一个字母必须为字母，下划线</p></li><li><p>不能使用关键字，如 <code>if</code> <code>or</code> <code>while</code></p></li><li><p>以双下划线开头和结尾的名称通常有特殊含义，比如<code>__init__</code>是类的构造函数</p></li><li><p>使用 help() 查看关键字，或者在shell下按F1</p></li></ul></li><li><p>命名规则：</p><ul><li>模块名和包名：全小写，尽量简单，下划线连接  math  os  sys</li><li>函数名：全小写，下划线隔开  <code>my_name</code></li><li>类名：首字母大写，采用驼峰原则，多个单词时，每个单词首字母大写，其余部分小写。 <code>MyPhone</code>   <code>Phone</code></li><li>常量名：全大写字母，多个单词用下划线隔开 <code>MAX_SPEED</code></li></ul></li></ul><h2 id="变量和简单赋值语句"><a href="#变量和简单赋值语句" class="headerlink" title="变量和简单赋值语句"></a>变量和简单赋值语句</h2><ul><li>变量声明和赋值用于将一个变量绑定到一个对象上     变量名 = 表达式</li><li>最简单的表达式是字面量，比如a = 123 。运行过程中，解释器先运行右边的表达式，生成一个代表表达式运算结果的对象，然后再将这个对象地址赋值给左边的变量。</li><li>删除变量和垃圾回收机制：可通过del语句（从栈中）删除不再使用的变量<code>del a</code>。如果对象没有变量引用，就会被垃圾器回收，清理内存空间。</li></ul><h2 id="链式赋值和系列解包赋值"><a href="#链式赋值和系列解包赋值" class="headerlink" title="链式赋值和系列解包赋值"></a>链式赋值和系列解包赋值</h2><ul><li><p>链式赋值用于同一个对象赋值给多个变量  如<code>x=y=123</code></p></li><li><p>系列解包赋值给对应相同个数的变量-&gt;个数必须保持一致<code>a,b,c=4,5,6</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系列解包赋值实现变量互换</span></span><br><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">a,b = b,a</span><br><span class="line">print(a,b)</span><br></pre></td></tr></table></figure></li><li><p>python不支持常量，即没有语法规则限制改变一个常量的值。我们只能约定常量的命名规则，以及在程序的逻辑上不对常量的值作出修改。</p></li></ul><h2 id="内置数据类型-amp-运算符"><a href="#内置数据类型-amp-运算符" class="headerlink" title="内置数据类型 &amp; 运算符"></a>内置数据类型 &amp; 运算符</h2><ul><li><p>整形，浮点型，布尔型，字符串型</p></li><li><p><code>+   -   *   /    //(整数除法)   %   **(幂)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较运算符可连用  3&lt;a&lt;10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>&lt;a&lt;<span class="number">10</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 位操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">0b11001</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">0b01000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = a|b  <span class="comment">#按位或</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(c)</span><br><span class="line"><span class="string">'0b11001'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(a&amp;b)</span><br><span class="line"><span class="string">'0b1000'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(a^b)</span><br><span class="line"><span class="string">'0b10001'</span></span><br><span class="line"><span class="comment"># 按位翻转~ x翻转为-(x+1)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>~a</span><br><span class="line"><span class="number">-26</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(a)</span><br><span class="line"><span class="string">'0b11001'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(~a)</span><br><span class="line"><span class="string">'-0b11010'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt;&lt; <span class="number">1</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt;&lt; <span class="number">3</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt;&lt; <span class="number">2</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &gt;&gt; <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># Python不支持++和--</span></span><br><span class="line"><span class="comment"># 相应复合赋值运算符，比如&gt;&gt;=   ^=   **=</span></span><br><span class="line"><span class="comment"># 优先级：位运算/算术运算&gt;比较运算符&gt;赋值运算符&gt;逻辑运算符</span></span><br><span class="line"><span class="comment"># 常用小括号</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>执行<code>a += 1</code>时会找到a进行+1操作生成一个新对象，把新对象地址给a，原来不再被引用的对象会被垃圾回收。</p></li><li><p>使用<code>divmod()</code>函数同时得到商和余数  <code>divmod(13,3)</code>&gt;&gt;&gt;<code>(4,1)</code> -&gt; tuple</p></li><li><p>整数：</p><ul><li><p><code>0b 0B 二进制</code> <code>0o 0O 八进制</code> <code>0x 0X 十六进制</code>  方便位运算</p></li><li><p>使用<code>int()</code>进行类型转换：浮点数舍弃小数部分，布尔值True转为1，False转为0，字符串符合整数格式(浮点数不行)-&gt;整数</p></li><li><p>自动转型：整数和浮点数运算，结果转为浮点数</p></li><li><p>Python3中，int可存储任意大小的整数，取消了long，不存在整数溢出，因此适合科学运算。</p></li></ul></li><li><p>浮点数：</p><ul><li>3.14可表示为314e-2或者314E-2</li><li>这些数字在内存中也是按照科学计数法存储</li><li><code>float()</code>强转时生成一个类型为float的新对象</li><li><code>round(value)</code>可以返回四舍五入的值</li></ul></li><li><p>时间的表示：</p><ul><li><p>计算机时间的表示从1970.1.1 00:00:00（unix时间点）开始，以ms为单位进行计时。</p></li><li><p>python中ky通过<code>time.time()</code>获得当前时刻，返回值以秒为单位，是1/1000 ms精度的浮点值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">b = int(time.time())</span><br><span class="line">totalYears = b/<span class="number">60</span>//<span class="number">60</span>//<span class="number">24</span>//<span class="number">365</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>布尔值：</p><ul><li>Ture Flase本质还是0与1，可以和数字相加</li><li>比较运算符 &amp; 逻辑运算符 <code>and or not</code> -&gt; 短路特性</li></ul></li><li><p>同一运算符：</p><ul><li>同一运算符用于比较两个对象的存储单元，实际比较的是对象是否指向同一个内存地址。运算符<code>is</code>判断两个标识符是不是引用同一个对象，<code>is not</code>判断两个标识符是否引用不同对象。</li><li><code>is</code>与<code>==</code>区别：is用于判断两个变量引用的对象是否为同一个，比较对象的地址。==用于判断引用变量的值是否相等，默认调用对象的<code>__eq__()</code>方法。is 运算比 == 效率高( ==调用了方法)，在变量和None比较时应使用is。</li></ul></li><li><p>整数缓存问题：小整数对象在全局解释器范围内被放入缓存以重复使用。</p><ul><li>Python仅仅对比较小(范围为[-5, 256])的整数对象进行缓存(使用同一个对象而不建立新对象)。需要注意的是，这仅仅是在<strong>命令行</strong>中执行，而在Pycharm，VS Code或者保存为文件执行，结果是不一样的，这是因为解释器进行了一部分优化([-5, inf])。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># IDLE</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=<span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=<span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c <span class="keyword">is</span> d</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e =<span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="number">257</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e <span class="keyword">is</span> f</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="一个小练习"><a href="#一个小练习" class="headerlink" title="一个小练习"></a>一个小练习</h2><p>​        任务：定义多点坐标，绘出折线，计算起始点和终止点距离。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 定义多个点的坐标</span></span><br><span class="line">x1,y1 = <span class="number">100</span>,<span class="number">100</span></span><br><span class="line">x2,y2 = <span class="number">100</span>,<span class="number">-100</span></span><br><span class="line">x3,y3 = <span class="number">-100</span>,<span class="number">-100</span></span><br><span class="line">x4,y4 = <span class="number">-100</span>,<span class="number">100</span></span><br><span class="line"><span class="comment">#绘制折线</span></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(x1,y1)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.goto(x2,y2)</span><br><span class="line">turtle.goto(x3,y3)</span><br><span class="line">turtle.goto(x4,y4)</span><br><span class="line"><span class="comment">#计算距离</span></span><br><span class="line">distance = math.sqrt((x1-x4)**<span class="number">2</span>+(y1-y4)**<span class="number">2</span>)</span><br><span class="line">turtle.write(distance)</span><br></pre></td></tr></table></figure><p>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图形化程序设计&quot;&gt;&lt;a href=&quot;#图形化程序设计&quot; class=&quot;headerlink&quot; title=&quot;图形化程序设计&quot;&gt;&lt;/a&gt;图形化程序设计&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Prepare(Arch):   &lt;code&gt;sudo pacman -S tk&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; turtle            &lt;span class=&quot;comment&quot;&gt;# 导入turtle模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;turtle.showturtle()      &lt;span class=&quot;comment&quot;&gt;# 显示箭头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;turtle.write(&lt;span class=&quot;string&quot;&gt;&quot;raptazure&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# 写字符串 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;turtle.forward(&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;)       &lt;span class=&quot;comment&quot;&gt;# 前进300像素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;turtle.color(&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;)       &lt;span class=&quot;comment&quot;&gt;# 画笔颜色改为red&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;turtle.left(&lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;)           &lt;span class=&quot;comment&quot;&gt;# 箭头左转90度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;turtle.goto(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)         &lt;span class=&quot;comment&quot;&gt;# 去坐标（0,50）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://raptazure.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Binary Search</title>
    <link href="https://raptazure.github.io/2019/10/27/Binary-Search/"/>
    <id>https://raptazure.github.io/2019/10/27/Binary-Search/</id>
    <published>2019-10-26T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-二分模板"><a href="#1-二分模板" class="headerlink" title="1.二分模板"></a>1.二分模板</h2><h4 id="整数二分："><a href="#整数二分：" class="headerlink" title="整数二分："></a>整数二分：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mid属于左边：区间[1, r]被划分为[1, mid]和[mid+1, r]时使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid)) r = mid;</span><br><span class="line">        <span class="comment">//check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mid属于右边：区间[1, r]被划分为[1, mid - 1]和[mid, r]时使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="浮点数二分："><a href="#浮点数二分：" class="headerlink" title="浮点数二分："></a>浮点数二分：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浮点数二分没有边界问题，相对容易解决</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">0</span>, r = x;</span><br><span class="line">    <span class="comment">/* 不用精度判断而是直接迭代100次</span></span><br><span class="line"><span class="comment">    for (int i = 0; i &lt; 100; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        double mid = (r + l) / 2;</span></span><br><span class="line"><span class="comment">        if(mid * mid &gt;= x) r = mid;</span></span><br><span class="line"><span class="comment">        else l = mid;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; <span class="number">1e-8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (r + l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(mid * mid &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-伪码描述"><a href="#2-伪码描述" class="headerlink" title="2.伪码描述"></a>2.伪码描述</h2><p>​ 给定 N 个从小到大<strong>排好序</strong>的整数序列 List[]，以及某待查找整数 X，我们的目标是找到 X 在 List 中的下标。即若有 List[i]=X，则返回 i；否则返回-1 表示没有找到。<br>​ 二分法是先找到序列的中点 List[M]，与 X 进行比较，若相等则返回中点下标；否则，若 List[M]&gt;X，则在左边的子系列中查找 X；若 List[M]&lt;X，则在右边的子系列中查找 X。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     int left = 0;</span><br><span class="line">     int right = n-1;</span><br><span class="line">     while(left 小于等于 right)</span><br><span class="line">     &#123;</span><br><span class="line">         int mid = (left + right) / 2;</span><br><span class="line">         if(List[mid] == X)</span><br><span class="line">             返回 mid;</span><br><span class="line">         else if(List[mid] &lt; X)</span><br><span class="line">             left = mid+1;</span><br><span class="line">         else if(List[mid] &gt; X)</span><br><span class="line">             right = mid-1;</span><br><span class="line">     &#125;</span><br><span class="line">     return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最坏情况下的时间复杂度：O(logn)，一直找不到，但是一直排除一半的值</p><p>最好情况下的时间复杂度：O(1)，第一个就找到了</p><p>空间复杂度：O(1)</p></blockquote><h2 id="3-算法实现"><a href="#3-算法实现" class="headerlink" title="3.算法实现"></a>3.算法实现</h2><h4 id="一个普普通通的二分："><a href="#一个普普通通的二分：" class="headerlink" title="一个普普通通的二分："></a>一个普普通通的二分：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x,a[<span class="number">10000</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="comment">//需要保证输入有序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> result = BinarySearch(a,x,n);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left&lt;=right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]==x)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&lt;x)</span><br><span class="line">            left = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&gt;x)</span><br><span class="line">            right = mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入样例</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">44</span></span><br><span class="line"><span class="comment">11 22 33 44 55 66 77 88 99</span></span><br><span class="line"><span class="comment">输出为所寻数的index，即要找的数为数组中从左往右数第inex+1个</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="整数二分：AcWing-789"><a href="#整数二分：AcWing-789" class="headerlink" title="整数二分：AcWing 789"></a>整数二分：AcWing 789</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">int</span> n, m;</span><br><span class="line"> <span class="keyword">int</span> q[N];</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q[i]);</span><br><span class="line">     <span class="keyword">while</span> (m--)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[mid] &gt;= x) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q[l] != x) <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1 -1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(q[mid] &lt;= x) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="浮点数二分：AcWing-790"><a href="#浮点数二分：AcWing-790" class="headerlink" title="浮点数二分：AcWing 790"></a>浮点数二分：AcWing 790</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> n;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        n = -n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (r + l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(mid * mid * mid &gt;= n)  r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.6lf"</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-二分模板&quot;&gt;&lt;a href=&quot;#1-二分模板&quot; class=&quot;headerlink&quot; title=&quot;1.二分模板&quot;&gt;&lt;/a&gt;1.二分模板&lt;/h2&gt;&lt;h4 id=&quot;整数二分：&quot;&gt;&lt;a href=&quot;#整数二分：&quot; class=&quot;headerlink&quot; title=&quot;整数二分：&quot;&gt;&lt;/a&gt;整数二分：&lt;/h4&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//mid属于左边：区间[1, r]被划分为[1, mid]和[mid+1, r]时使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bsearch_1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (l &amp;lt; r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = (l + r) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(check(mid)) r = mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//check()判断mid是否满足性质&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; l = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//mid属于右边：区间[1, r]被划分为[1, mid - 1]和[mid, r]时使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bsearch_2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (l &amp;lt; r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = (l + r + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(check(mid)) l = mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; r = mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Algorithms" scheme="https://raptazure.github.io/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>如何高效优雅地为Arch Linux瘦身?</title>
    <link href="https://raptazure.github.io/2019/10/18/Arch-Clean/"/>
    <id>https://raptazure.github.io/2019/10/18/Arch-Clean/</id>
    <published>2019-10-17T16:00:00.000Z</published>
    <updated>2020-05-13T00:55:35.661Z</updated>
    
    <content type="html"><![CDATA[<p>​ 虽然 Linux 本身的体积比 Windows 10 小很多，但是使用 Manjaro 的这段时间里，感觉产生的日常垃圾也不少。由于喜欢大空间带来的自由的感觉，必然就要进行瘦身啦！</p><a id="more"></a><ul><li><h4 id="清理安装包缓存"><a href="#清理安装包缓存" class="headerlink" title="清理安装包缓存"></a>清理安装包缓存</h4><p>删除未安装 &amp; 已安装 &amp; 旧版本的包文件缓存</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Scc</span><br></pre></td></tr></table></figure><ul><li><h4 id="清除孤立软件包-无用依赖"><a href="#清除孤立软件包-无用依赖" class="headerlink" title="清除孤立软件包(无用依赖)"></a>清除孤立软件包(无用依赖)</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Rns $(pacman -Qtdq)</span><br></pre></td></tr></table></figure><ul><li><h4 id="清理日志文件-限制日志文件大小"><a href="#清理日志文件-限制日志文件大小" class="headerlink" title="清理日志文件(限制日志文件大小)"></a>清理日志文件(限制日志文件大小)</h4></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo journalctl --vacuum-size=30M</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​ 虽然 Linux 本身的体积比 Windows 10 小很多，但是使用 Manjaro 的这段时间里，感觉产生的日常垃圾也不少。由于喜欢大空间带来的自由的感觉，必然就要进行瘦身啦！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://raptazure.github.io/tags/linux/"/>
    
  </entry>
  
</feed>
